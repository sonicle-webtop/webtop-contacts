{
  "openapi": "3.0.1",
  "info": {
    "title": "WebTop Contacts",
    "contact": {
      "email": "dev-team@sonicle.com"
    },
    "version": "v2",
    "description": "This is Contacts service API enpoint."
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "security": [
    {
      "auth-basic": []
    },
    {
      "auth-bearer": []
    }
  ],
  "paths": {
    "/carddav/addressbooks/{addressBookUid}": {
      "get": {
        "tags": [
          "dav"
        ],
        "summary": "Gets a single address-book",
        "operationId": "getAddressBook",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DavAddressBook"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter",
            "content": {}
          },
          "404": {
            "description": "Address book not found",
            "content": {}
          }
        },
        "description": "Gets the specified AddressBook."
      },
      "put": {
        "tags": [
          "dav"
        ],
        "summary": "Updates an address-book",
        "operationId": "updateAddressBook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DavAddressBookUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter",
            "content": {}
          },
          "404": {
            "description": "Address book not found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body",
        "description": "Updates specified AddressBook."
      },
      "delete": {
        "tags": [
          "dav"
        ],
        "summary": "Deletes an address-book",
        "operationId": "deleteAddressBook",
        "responses": {
          "204": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter",
            "content": {}
          },
          "404": {
            "description": "Address book not found",
            "content": {}
          },
          "405": {
            "description": "Delete operation is not allowed",
            "content": {}
          }
        },
        "description": "Deletes specified AddressBook."
      },
      "parameters": [
        {
          "name": "addressBookUid",
          "in": "path",
          "description": "Address book UID",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "1234"
        }
      ]
    },
    "/carddav/addressbooks": {
      "get": {
        "tags": [
          "dav"
        ],
        "summary": "List all address-books",
        "operationId": "getAddressBooks",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DavAddressBook"
                  }
                }
              }
            }
          }
        },
        "description": "List available AddressBooks."
      },
      "post": {
        "tags": [
          "dav"
        ],
        "summary": "Adds a new address-book",
        "operationId": "addAddressBook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DavAddressBookNew"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DavAddressBook"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body",
        "description": "Creates new AddressBook."
      }
    },
    "/carddav/addressbooks/{addressBookUid}/cards": {
      "get": {
        "tags": [
          "dav"
        ],
        "summary": "List all cards for a specific address-book",
        "operationId": "getCards",
        "parameters": [
          {
            "name": "hrefs",
            "in": "query",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DavCard"
                  }
                }
              }
            }
          }
        },
        "description": "List all Cards of specified AddressBook."
      },
      "post": {
        "tags": [
          "dav"
        ],
        "summary": "Adds a new card",
        "operationId": "addCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DavCardNew"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body",
        "description": "Creates new Card into specified AddressBook."
      },
      "parameters": [
        {
          "name": "addressBookUid",
          "in": "path",
          "description": "Address book UID",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "1234"
        }
      ]
    },
    "/carddav/addressbooks/{addressBookUid}/cards/changes": {
      "get": {
        "tags": [
          "dav"
        ],
        "summary": "Get card changes",
        "description": "Returns changed cards (added/modified/deleted) since the specified syncToken. If token is not provided, the initial sync configuration will be returned.",
        "operationId": "getCardsChanges",
        "parameters": [
          {
            "name": "syncToken",
            "in": "query",
            "description": "Marks changes starting point",
            "schema": {
              "type": "string"
            },
            "example": "20180416130954"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of returned results",
            "schema": {
              "type": "integer"
            },
            "example": 100
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DavCardsChanges"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter",
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "name": "addressBookUid",
          "in": "path",
          "description": "Address book UID",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "1234"
        }
      ]
    },
    "/carddav/addressbooks/{addressBookUid}/cards/{href}": {
      "get": {
        "tags": [
          "dav"
        ],
        "summary": "Get a single card",
        "operationId": "getCard",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DavCard"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter",
            "content": {}
          },
          "404": {
            "description": "Card not found",
            "content": {}
          }
        },
        "description": "Gets specified Card."
      },
      "put": {
        "tags": [
          "dav"
        ],
        "summary": "Updates a card",
        "operationId": "updateCard",
        "requestBody": {
          "content": {
            "text/vcard": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter",
            "content": {}
          },
          "404": {
            "description": "Card not found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body",
        "description": "Updates specified Card."
      },
      "delete": {
        "tags": [
          "dav"
        ],
        "summary": "Deletes a card",
        "operationId": "deleteCard",
        "responses": {
          "204": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter",
            "content": {}
          },
          "404": {
            "description": "Card not found",
            "content": {}
          }
        },
        "description": "Deletes specified Card."
      },
      "parameters": [
        {
          "name": "addressBookUid",
          "in": "path",
          "description": "Address book UID",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "1234"
        },
        {
          "name": "href",
          "in": "path",
          "description": "Card reference URI",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/eas/folders": {
      "get": {
        "tags": [
          "eas"
        ],
        "summary": "List all folders",
        "operationId": "getFolders",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EasSyncFolder"
                  }
                }
              }
            }
          }
        },
        "description": "Returns a list of available Categories with enabled synchronization."
      }
    },
    "/eas/folders/{folderId}/messages-stats": {
      "get": {
        "tags": [
          "eas"
        ],
        "summary": "List all messages for a specific folder",
        "operationId": "getMessagesStats",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EasSyncContactStat"
                  }
                }
              }
            }
          }
        },
        "description": "Returns sync informations for the specified Category."
      },
      "parameters": [
        {
          "name": "folderId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "1234"
        }
      ]
    },
    "/eas/folders/{folderId}/messages": {
      "post": {
        "tags": [
          "eas"
        ],
        "summary": "Adds a message",
        "operationId": "addMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EasSyncContactUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EasSyncContactStat"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body",
        "description": "Add new Contact into specified Category."
      },
      "parameters": [
        {
          "name": "folderId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "1234"
        }
      ]
    },
    "/eas/folders/{folderId}/messages/{id}": {
      "get": {
        "tags": [
          "eas"
        ],
        "summary": "Get a single message",
        "operationId": "getMessage",
        "parameters": [
          {
            "name": "picture",
            "in": "query",
            "description": "Determine whether to return picture data",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EasSyncContact"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter",
            "content": {}
          },
          "404": {
            "description": "Contact not found",
            "content": {}
          }
        },
        "description": "Gets the specified Contact."
      },
      "put": {
        "tags": [
          "eas"
        ],
        "summary": "Updates a message",
        "operationId": "updateMessage",
        "parameters": [
          {
            "name": "picture",
            "in": "query",
            "description": "Determine whether to update picture data",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EasSyncContactUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EasSyncContactStat"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter",
            "content": {}
          },
          "404": {
            "description": "Contact not found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body",
        "description": "Updates the specified Contact."
      },
      "delete": {
        "tags": [
          "eas"
        ],
        "summary": "Deletes a message",
        "operationId": "deleteMessage",
        "responses": {
          "204": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter",
            "content": {}
          },
          "404": {
            "description": "Contact not found",
            "content": {}
          }
        },
        "description": "Deletes the specified Contact."
      },
      "parameters": [
        {
          "name": "folderId",
          "in": "path",
          "description": "Folder ID",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "1234"
        },
        {
          "name": "id",
          "in": "path",
          "description": "Message ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/me/categories": {
      "get": {
        "summary": "List Categories",
        "tags": [
          "me"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoriesResult"
                }
              }
            }
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "operationId": "listCategories",
        "description": "Returns a list of categories readable by the current user: this includes both personal and incoming shared categories.",
        "parameters": [
          {
            "$ref": "#/components/parameters/dollar_filter"
          },
          {
            "$ref": "#/components/parameters/dollar_select"
          },
          {
            "$ref": "#/components/parameters/dollar_orderBy"
          },
          {
            "$ref": "#/components/parameters/dollar_pageNo"
          },
          {
            "$ref": "#/components/parameters/dollar_pageSize"
          },
          {
            "$ref": "#/components/parameters/dollar_returnCount"
          }
        ]
      },
      "post": {
        "summary": "Add a Category",
        "operationId": "addCategory",
        "responses": {
          "201": {
            "description": "Category created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter"
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "user_id",
            "description": "The ID of a user"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryBase"
              }
            }
          }
        },
        "x-codegen-request-body-name": "body",
        "description": "Adds new category specifying the owning user ID. If no user ID is provided, the owner will be the current user."
      }
    },
    "/me/categories/{category_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "category_id",
          "in": "path",
          "required": true,
          "description": "The ID of a category"
        }
      ],
      "get": {
        "summary": "Get a category",
        "tags": [
          "me"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter"
          },
          "404": {
            "description": "Category not found"
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "operationId": "getCategory",
        "description": "Gets the specified category given its ID."
      },
      "put": {
        "summary": "Update a category",
        "operationId": "updateCategory",
        "responses": {
          "200": {
            "description": "Category updated"
          },
          "400": {
            "description": "Invalid parameter"
          },
          "404": {
            "description": "Category not found"
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "tags": [
          "me"
        ],
        "x-codegen-request-body-name": "body",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryBase"
              }
            }
          }
        },
        "description": "Update the specified category given its ID. You can choose to update the entire object or only a subset of data."
      },
      "delete": {
        "summary": "Delete a category",
        "operationId": "deleteCategory",
        "responses": {
          "204": {
            "description": "Category deleted"
          },
          "400": {
            "description": "Invalid parameter"
          },
          "404": {
            "description": "Category not found"
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "tags": [
          "me"
        ],
        "description": "Delete a category given its ID."
      }
    },
    "/me/categories/{category_id}/contacts": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "category_id",
          "in": "path",
          "required": true,
          "description": "The ID of a category"
        }
      ],
      "get": {
        "summary": "List contacts",
        "tags": [
          "me"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsResult"
                }
              }
            }
          },
          "404": {
            "description": "Category not found"
          },
          "405": {
            "description": "Not allowed"
          }
        },
        "operationId": "listCategoryContacts",
        "parameters": [
          {
            "$ref": "#/components/parameters/dollar_filter"
          },
          {
            "$ref": "#/components/parameters/dollar_select"
          },
          {
            "$ref": "#/components/parameters/dollar_orderBy"
          },
          {
            "$ref": "#/components/parameters/dollar_pageNo"
          },
          {
            "$ref": "#/components/parameters/dollar_pageSize"
          },
          {
            "$ref": "#/components/parameters/dollar_returnCount"
          }
        ],
        "description": "Returns a list of contacts from specified category."
      },
      "post": {
        "summary": "Add a contact",
        "tags": [
          "me"
        ],
        "operationId": "addCategoryContact",
        "responses": {
          "201": {
            "description": "Contact created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "404": {
            "description": "Category not Found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactEx"
              }
            }
          }
        },
        "x-codegen-request-body-name": "body",
        "description": "Adds new contact into given category."
      }
    },
    "/me/categories/{category_id}/contacts/delta": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "category_id",
          "in": "path",
          "required": true,
          "description": "The ID of a category"
        }
      ],
      "get": {
        "summary": "List changes on contacts collection",
        "tags": [
          "me"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsResultDelta"
                }
              }
            }
          }
        },
        "operationId": "listCategoryContactsDelta",
        "parameters": [
          {
            "$ref": "#/components/parameters/dollar_syncToken"
          },
          {
            "$ref": "#/components/parameters/dollar_select"
          }
        ],
        "description": "Get a set of contacts that have been added, deleted, or updated in a specified category, starting from a precise instant identified by a given syncToken."
      }
    },
    "/me/contacts": {
      "post": {
        "summary": "Add a contact",
        "operationId": "addContact",
        "responses": {
          "201": {
            "description": "Contact created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          }
        },
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "category_id",
            "required": true,
            "description": "The category ID where the contact will be added into"
          }
        ],
        "x-codegen-request-body-name": "body",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactEx"
              }
            }
          }
        },
        "description": "Adds new contact into specified category."
      }
    },
    "/me/contacts/{contact_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "contact_id",
          "in": "path",
          "required": true,
          "description": "The ID of a contact"
        }
      ],
      "get": {
        "summary": "Get a contact",
        "tags": [
          "me"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter"
          },
          "404": {
            "description": "Contact not found"
          }
        },
        "operationId": "getContact",
        "parameters": [
          {
            "$ref": "#/components/parameters/dollar_select"
          }
        ],
        "description": "Gets the specified contact given its ID."
      },
      "put": {
        "summary": "Update a contact",
        "operationId": "updateContact",
        "responses": {
          "200": {
            "description": "Contact updated",
            "content": {}
          },
          "400": {
            "description": "Invalid parameter"
          },
          "404": {
            "description": "Contact not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactEx"
              }
            }
          }
        },
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/dollar_update"
          }
        ],
        "x-codegen-request-body-name": "body",
        "description": "Update the specified contact given its ID. You can choose to update the entire object or only a subset of data."
      },
      "delete": {
        "summary": "Delete a contact",
        "operationId": "deleteContact",
        "responses": {
          "204": {
            "description": "Contact deleted"
          },
          "400": {
            "description": "Invalid parameter"
          },
          "404": {
            "description": "Contact not found"
          }
        },
        "tags": [
          "me"
        ],
        "description": "Delete a contact given its ID."
      }
    },
    "/me/contacts/{contact_id}/picture": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "contact_id",
          "in": "path",
          "required": true,
          "description": "The ID of a contact"
        }
      ],
      "get": {
        "summary": "Get a contact picture metadata",
        "tags": [
          "me"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPictureMeta"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {}
          }
        },
        "operationId": "getContactPictureMeta",
        "description": "Gets the contact's picture metatada of a given contact ID."
      },
      "put": {
        "summary": "Set contact picture",
        "tags": [
          "me"
        ],
        "operationId": "setContactPicture",
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Contact not found"
          }
        },
        "description": "Assign a picture to the given contact ID. The picture should be in binary. It replaces any existing photo for that contact.",
        "requestBody": {
          "content": {
            "image/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "description": "The binary data of the picture."
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "The picture media-type."
          }
        ]
      },
      "delete": {
        "summary": "Delete contact picture",
        "operationId": "clearContactPicture",
        "responses": {
          "204": {
            "description": "Contact's picture deleted"
          },
          "404": {
            "description": "Contact not found"
          }
        },
        "description": "Deletes the contact's picture of a given contact ID.",
        "tags": [
          "me"
        ]
      }
    },
    "/me/contacts/{contact_id}/picture/$value": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "contact_id",
          "in": "path",
          "required": true,
          "description": "The ID of a contact"
        }
      ],
      "get": {
        "summary": "Get contact picture binary data",
        "tags": [
          "me"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "404": {
            "description": "Contact not found"
          }
        },
        "operationId": "getContactPictureBytes",
        "description": "Gets the contact's picture raw data (binary), if any, for a given contact ID."
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "required": [
          "code"
        ],
        "x-stoplight": {
          "id": "64e40e16f35e3"
        },
        "type": "object",
        "properties": {
          "code": {
            "maximum": 599,
            "minimum": 400,
            "type": "integer"
          },
          "description": {
            "type": "string",
            "example": "Bad query parameter [$size]: Invalid integer value [abc]"
          }
        },
        "description": "This general detailed error structure is used throughout this API.",
        "title": ""
      },
      "DavAddressBook": {
        "type": "object",
        "description": "Bean for carry addressbook's fields",
        "properties": {
          "id": {
            "type": "string",
            "description": "AddressBook ID (internal)"
          },
          "uid": {
            "type": "string",
            "description": "AddressBook UID (public)"
          },
          "displayName": {
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "syncToken": {
            "type": "string",
            "description": "Current sync token"
          },
          "aclFol": {
            "type": "string",
            "description": "ACL info for folder itself"
          },
          "aclEle": {
            "type": "string",
            "description": "ACL info for folder elements"
          },
          "ownerUsername": {
            "type": "string",
            "description": "The owner profile's username"
          }
        },
        "required": [
          "id",
          "uid",
          "displayName",
          "syncToken",
          "aclFol",
          "aclEle",
          "ownerUsername"
        ]
      },
      "DavAddressBookUpdate": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "New value for displayName"
          },
          "description": {
            "type": "string",
            "description": "New value for description"
          },
          "updatedFields": {
            "type": "array",
            "description": "Specifies which fields have been updated",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Bean for carry addressbook's updateable fields"
      },
      "DavAddressBookNew": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name"
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        },
        "description": "Bean for carry addressbook's fields"
      },
      "DavCard": {
        "type": "object",
        "description": "Bean for carry card fields",
        "properties": {
          "id": {
            "type": "string",
            "description": "Card ID (internal)"
          },
          "uid": {
            "type": "string",
            "description": "Card UID (public)"
          },
          "href": {
            "type": "string",
            "description": "Reference URI"
          },
          "lastModified": {
            "type": "integer",
            "description": "Last modification time (unix timestamp)",
            "format": "int64"
          },
          "etag": {
            "type": "string",
            "description": "Revision tag"
          },
          "size": {
            "type": "integer",
            "description": "Size (in bytes) of card data"
          },
          "vcard": {
            "type": "string",
            "description": "Card data (vCard format)"
          }
        },
        "required": [
          "id",
          "uid",
          "href"
        ]
      },
      "DavCardNew": {
        "required": [
          "href",
          "vcard"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "Reference URI"
          },
          "vcard": {
            "type": "string",
            "description": "Card data (vCard format)"
          }
        },
        "description": "Bean for carry new card fields"
      },
      "DavCardChanged": {
        "type": "object",
        "description": "Bean for carry fields of card that have been changed",
        "properties": {
          "id": {
            "type": "string",
            "description": "Card ID (internal)"
          },
          "href": {
            "type": "string",
            "description": "Reference URI"
          },
          "etag": {
            "type": "string",
            "description": "Revision tag"
          }
        },
        "required": [
          "id",
          "href",
          "etag"
        ]
      },
      "DavCardsChanges": {
        "required": [
          "deleted",
          "inserted",
          "syncToken",
          "updated"
        ],
        "type": "object",
        "properties": {
          "syncToken": {
            "type": "string",
            "description": "Current sync token"
          },
          "inserted": {
            "type": "array",
            "description": "Items that have been inserted",
            "items": {
              "$ref": "#/components/schemas/DavCardChanged"
            }
          },
          "updated": {
            "type": "array",
            "description": "Items that have been updated",
            "items": {
              "$ref": "#/components/schemas/DavCardChanged"
            }
          },
          "deleted": {
            "type": "array",
            "description": "Items that have been deleted",
            "items": {
              "$ref": "#/components/schemas/DavCardChanged"
            }
          }
        },
        "description": "Bean for carry card collection changes"
      },
      "EasSyncFolder": {
        "type": "object",
        "description": "Bean for carry folder's fields",
        "properties": {
          "id": {
            "type": "string",
            "description": "AddressBook ID (internal)"
          },
          "displayName": {
            "type": "string",
            "description": "Display name"
          },
          "etag": {
            "type": "string",
            "description": "Revision tag"
          },
          "deflt": {
            "type": "boolean",
            "description": "Specifies if marked as predefined folder"
          },
          "foAcl": {
            "type": "string",
            "description": "ACL info for folder itself"
          },
          "elAcl": {
            "type": "string",
            "description": "ACL info for folder elements"
          },
          "ownerId": {
            "type": "string",
            "description": "The owner profile ID"
          }
        },
        "required": [
          "id",
          "displayName",
          "etag",
          "foAcl",
          "elAcl",
          "ownerId"
        ]
      },
      "EasSyncContactStat": {
        "type": "object",
        "description": "Bean for carry messageStat fields",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID (internal)"
          },
          "etag": {
            "type": "string",
            "description": "Revision tag"
          }
        },
        "required": [
          "id",
          "etag"
        ]
      },
      "EasSyncContact": {
        "type": "object",
        "description": "Bean for carry messageStat fields",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID (internal)"
          },
          "etag": {
            "type": "string",
            "description": "Revision tag"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "firstName": {
            "type": "string",
            "description": "First name"
          },
          "lastName": {
            "type": "string",
            "description": "Last name"
          },
          "nickname": {
            "type": "string",
            "description": "Nickname"
          },
          "mobile": {
            "type": "string",
            "description": "Mobile phone"
          },
          "pager1": {
            "type": "string",
            "description": "Pager 1"
          },
          "pager2": {
            "type": "string",
            "description": "Pager 2"
          },
          "email1": {
            "type": "string",
            "description": "Email address 1"
          },
          "email2": {
            "type": "string",
            "description": "Email address 2"
          },
          "email3": {
            "type": "string",
            "description": "Email address 3"
          },
          "im1": {
            "type": "string",
            "description": "Instant Msg. 1"
          },
          "im2": {
            "type": "string",
            "description": "Instant Msg. 2"
          },
          "im3": {
            "type": "string",
            "description": "Instant Msg. 3"
          },
          "workAddress": {
            "type": "string",
            "description": "Business address"
          },
          "workPostalCode": {
            "type": "string",
            "description": "Business postal code"
          },
          "workCity": {
            "type": "string",
            "description": "Business city"
          },
          "workState": {
            "type": "string",
            "description": "Business state/province"
          },
          "workCountry": {
            "type": "string",
            "description": "Business country"
          },
          "workTelephone1": {
            "type": "string",
            "description": "Business telephone 1"
          },
          "workTelephone2": {
            "type": "string",
            "description": "Business telephone 2"
          },
          "workFax": {
            "type": "string",
            "description": "Business fax"
          },
          "homeAddress": {
            "type": "string",
            "description": "Home address"
          },
          "homePostalCode": {
            "type": "string",
            "description": "Home postal code"
          },
          "homeCity": {
            "type": "string",
            "description": "Home city"
          },
          "homeState": {
            "type": "string",
            "description": "Home state"
          },
          "homeCountry": {
            "type": "string",
            "description": "Home country"
          },
          "homeTelephone1": {
            "type": "string",
            "description": "Home telephone 1"
          },
          "homeTelephone2": {
            "type": "string",
            "description": "Home telephone 2"
          },
          "homeFax": {
            "type": "string",
            "description": "Home fax"
          },
          "otherAddress": {
            "type": "string",
            "description": "Other address"
          },
          "otherPostalCode": {
            "type": "string",
            "description": "Other postal code"
          },
          "otherCity": {
            "type": "string",
            "description": "Other city"
          },
          "otherState": {
            "type": "string",
            "description": "Other state"
          },
          "otherCountry": {
            "type": "string",
            "description": "Other country"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID"
          },
          "companyName": {
            "type": "string",
            "description": "Company name"
          },
          "function": {
            "type": "string",
            "description": "Job title"
          },
          "department": {
            "type": "string",
            "description": "Department"
          },
          "manager": {
            "type": "string",
            "description": "Manager name"
          },
          "assistant": {
            "type": "string",
            "description": "Assistant name"
          },
          "assistantTelephone": {
            "type": "string",
            "description": "Assistant telephone"
          },
          "partner": {
            "type": "string",
            "description": "Partner"
          },
          "birthday": {
            "type": "string",
            "description": "Birthday date (ISO date YYYYMMDD)"
          },
          "anniversary": {
            "type": "string",
            "description": "Anniversary date (ISO date YYYYMMDD)"
          },
          "url": {
            "type": "string",
            "description": "Web-site URL"
          },
          "notes": {
            "type": "string",
            "description": "Notes"
          },
          "picture": {
            "type": "string",
            "description": "Image base64 data URI"
          }
        },
        "required": [
          "id",
          "etag"
        ]
      },
      "EasSyncContactUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title"
          },
          "firstName": {
            "type": "string",
            "description": "First name"
          },
          "lastName": {
            "type": "string",
            "description": "Last name"
          },
          "nickname": {
            "type": "string",
            "description": "Nickname"
          },
          "mobile": {
            "type": "string",
            "description": "Mobile phone"
          },
          "pager1": {
            "type": "string",
            "description": "Pager 1"
          },
          "pager2": {
            "type": "string",
            "description": "Pager 2"
          },
          "email1": {
            "type": "string",
            "description": "Email address 1"
          },
          "email2": {
            "type": "string",
            "description": "Email address 2"
          },
          "email3": {
            "type": "string",
            "description": "Email address 3"
          },
          "im1": {
            "type": "string",
            "description": "Instant Msg. 1"
          },
          "im2": {
            "type": "string",
            "description": "Instant Msg. 2"
          },
          "im3": {
            "type": "string",
            "description": "Instant Msg. 3"
          },
          "workAddress": {
            "type": "string",
            "description": "Business address"
          },
          "workPostalCode": {
            "type": "string",
            "description": "Business postal code"
          },
          "workCity": {
            "type": "string",
            "description": "Business city"
          },
          "workState": {
            "type": "string",
            "description": "Business state/province"
          },
          "workCountry": {
            "type": "string",
            "description": "Business country"
          },
          "workTelephone1": {
            "type": "string",
            "description": "Business telephone 1"
          },
          "workTelephone2": {
            "type": "string",
            "description": "Business telephone 2"
          },
          "workFax": {
            "type": "string",
            "description": "Business fax"
          },
          "homeAddress": {
            "type": "string",
            "description": "Home address"
          },
          "homePostalCode": {
            "type": "string",
            "description": "Home postal code"
          },
          "homeCity": {
            "type": "string",
            "description": "Home city"
          },
          "homeState": {
            "type": "string",
            "description": "Home state"
          },
          "homeCountry": {
            "type": "string",
            "description": "Home country"
          },
          "homeTelephone1": {
            "type": "string",
            "description": "Home telephone 1"
          },
          "homeTelephone2": {
            "type": "string",
            "description": "Home telephone 2"
          },
          "homeFax": {
            "type": "string",
            "description": "Home fax"
          },
          "otherAddress": {
            "type": "string",
            "description": "Other address"
          },
          "otherPostalCode": {
            "type": "string",
            "description": "Other postal code"
          },
          "otherCity": {
            "type": "string",
            "description": "Other city"
          },
          "otherState": {
            "type": "string",
            "description": "Other state"
          },
          "otherCountry": {
            "type": "string",
            "description": "Other country"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID"
          },
          "companyName": {
            "type": "string",
            "description": "Company name"
          },
          "function": {
            "type": "string",
            "description": "Job title"
          },
          "department": {
            "type": "string",
            "description": "Department"
          },
          "manager": {
            "type": "string",
            "description": "Manager name"
          },
          "assistant": {
            "type": "string",
            "description": "Assistant name"
          },
          "assistantTelephone": {
            "type": "string",
            "description": "Assistant telephone"
          },
          "partner": {
            "type": "string",
            "description": "Partner"
          },
          "birthday": {
            "type": "string",
            "description": "Birthday date (ISO date YYYYMMDD)"
          },
          "anniversary": {
            "type": "string",
            "description": "Anniversary date (ISO date YYYYMMDD)"
          },
          "url": {
            "type": "string",
            "description": "Web-site URL"
          },
          "notes": {
            "type": "string",
            "description": "Notes"
          },
          "picture": {
            "type": "string",
            "description": "Image base64 data URI"
          }
        },
        "description": "Bean for carry message's updateable fields"
      },
      "CategoryBase": {
        "title": "CategoryBase",
        "x-stoplight": {
          "id": "lk9h4ifgjfkvg"
        },
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "x-stoplight": {
              "id": "yy7rv05md7vy4"
            },
            "enum": [
              "local",
              "carddav"
            ]
          },
          "builtIn": {
            "type": "boolean",
            "x-stoplight": {
              "id": "cueiw4vv3z6cu"
            }
          },
          "name": {
            "type": "string",
            "x-stoplight": {
              "id": "vdpesxix1oa8y"
            }
          },
          "description": {
            "type": "string",
            "x-stoplight": {
              "id": "ndrxgzeewdhc3"
            }
          },
          "color": {
            "type": "string",
            "x-stoplight": {
              "id": "v3ksxehzwblnf"
            }
          },
          "easSync": {
            "type": "string",
            "x-stoplight": {
              "id": "4xmlutgx9a34u"
            },
            "enum": [
              "off",
              "read",
              "read-write"
            ]
          },
          "isPrivate": {
            "type": "boolean",
            "x-stoplight": {
              "id": "yxg45bzlgf4zh"
            }
          },
          "remoteSyncFrequency": {
            "type": "integer",
            "x-stoplight": {
              "id": "4j6lwegn92wj9"
            }
          },
          "remoteSyncTimestamp": {
            "type": "string",
            "x-stoplight": {
              "id": "gsr12pr20muzh"
            },
            "readOnly": true
          },
          "remoteSyncToken": {
            "type": "string",
            "x-stoplight": {
              "id": "3kd3g184em03x"
            },
            "readOnly": true
          },
          "providerParams": {
            "type": "string",
            "x-stoplight": {
              "id": "fb2ve2bhdka0i"
            }
          }
        },
        "required": [
          "provider",
          "builtIn",
          "name",
          "color",
          "easSync",
          "isPrivate"
        ],
        "description": "Represent a category object with base updateable fields."
      },
      "Category": {
        "title": "Category",
        "x-stoplight": {
          "id": "uducz87dq8777"
        },
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The category ID.",
                "readOnly": true
              },
              "etag": {
                "type": "string",
                "x-stoplight": {
                  "id": "h8gd56gox4tmi"
                },
                "description": "The revision identifier that refers to the last modification.",
                "readOnly": true
              },
              "itemsETag": {
                "type": "string",
                "x-stoplight": {
                  "id": "bp38d1bl3gfo3"
                },
                "description": "The revision identifier that refers to the last modification of the items.",
                "readOnly": true
              },
              "createdOn": {
                "type": "string",
                "x-stoplight": {
                  "id": "80znhqnynal4j"
                },
                "description": "Creation timestamp in ISO 8601 format and UTC time.",
                "readOnly": true
              },
              "updatedOn": {
                "type": "string",
                "x-stoplight": {
                  "id": "5kf80dtfdw0u8"
                },
                "description": "Modification timestamp in ISO 8601 format and UTC time.",
                "readOnly": true
              },
              "owner": {
                "$ref": "#/components/schemas/OwnerInfo"
              }
            }
          },
          {
            "$ref": "#/components/schemas/CategoryBase"
          }
        ],
        "description": "Represent a complete category object."
      },
      "CategoriesResult": {
        "title": "CategoriesResult",
        "x-stoplight": {
          "id": "9cwwa9calzrpg"
        },
        "type": "object",
        "description": "Represents a response object for a collection of categories.",
        "x-class-extra-annotation": "@JsonInclude(JsonInclude.Include.NON_NULL)",
        "properties": {
          "totalCount": {
            "type": "integer",
            "x-stoplight": {
              "id": "y3ogz86j919ct"
            },
            "description": "Items total count, usually used for pagination.",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "x-stoplight": {
              "id": "2sgsj1752mcd3"
            },
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      },
      "ContactBase": {
        "title": "ContactBase",
        "x-stoplight": {
          "id": "2wv8ke2qtm7hl"
        },
        "type": "object",
        "description": "Represent a contact object with base updateable fields.",
        "x-class-extra-annotation": "@JsonInclude(JsonInclude.Include.NON_NULL)",
        "properties": {
          "displayName": {
            "type": "string",
            "x-stoplight": {
              "id": "fn0v1ylaqsd7f"
            },
            "description": "The contact's display name."
          },
          "title": {
            "type": "string",
            "x-stoplight": {
              "id": "tk3laqzvpnipq"
            },
            "description": "The contact's title."
          },
          "firstName": {
            "type": "string",
            "x-stoplight": {
              "id": "ozp6lubmx4loc"
            },
            "description": "The contact's first-name."
          },
          "lastName": {
            "type": "string",
            "x-stoplight": {
              "id": "8ihc5aqrsberk"
            },
            "description": "The contact's last-name."
          },
          "nickname": {
            "type": "string",
            "x-stoplight": {
              "id": "vtdckrg6p08yb"
            },
            "description": "The contact's nickname."
          },
          "mobile": {
            "type": "string",
            "x-stoplight": {
              "id": "aeqsb91fyd731"
            },
            "description": "The contact's mobile number."
          },
          "pager1": {
            "type": "string",
            "x-stoplight": {
              "id": "e146xf69j3ggs"
            },
            "description": "The contact's pager number #1."
          },
          "pager2": {
            "type": "string",
            "x-stoplight": {
              "id": "brse0nov2bsi9"
            },
            "description": "The contact's pager number #2."
          },
          "email1": {
            "type": "string",
            "x-stoplight": {
              "id": "eh8ddrwp81wsu"
            },
            "description": "The contact's email address #1."
          },
          "email2": {
            "type": "string",
            "x-stoplight": {
              "id": "b9n22mw06jdoq"
            },
            "description": "The contact's email address #2."
          },
          "email3": {
            "type": "string",
            "x-stoplight": {
              "id": "v7beil74jrmaz"
            },
            "description": "The contact's email address #3."
          },
          "im1": {
            "type": "string",
            "x-stoplight": {
              "id": "e06p461g9dhdi"
            },
            "description": "The contact's IM #1."
          },
          "im2": {
            "type": "string",
            "x-stoplight": {
              "id": "3o9cuwd9cm7r1"
            },
            "description": "The contact's IM #2."
          },
          "im3": {
            "type": "string",
            "x-stoplight": {
              "id": "vbjqgdumbmj2o"
            },
            "description": "The contact's IM #3."
          },
          "workAddress": {
            "type": "string",
            "x-stoplight": {
              "id": "lmvf76kzizpot"
            },
            "description": "Contact's work address."
          },
          "workPostalCode": {
            "type": "string",
            "x-stoplight": {
              "id": "jujarubn0gcng"
            },
            "description": "Contact's work address postal-code."
          },
          "workCity": {
            "type": "string",
            "x-stoplight": {
              "id": "rradh6st0vnxl"
            },
            "description": "Contact's work address city."
          },
          "workState": {
            "type": "string",
            "x-stoplight": {
              "id": "ypqon18p3b0nl"
            },
            "description": "Contact's work address state."
          },
          "workCountry": {
            "type": "string",
            "x-stoplight": {
              "id": "oy1asvxmrbapi"
            },
            "description": "Contact's work address country."
          },
          "workTelephone1": {
            "type": "string",
            "x-stoplight": {
              "id": "tqi36r5ahdz9l"
            },
            "description": "Contact's work telephone number #1."
          },
          "workTelephone2": {
            "type": "string",
            "x-stoplight": {
              "id": "74jwzwgtd0066"
            },
            "description": "Contact's work telephone number #2."
          },
          "workFax": {
            "type": "string",
            "x-stoplight": {
              "id": "fetmamv3klm8y"
            },
            "description": "Contact's work fax number."
          },
          "homeAddress": {
            "type": "string",
            "x-stoplight": {
              "id": "46ypabe4jvk7k"
            },
            "description": "Contact's home address."
          },
          "homePostalCode": {
            "type": "string",
            "x-stoplight": {
              "id": "6m9v65wwwdm8i"
            },
            "description": "Contact's home address postal-code."
          },
          "homeCity": {
            "type": "string",
            "x-stoplight": {
              "id": "gttgf22wa3gum"
            },
            "description": "Contact's home address city."
          },
          "homeState": {
            "type": "string",
            "x-stoplight": {
              "id": "pc4eo2tw9k6w3"
            },
            "description": "Contact's home address state."
          },
          "homeCountry": {
            "type": "string",
            "x-stoplight": {
              "id": "dfa6ius1k3l4n"
            },
            "description": "Contact's home address country."
          },
          "homeTelephone1": {
            "type": "string",
            "x-stoplight": {
              "id": "66ckdahlvw362"
            },
            "description": "Contact's home telephone number #1."
          },
          "homeTelephone2": {
            "type": "string",
            "x-stoplight": {
              "id": "uu5lcqb8de5pa"
            },
            "description": "Contact's home telephone number #2."
          },
          "homeFax": {
            "type": "string",
            "x-stoplight": {
              "id": "1ofl8097vn6rb"
            },
            "description": "Contact's home fax number."
          },
          "otherAddress": {
            "type": "string",
            "x-stoplight": {
              "id": "s04w085nuhauk"
            },
            "description": "Contact's other address."
          },
          "otherPostalCode": {
            "type": "string",
            "x-stoplight": {
              "id": "n26fciiuyp825"
            },
            "description": "Contact's other address postal-code."
          },
          "otherCity": {
            "type": "string",
            "x-stoplight": {
              "id": "hxmgwclaf3qa3"
            },
            "description": "Contact's other address city."
          },
          "otherState": {
            "type": "string",
            "x-stoplight": {
              "id": "n2me161oa713m"
            },
            "description": "Contact's other address state."
          },
          "otherCountry": {
            "type": "string",
            "x-stoplight": {
              "id": "0entjel17hf73"
            },
            "description": "Contact's other address country."
          },
          "companyId": {
            "type": "string",
            "x-stoplight": {
              "id": "yz2xz9moa5djf"
            },
            "description": "The ID of the contact's company."
          },
          "companyName": {
            "type": "string",
            "x-stoplight": {
              "id": "hay1s72z1wadd"
            },
            "description": "The name of the contact's company."
          },
          "function": {
            "type": "string",
            "x-stoplight": {
              "id": "wym4vmt4wirou"
            },
            "description": "The contact's job title."
          },
          "department": {
            "type": "string",
            "x-stoplight": {
              "id": "439clolul3jsa"
            },
            "description": "The contact's department."
          },
          "assistantName": {
            "type": "string",
            "x-stoplight": {
              "id": "2bfxi6mbx919a"
            },
            "description": "The name of the contact's assistant."
          },
          "assistantTelephone": {
            "type": "string",
            "x-stoplight": {
              "id": "d7kiy2rkqbxna"
            },
            "description": "The telephone number of the contact's assistant."
          },
          "managerName": {
            "type": "string",
            "x-stoplight": {
              "id": "8zcpa884d6s53"
            },
            "description": "The name of the contact's manager."
          },
          "partnerName": {
            "type": "string",
            "x-stoplight": {
              "id": "et6wk1x8crvhv"
            },
            "description": "The name of the contact's spouse/partner."
          },
          "birthday": {
            "type": "string",
            "x-stoplight": {
              "id": "8i1gfgtqg9h42"
            },
            "description": "The contact's birthday date in ISO 8601 format."
          },
          "anniversary": {
            "type": "string",
            "x-stoplight": {
              "id": "rtt3fxcol38b7"
            },
            "description": "The contact's anniversary date in ISO 8601 format."
          },
          "url": {
            "type": "string",
            "x-stoplight": {
              "id": "93ng03aa7przc"
            },
            "description": "Contact's reference URL."
          },
          "notes": {
            "type": "string",
            "x-stoplight": {
              "id": "w1xqv7gz3iadn"
            },
            "description": "The user's notes about the contact."
          }
        }
      },
      "Contact": {
        "title": "Contact",
        "x-stoplight": {
          "id": "jku72itukfuf5"
        },
        "allOf": [
          {
            "type": "object",
            "x-stoplight": {
              "id": "zt5m0xexm7v8y"
            },
            "properties": {
              "id": {
                "type": "string",
                "x-stoplight": {
                  "id": "i14agxpj3na8h"
                },
                "description": "The contact's unique ID.",
                "readOnly": true
              },
              "etag": {
                "type": "string",
                "x-stoplight": {
                  "id": "mfsn0qhdd7etk"
                },
                "description": "The revision identifier that refers to the last modification.",
                "readOnly": true
              },
              "createdOn": {
                "type": "string",
                "x-stoplight": {
                  "id": "2r8snl8qaxvux"
                },
                "description": "Creation timestamp in ISO 8601 format and UTC time.",
                "readOnly": true
              },
              "updatedOn": {
                "type": "string",
                "x-stoplight": {
                  "id": "r54ml5n3nl3zg"
                },
                "description": "Modification timestamp in ISO 8601 format and UTC time.",
                "readOnly": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/ContactEx"
          }
        ],
        "description": "Represent a complete contact object."
      },
      "ContactEx": {
        "title": "ContactEx",
        "x-stoplight": {
          "id": "bslhvl5bl9qok"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactBase"
          }
        ],
        "description": "Represent a contact object with extended data."
      },
      "ContactPictureMeta": {
        "title": "ContactPictureMeta",
        "x-stoplight": {
          "id": "myzl3iqcsmwwt"
        },
        "type": "object",
        "description": "Represent data of a contact's picture.",
        "properties": {
          "mediaType": {
            "type": "string",
            "x-stoplight": {
              "id": "yr7psum2uzzeo"
            },
            "description": "The image MediaType: like 'image-<subtype>'",
            "readOnly": true
          },
          "width": {
            "type": "integer",
            "x-stoplight": {
              "id": "q0vi63nkj9os5"
            },
            "description": "The image width in pixels.",
            "readOnly": true
          },
          "height": {
            "type": "integer",
            "x-stoplight": {
              "id": "1maok9niii9kv"
            },
            "description": "The image height in pixels.",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "x-stoplight": {
              "id": "d7aggjpfulfo8"
            },
            "description": "The image size in bytes.",
            "format": "int64",
            "readOnly": true
          }
        },
        "required": [
          "mediaType"
        ]
      },
      "ContactChanged": {
        "title": "ContactChanged",
        "x-stoplight": {
          "id": "sre2hruit2d5m"
        },
        "allOf": [
          {
            "x-stoplight": {
              "id": "6hzo2bdiolyjj"
            },
            "oneOf": [
              {
                "x-stoplight": {
                  "id": "a5bn37nz4i1d9"
                },
                "properties": {
                  "$added": {
                    "type": "boolean",
                    "x-stoplight": {
                      "id": "j49meadqz41gw"
                    },
                    "readOnly": true
                  }
                }
              },
              {
                "x-stoplight": {
                  "id": "47tx76sr3n10q"
                },
                "properties": {
                  "$updated": {
                    "type": "boolean",
                    "x-stoplight": {
                      "id": "7eahx66brhb8a"
                    },
                    "readOnly": true
                  }
                }
              },
              {
                "x-stoplight": {
                  "id": "xhg3v97ykz9vu"
                },
                "properties": {
                  "$deleted": {
                    "type": "boolean",
                    "x-stoplight": {
                      "id": "molx0ed6g6k8n"
                    },
                    "readOnly": true
                  }
                }
              }
            ],
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/Contact"
          }
        ],
        "description": "Represent an intermediate object for better organizing changes."
      },
      "ContactsResultDelta": {
        "title": "ContactsResultDelta",
        "x-stoplight": {
          "id": "q5kauhq71d0jm"
        },
        "type": "object",
        "x-class-extra-annotation": "@JsonInclude(JsonInclude.Include.NON_NULL)",
        "properties": {
          "nextSyncToken": {
            "type": "string",
            "x-stoplight": {
              "id": "n259smoxxnut2"
            },
            "readOnly": true
          },
          "items": {
            "x-stoplight": {
              "id": "72sgk2u0689z9"
            },
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactChanged"
            }
          }
        },
        "required": [
          "items"
        ],
        "description": "Represent a response object for delta endpoint."
      },
      "ContactsResult": {
        "title": "ContactsResult",
        "x-stoplight": {
          "id": "xoskr9h7q5lgh"
        },
        "type": "object",
        "description": "Represents a response object for a collection of contacts.",
        "x-class-extra-annotation": "@JsonInclude(JsonInclude.Include.NON_NULL)",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Items total count, usually used for pagination.",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "OwnerInfo": {
        "title": "OwnerInfo",
        "x-stoplight": {
          "id": "ian4uy3v4yg3l"
        },
        "type": "object",
        "x-class-extra-annotation": "@JsonInclude(JsonInclude.Include.NON_NULL)",
        "properties": {
          "userId": {
            "type": "string",
            "x-stoplight": {
              "id": "tv48twmdo8tyl"
            },
            "description": "User profile ID.",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "x-stoplight": {
              "id": "ek4xquu52tdei"
            },
            "description": "User profile display-name.",
            "readOnly": true
          },
          "emailAddress": {
            "type": "string",
            "x-stoplight": {
              "id": "8yxb846q4hb8j"
            },
            "description": "User profile personal email address.",
            "readOnly": true
          }
        },
        "description": "Represent a user owning an item."
      }
    },
    "securitySchemes": {
      "auth-basic": {
        "type": "http",
        "scheme": "basic"
      },
      "auth-bearer": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "dollar_syncToken": {
        "name": "$sync_token",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "Token exchanged between client and server that tracks changes from a precise state."
      },
      "dollar_select": {
        "name": "$select",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "name, description"
        },
        "description": "List (comma-separated) of field names to include in resulting items. Optional."
      },
      "dollar_orderBy": {
        "name": "$order_by",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "name ASC, year DESC"
        },
        "description": "List (comma-separated) of field names and direction (ASC or DESC) to sort resulting items. Optional."
      },
      "dollar_pageNo": {
        "name": "$page_no",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1
        },
        "description": "The page number to return, providing a value actually activates pagination. Optional."
      },
      "dollar_pageSize": {
        "name": "$page_size",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1
        },
        "description": "How many items to return when paginating. Defaults to 50."
      },
      "dollar_returnCount": {
        "name": "$return_count",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "description": "Specifies whether to compute and return the full count of a list of items. Useful when dealing with paginated data. Optional."
      },
      "dollar_filter": {
        "name": "$filter",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "A RSQL filter query to filter out resulting items. Optional."
      },
      "dollar_test": {
        "name": "$test",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "description": "Dummy parameter. Do not use!"
      },
      "dollar_update": {
        "name": "$update",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "displayName"
        },
        "description": "List (comma-separated) of field names to update. Optional."
      }
    },
    "responses": {}
  },
  "tags": [
    {
      "name": "dav"
    },
    {
      "name": "eas"
    },
    {
      "name": "me"
    }
  ]
}