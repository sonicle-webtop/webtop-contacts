/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/).
 */
@Schema(description = "Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/).")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class UploadArchive {
  @JsonProperty("archive_content")
  private String archiveContent = null;

  /**
   * The type of encoded file. Defaults to zip.
   */
  public enum ArchiveTypeEnum {
    ZIP("zip"),
    TAR_GZ("tar.gz"),
    TAR_BZ2("tar.bz2"),
    TAR("tar"),
    TGZ("tgz"),
    TBZ("tbz");

    private String value;

    ArchiveTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ArchiveTypeEnum fromValue(String text) {
      for (ArchiveTypeEnum b : ArchiveTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("archive_type")
  private ArchiveTypeEnum archiveType = null;

  public UploadArchive archiveContent(String archiveContent) {
    this.archiveContent = archiveContent;
    return this;
  }

   /**
   * The base64-encoded representation of the archive file.
   * @return archiveContent
  **/
  @Schema(required = true, description = "The base64-encoded representation of the archive file.")
  public String getArchiveContent() {
    return archiveContent;
  }

  public void setArchiveContent(String archiveContent) {
    this.archiveContent = archiveContent;
  }

  public UploadArchive archiveType(ArchiveTypeEnum archiveType) {
    this.archiveType = archiveType;
    return this;
  }

   /**
   * The type of encoded file. Defaults to zip.
   * @return archiveType
  **/
  @Schema(description = "The type of encoded file. Defaults to zip.")
  public ArchiveTypeEnum getArchiveType() {
    return archiveType;
  }

  public void setArchiveType(ArchiveTypeEnum archiveType) {
    this.archiveType = archiveType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadArchive uploadArchive = (UploadArchive) o;
    return Objects.equals(this.archiveContent, uploadArchive.archiveContent) &&
        Objects.equals(this.archiveType, uploadArchive.archiveType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveContent, archiveType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadArchive {\n");
    
    sb.append("    archiveContent: ").append(toIndentedString(archiveContent)).append("\n");
    sb.append("    archiveType: ").append(toIndentedString(archiveType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
