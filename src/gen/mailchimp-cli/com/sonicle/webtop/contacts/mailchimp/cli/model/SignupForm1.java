/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CollectionOfContentForListSignupForms;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CollectionOfElementStyleForListSignupForms;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import com.sonicle.webtop.contacts.mailchimp.cli.model.SignupFormHeaderOptions;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * List signup form.
 */
@Schema(description = "List signup form.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class SignupForm1 {
  @JsonProperty("header")
  private SignupFormHeaderOptions header = null;

  @JsonProperty("contents")
  private List<CollectionOfContentForListSignupForms> contents = null;

  @JsonProperty("styles")
  private List<CollectionOfElementStyleForListSignupForms> styles = null;

  @JsonProperty("signup_form_url")
  private String signupFormUrl = null;

  @JsonProperty("list_id")
  private String listId = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

  public SignupForm1 header(SignupFormHeaderOptions header) {
    this.header = header;
    return this;
  }

   /**
   * Get header
   * @return header
  **/
  @Schema(description = "")
  public SignupFormHeaderOptions getHeader() {
    return header;
  }

  public void setHeader(SignupFormHeaderOptions header) {
    this.header = header;
  }

  public SignupForm1 contents(List<CollectionOfContentForListSignupForms> contents) {
    this.contents = contents;
    return this;
  }

  public SignupForm1 addContentsItem(CollectionOfContentForListSignupForms contentsItem) {
    if (this.contents == null) {
      this.contents = new ArrayList<>();
    }
    this.contents.add(contentsItem);
    return this;
  }

   /**
   * The signup form body content.
   * @return contents
  **/
  @Schema(description = "The signup form body content.")
  public List<CollectionOfContentForListSignupForms> getContents() {
    return contents;
  }

  public void setContents(List<CollectionOfContentForListSignupForms> contents) {
    this.contents = contents;
  }

  public SignupForm1 styles(List<CollectionOfElementStyleForListSignupForms> styles) {
    this.styles = styles;
    return this;
  }

  public SignupForm1 addStylesItem(CollectionOfElementStyleForListSignupForms stylesItem) {
    if (this.styles == null) {
      this.styles = new ArrayList<>();
    }
    this.styles.add(stylesItem);
    return this;
  }

   /**
   * An array of objects, each representing an element style for the signup form.
   * @return styles
  **/
  @Schema(description = "An array of objects, each representing an element style for the signup form.")
  public List<CollectionOfElementStyleForListSignupForms> getStyles() {
    return styles;
  }

  public void setStyles(List<CollectionOfElementStyleForListSignupForms> styles) {
    this.styles = styles;
  }

  public SignupForm1 signupFormUrl(String signupFormUrl) {
    this.signupFormUrl = signupFormUrl;
    return this;
  }

   /**
   * Signup form URL.
   * @return signupFormUrl
  **/
  @Schema(description = "Signup form URL.")
  public String getSignupFormUrl() {
    return signupFormUrl;
  }

  public void setSignupFormUrl(String signupFormUrl) {
    this.signupFormUrl = signupFormUrl;
  }

   /**
   * The signup form&#x27;s list id.
   * @return listId
  **/
  @Schema(example = "4ca5becb8d", description = "The signup form's list id.")
  public String getListId() {
    return listId;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignupForm1 signupForm1 = (SignupForm1) o;
    return Objects.equals(this.header, signupForm1.header) &&
        Objects.equals(this.contents, signupForm1.contents) &&
        Objects.equals(this.styles, signupForm1.styles) &&
        Objects.equals(this.signupFormUrl, signupForm1.signupFormUrl) &&
        Objects.equals(this.listId, signupForm1.listId) &&
        Objects.equals(this._links, signupForm1._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, contents, styles, signupFormUrl, listId, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignupForm1 {\n");
    
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    styles: ").append(toIndentedString(styles)).append("\n");
    sb.append("    signupFormUrl: ").append(toIndentedString(signupFormUrl)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
