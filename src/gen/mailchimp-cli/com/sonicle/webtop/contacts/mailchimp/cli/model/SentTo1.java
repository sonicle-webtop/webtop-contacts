/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.joda.time.DateTime;
/**
 * A subscriber&#x27;s status for a specific campaign.
 */
@Schema(description = "A subscriber's status for a specific campaign.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class SentTo1 {
  @JsonProperty("email_id")
  private String emailId = null;

  @JsonProperty("email_address")
  private String emailAddress = null;

  @JsonProperty("merge_fields")
  private Map<String, Object> mergeFields = null;

  @JsonProperty("vip")
  private Boolean vip = null;

  @JsonProperty("status")
  private String status = null;

  @JsonProperty("open_count")
  private Integer openCount = null;

  @JsonProperty("last_open")
  private DateTime lastOpen = null;

  @JsonProperty("absplit_group")
  private String absplitGroup = null;

  @JsonProperty("gmt_offset")
  private Integer gmtOffset = null;

  @JsonProperty("campaign_id")
  private String campaignId = null;

  @JsonProperty("list_id")
  private String listId = null;

  @JsonProperty("list_is_active")
  private Boolean listIsActive = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * The MD5 hash of the lowercase version of the list member&#x27;s email address.
   * @return emailId
  **/
  @Schema(description = "The MD5 hash of the lowercase version of the list member's email address.")
  public String getEmailId() {
    return emailId;
  }

   /**
   * Email address for a subscriber.
   * @return emailAddress
  **/
  @Schema(description = "Email address for a subscriber.")
  public String getEmailAddress() {
    return emailAddress;
  }

  public SentTo1 mergeFields(Map<String, Object> mergeFields) {
    this.mergeFields = mergeFields;
    return this;
  }

  public SentTo1 putMergeFieldsItem(String key, Object mergeFieldsItem) {
    if (this.mergeFields == null) {
      this.mergeFields = new HashMap<>();
    }
    this.mergeFields.put(key, mergeFieldsItem);
    return this;
  }

   /**
   * A dictionary of merge fields ([audience fields](https://mailchimp.com/help/getting-started-with-merge-tags/)) where the keys are the merge tags. For example, {\&quot;FNAME\&quot;:\&quot;Freddie\&quot;}
   * @return mergeFields
  **/
  @Schema(description = "A dictionary of merge fields ([audience fields](https://mailchimp.com/help/getting-started-with-merge-tags/)) where the keys are the merge tags. For example, {\"FNAME\":\"Freddie\"}")
  public Map<String, Object> getMergeFields() {
    return mergeFields;
  }

  public void setMergeFields(Map<String, Object> mergeFields) {
    this.mergeFields = mergeFields;
  }

   /**
   * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
   * @return vip
  **/
  @Schema(description = "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.")
  public Boolean isVip() {
    return vip;
  }

  public SentTo1 status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the member (&#x27;sent&#x27;, &#x27;hard&#x27; for hard bounce, or &#x27;soft&#x27; for soft bounce).
   * @return status
  **/
  @Schema(description = "The status of the member ('sent', 'hard' for hard bounce, or 'soft' for soft bounce).")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public SentTo1 openCount(Integer openCount) {
    this.openCount = openCount;
    return this;
  }

   /**
   * The number of times a campaign was opened by this member.
   * @return openCount
  **/
  @Schema(description = "The number of times a campaign was opened by this member.")
  public Integer getOpenCount() {
    return openCount;
  }

  public void setOpenCount(Integer openCount) {
    this.openCount = openCount;
  }

  public SentTo1 lastOpen(DateTime lastOpen) {
    this.lastOpen = lastOpen;
    return this;
  }

   /**
   * The date and time of the last open for this member in ISO 8601 format.
   * @return lastOpen
  **/
  @Schema(description = "The date and time of the last open for this member in ISO 8601 format.")
  public DateTime getLastOpen() {
    return lastOpen;
  }

  public void setLastOpen(DateTime lastOpen) {
    this.lastOpen = lastOpen;
  }

  public SentTo1 absplitGroup(String absplitGroup) {
    this.absplitGroup = absplitGroup;
    return this;
  }

   /**
   * For A/B Split Campaigns, the group the member was apart of (&#x27;a&#x27;, &#x27;b&#x27;, or &#x27;winner&#x27;).
   * @return absplitGroup
  **/
  @Schema(description = "For A/B Split Campaigns, the group the member was apart of ('a', 'b', or 'winner').")
  public String getAbsplitGroup() {
    return absplitGroup;
  }

  public void setAbsplitGroup(String absplitGroup) {
    this.absplitGroup = absplitGroup;
  }

  public SentTo1 gmtOffset(Integer gmtOffset) {
    this.gmtOffset = gmtOffset;
    return this;
  }

   /**
   * For campaigns sent with timewarp, the time zone group the member is apart of.
   * @return gmtOffset
  **/
  @Schema(description = "For campaigns sent with timewarp, the time zone group the member is apart of.")
  public Integer getGmtOffset() {
    return gmtOffset;
  }

  public void setGmtOffset(Integer gmtOffset) {
    this.gmtOffset = gmtOffset;
  }

   /**
   * The campaign id.
   * @return campaignId
  **/
  @Schema(description = "The campaign id.")
  public String getCampaignId() {
    return campaignId;
  }

   /**
   * The unique list id.
   * @return listId
  **/
  @Schema(description = "The unique list id.")
  public String getListId() {
    return listId;
  }

   /**
   * The status of the list used, namely if it&#x27;s deleted or disabled.
   * @return listIsActive
  **/
  @Schema(description = "The status of the list used, namely if it's deleted or disabled.")
  public Boolean isListIsActive() {
    return listIsActive;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentTo1 sentTo1 = (SentTo1) o;
    return Objects.equals(this.emailId, sentTo1.emailId) &&
        Objects.equals(this.emailAddress, sentTo1.emailAddress) &&
        Objects.equals(this.mergeFields, sentTo1.mergeFields) &&
        Objects.equals(this.vip, sentTo1.vip) &&
        Objects.equals(this.status, sentTo1.status) &&
        Objects.equals(this.openCount, sentTo1.openCount) &&
        Objects.equals(this.lastOpen, sentTo1.lastOpen) &&
        Objects.equals(this.absplitGroup, sentTo1.absplitGroup) &&
        Objects.equals(this.gmtOffset, sentTo1.gmtOffset) &&
        Objects.equals(this.campaignId, sentTo1.campaignId) &&
        Objects.equals(this.listId, sentTo1.listId) &&
        Objects.equals(this.listIsActive, sentTo1.listIsActive) &&
        Objects.equals(this._links, sentTo1._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailId, emailAddress, mergeFields, vip, status, openCount, lastOpen, absplitGroup, gmtOffset, campaignId, listId, listIsActive, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentTo1 {\n");
    
    sb.append("    emailId: ").append(toIndentedString(emailId)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    mergeFields: ").append(toIndentedString(mergeFields)).append("\n");
    sb.append("    vip: ").append(toIndentedString(vip)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    openCount: ").append(toIndentedString(openCount)).append("\n");
    sb.append("    lastOpen: ").append(toIndentedString(lastOpen)).append("\n");
    sb.append("    absplitGroup: ").append(toIndentedString(absplitGroup)).append("\n");
    sb.append("    gmtOffset: ").append(toIndentedString(gmtOffset)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    listIsActive: ").append(toIndentedString(listIsActive)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
