/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * The shipping address for the order.
 */
@Schema(description = "The shipping address for the order.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class ShippingAddress {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("address1")
  private String address1 = null;

  @JsonProperty("address2")
  private String address2 = null;

  @JsonProperty("city")
  private String city = null;

  @JsonProperty("province")
  private String province = null;

  @JsonProperty("province_code")
  private String provinceCode = null;

  @JsonProperty("postal_code")
  private String postalCode = null;

  @JsonProperty("country")
  private String country = null;

  @JsonProperty("country_code")
  private String countryCode = null;

  @JsonProperty("longitude")
  private BigDecimal longitude = null;

  @JsonProperty("latitude")
  private BigDecimal latitude = null;

  @JsonProperty("phone")
  private String phone = null;

  @JsonProperty("company")
  private String company = null;

  public ShippingAddress name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name associated with an order&#x27;s shipping address.
   * @return name
  **/
  @Schema(example = "Freddie Chimpenheimer", description = "The name associated with an order's shipping address.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ShippingAddress address1(String address1) {
    this.address1 = address1;
    return this;
  }

   /**
   * The shipping address for the order.
   * @return address1
  **/
  @Schema(example = "675 Ponce de Leon Ave NE", description = "The shipping address for the order.")
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }

  public ShippingAddress address2(String address2) {
    this.address2 = address2;
    return this;
  }

   /**
   * An additional field for the shipping address.
   * @return address2
  **/
  @Schema(example = "Suite 5000", description = "An additional field for the shipping address.")
  public String getAddress2() {
    return address2;
  }

  public void setAddress2(String address2) {
    this.address2 = address2;
  }

  public ShippingAddress city(String city) {
    this.city = city;
    return this;
  }

   /**
   * The city in the order&#x27;s shipping address.
   * @return city
  **/
  @Schema(example = "Atlanta", description = "The city in the order's shipping address.")
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public ShippingAddress province(String province) {
    this.province = province;
    return this;
  }

   /**
   * The state or normalized province in the order&#x27;s shipping address.
   * @return province
  **/
  @Schema(example = "Georgia", description = "The state or normalized province in the order's shipping address.")
  public String getProvince() {
    return province;
  }

  public void setProvince(String province) {
    this.province = province;
  }

  public ShippingAddress provinceCode(String provinceCode) {
    this.provinceCode = provinceCode;
    return this;
  }

   /**
   * The two-letter code for the province or state in the shipping address.
   * @return provinceCode
  **/
  @Schema(example = "GA", description = "The two-letter code for the province or state in the shipping address.")
  public String getProvinceCode() {
    return provinceCode;
  }

  public void setProvinceCode(String provinceCode) {
    this.provinceCode = provinceCode;
  }

  public ShippingAddress postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

   /**
   * The postal or zip code in the shipping address.
   * @return postalCode
  **/
  @Schema(example = "30308", description = "The postal or zip code in the shipping address.")
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }

  public ShippingAddress country(String country) {
    this.country = country;
    return this;
  }

   /**
   * The country in the shipping address.
   * @return country
  **/
  @Schema(example = "United States", description = "The country in the shipping address.")
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public ShippingAddress countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The two-letter code for the country in the shipping address.
   * @return countryCode
  **/
  @Schema(example = "US", description = "The two-letter code for the country in the shipping address.")
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }

  public ShippingAddress longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

   /**
   * The longitude for the shipping address location.
   * @return longitude
  **/
  @Schema(example = "-75.68903", description = "The longitude for the shipping address location.")
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }

  public ShippingAddress latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

   /**
   * The latitude for the shipping address location.
   * @return latitude
  **/
  @Schema(example = "45.427408", description = "The latitude for the shipping address location.")
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }

  public ShippingAddress phone(String phone) {
    this.phone = phone;
    return this;
  }

   /**
   * The phone number for the order&#x27;s shipping address.
   * @return phone
  **/
  @Schema(example = "8675309", description = "The phone number for the order's shipping address.")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public ShippingAddress company(String company) {
    this.company = company;
    return this;
  }

   /**
   * The company associated with the shipping address.
   * @return company
  **/
  @Schema(description = "The company associated with the shipping address.")
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingAddress shippingAddress = (ShippingAddress) o;
    return Objects.equals(this.name, shippingAddress.name) &&
        Objects.equals(this.address1, shippingAddress.address1) &&
        Objects.equals(this.address2, shippingAddress.address2) &&
        Objects.equals(this.city, shippingAddress.city) &&
        Objects.equals(this.province, shippingAddress.province) &&
        Objects.equals(this.provinceCode, shippingAddress.provinceCode) &&
        Objects.equals(this.postalCode, shippingAddress.postalCode) &&
        Objects.equals(this.country, shippingAddress.country) &&
        Objects.equals(this.countryCode, shippingAddress.countryCode) &&
        Objects.equals(this.longitude, shippingAddress.longitude) &&
        Objects.equals(this.latitude, shippingAddress.latitude) &&
        Objects.equals(this.phone, shippingAddress.phone) &&
        Objects.equals(this.company, shippingAddress.company);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, address1, address2, city, province, provinceCode, postalCode, country, countryCode, longitude, latitude, phone, company);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingAddress {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    province: ").append(toIndentedString(province)).append("\n");
    sb.append("    provinceCode: ").append(toIndentedString(provinceCode)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
