/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.EcommerceCartLineItem1;
import com.sonicle.webtop.contacts.mailchimp.cli.model.EcommerceCustomer1;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
/**
 * Information about a specific cart.
 */
@Schema(description = "Information about a specific cart.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class EcommerceCart2 {
  @JsonProperty("customer")
  private EcommerceCustomer1 customer = null;

  @JsonProperty("campaign_id")
  private String campaignId = null;

  @JsonProperty("checkout_url")
  private String checkoutUrl = null;

  @JsonProperty("currency_code")
  private String currencyCode = null;

  @JsonProperty("order_total")
  private BigDecimal orderTotal = null;

  @JsonProperty("tax_total")
  private BigDecimal taxTotal = null;

  @JsonProperty("lines")
  private List<EcommerceCartLineItem1> lines = null;

  public EcommerceCart2 customer(EcommerceCustomer1 customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @Schema(description = "")
  public EcommerceCustomer1 getCustomer() {
    return customer;
  }

  public void setCustomer(EcommerceCustomer1 customer) {
    this.customer = customer;
  }

  public EcommerceCart2 campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

   /**
   * A string that uniquely identifies the campaign associated with a cart.
   * @return campaignId
  **/
  @Schema(example = "839488a60b", description = "A string that uniquely identifies the campaign associated with a cart.")
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }

  public EcommerceCart2 checkoutUrl(String checkoutUrl) {
    this.checkoutUrl = checkoutUrl;
    return this;
  }

   /**
   * The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations.
   * @return checkoutUrl
  **/
  @Schema(description = "The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations.")
  public String getCheckoutUrl() {
    return checkoutUrl;
  }

  public void setCheckoutUrl(String checkoutUrl) {
    this.checkoutUrl = checkoutUrl;
  }

  public EcommerceCart2 currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The three-letter ISO 4217 code for the currency that the cart uses.
   * @return currencyCode
  **/
  @Schema(description = "The three-letter ISO 4217 code for the currency that the cart uses.")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public EcommerceCart2 orderTotal(BigDecimal orderTotal) {
    this.orderTotal = orderTotal;
    return this;
  }

   /**
   * The order total for the cart.
   * @return orderTotal
  **/
  @Schema(description = "The order total for the cart.")
  public BigDecimal getOrderTotal() {
    return orderTotal;
  }

  public void setOrderTotal(BigDecimal orderTotal) {
    this.orderTotal = orderTotal;
  }

  public EcommerceCart2 taxTotal(BigDecimal taxTotal) {
    this.taxTotal = taxTotal;
    return this;
  }

   /**
   * The total tax for the cart.
   * @return taxTotal
  **/
  @Schema(description = "The total tax for the cart.")
  public BigDecimal getTaxTotal() {
    return taxTotal;
  }

  public void setTaxTotal(BigDecimal taxTotal) {
    this.taxTotal = taxTotal;
  }

  public EcommerceCart2 lines(List<EcommerceCartLineItem1> lines) {
    this.lines = lines;
    return this;
  }

  public EcommerceCart2 addLinesItem(EcommerceCartLineItem1 linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<>();
    }
    this.lines.add(linesItem);
    return this;
  }

   /**
   * An array of the cart&#x27;s line items.
   * @return lines
  **/
  @Schema(description = "An array of the cart's line items.")
  public List<EcommerceCartLineItem1> getLines() {
    return lines;
  }

  public void setLines(List<EcommerceCartLineItem1> lines) {
    this.lines = lines;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcommerceCart2 ecommerceCart2 = (EcommerceCart2) o;
    return Objects.equals(this.customer, ecommerceCart2.customer) &&
        Objects.equals(this.campaignId, ecommerceCart2.campaignId) &&
        Objects.equals(this.checkoutUrl, ecommerceCart2.checkoutUrl) &&
        Objects.equals(this.currencyCode, ecommerceCart2.currencyCode) &&
        Objects.equals(this.orderTotal, ecommerceCart2.orderTotal) &&
        Objects.equals(this.taxTotal, ecommerceCart2.taxTotal) &&
        Objects.equals(this.lines, ecommerceCart2.lines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customer, campaignId, checkoutUrl, currencyCode, orderTotal, taxTotal, lines);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcommerceCart2 {\n");
    
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    checkoutUrl: ").append(toIndentedString(checkoutUrl)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    orderTotal: ").append(toIndentedString(orderTotal)).append("\n");
    sb.append("    taxTotal: ").append(toIndentedString(taxTotal)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
