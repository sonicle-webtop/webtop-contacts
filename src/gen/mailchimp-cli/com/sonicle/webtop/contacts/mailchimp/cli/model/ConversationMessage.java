/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * An individual message in a conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account.
 */
@Schema(description = "An individual message in a conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class ConversationMessage {
  @JsonProperty("from_email")
  private String fromEmail = null;

  @JsonProperty("subject")
  private String subject = null;

  @JsonProperty("message")
  private String message = null;

  @JsonProperty("read")
  private Boolean read = null;

  public ConversationMessage fromEmail(String fromEmail) {
    this.fromEmail = fromEmail;
    return this;
  }

   /**
   * A label representing the email of the sender of this message
   * @return fromEmail
  **/
  @Schema(required = true, description = "A label representing the email of the sender of this message")
  public String getFromEmail() {
    return fromEmail;
  }

  public void setFromEmail(String fromEmail) {
    this.fromEmail = fromEmail;
  }

  public ConversationMessage subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The subject of this message
   * @return subject
  **/
  @Schema(description = "The subject of this message")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public ConversationMessage message(String message) {
    this.message = message;
    return this;
  }

   /**
   * The plain-text content of the message
   * @return message
  **/
  @Schema(description = "The plain-text content of the message")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public ConversationMessage read(Boolean read) {
    this.read = read;
    return this;
  }

   /**
   * Whether this message has been marked as read
   * @return read
  **/
  @Schema(required = true, description = "Whether this message has been marked as read")
  public Boolean isRead() {
    return read;
  }

  public void setRead(Boolean read) {
    this.read = read;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationMessage conversationMessage = (ConversationMessage) o;
    return Objects.equals(this.fromEmail, conversationMessage.fromEmail) &&
        Objects.equals(this.subject, conversationMessage.subject) &&
        Objects.equals(this.message, conversationMessage.message) &&
        Objects.equals(this.read, conversationMessage.read);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromEmail, subject, message, read);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationMessage {\n");
    
    sb.append("    fromEmail: ").append(toIndentedString(fromEmail)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
