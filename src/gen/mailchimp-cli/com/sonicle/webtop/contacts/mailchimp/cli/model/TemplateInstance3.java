/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * Information about a specific template.
 */
@Schema(description = "Information about a specific template.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class TemplateInstance3 {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("drag_and_drop")
  private Boolean dragAndDrop = null;

  @JsonProperty("responsive")
  private Boolean responsive = null;

  @JsonProperty("category")
  private String category = null;

  @JsonProperty("date_created")
  private DateTime dateCreated = null;

  @JsonProperty("date_edited")
  private DateTime dateEdited = null;

  @JsonProperty("created_by")
  private String createdBy = null;

  @JsonProperty("edited_by")
  private String editedBy = null;

  @JsonProperty("active")
  private Boolean active = null;

  @JsonProperty("folder_id")
  private String folderId = null;

  @JsonProperty("thumbnail")
  private String thumbnail = null;

  @JsonProperty("share_url")
  private String shareUrl = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * The individual id for the template.
   * @return id
  **/
  @Schema(description = "The individual id for the template.")
  public Integer getId() {
    return id;
  }

   /**
   * The type of template (user, base, or gallery).
   * @return type
  **/
  @Schema(description = "The type of template (user, base, or gallery).")
  public String getType() {
    return type;
  }

  public TemplateInstance3 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the template.
   * @return name
  **/
  @Schema(description = "The name of the template.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * Whether the template uses the drag and drop editor.
   * @return dragAndDrop
  **/
  @Schema(description = "Whether the template uses the drag and drop editor.")
  public Boolean isDragAndDrop() {
    return dragAndDrop;
  }

   /**
   * Whether the template contains media queries to make it responsive.
   * @return responsive
  **/
  @Schema(description = "Whether the template contains media queries to make it responsive.")
  public Boolean isResponsive() {
    return responsive;
  }

   /**
   * If available, the category the template is listed in.
   * @return category
  **/
  @Schema(description = "If available, the category the template is listed in.")
  public String getCategory() {
    return category;
  }

   /**
   * The date and time the template was created in ISO 8601 format.
   * @return dateCreated
  **/
  @Schema(description = "The date and time the template was created in ISO 8601 format.")
  public DateTime getDateCreated() {
    return dateCreated;
  }

   /**
   * The date and time the template was edited in ISO 8601 format.
   * @return dateEdited
  **/
  @Schema(description = "The date and time the template was edited in ISO 8601 format.")
  public DateTime getDateEdited() {
    return dateEdited;
  }

   /**
   * The login name for template&#x27;s creator.
   * @return createdBy
  **/
  @Schema(description = "The login name for template's creator.")
  public String getCreatedBy() {
    return createdBy;
  }

   /**
   * The login name who last edited the template.
   * @return editedBy
  **/
  @Schema(description = "The login name who last edited the template.")
  public String getEditedBy() {
    return editedBy;
  }

   /**
   * User templates are not &#x27;deleted,&#x27; but rather marked as &#x27;inactive.&#x27; Returns whether the template is still active.
   * @return active
  **/
  @Schema(description = "User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active.")
  public Boolean isActive() {
    return active;
  }

  public TemplateInstance3 folderId(String folderId) {
    this.folderId = folderId;
    return this;
  }

   /**
   * The id of the folder the template is currently in.
   * @return folderId
  **/
  @Schema(description = "The id of the folder the template is currently in.")
  public String getFolderId() {
    return folderId;
  }

  public void setFolderId(String folderId) {
    this.folderId = folderId;
  }

   /**
   * If available, the URL for a thumbnail of the template.
   * @return thumbnail
  **/
  @Schema(description = "If available, the URL for a thumbnail of the template.")
  public String getThumbnail() {
    return thumbnail;
  }

   /**
   * The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).
   * @return shareUrl
  **/
  @Schema(description = "The URL used for [template sharing](https://mailchimp.com/help/share-a-template/).")
  public String getShareUrl() {
    return shareUrl;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateInstance3 templateInstance3 = (TemplateInstance3) o;
    return Objects.equals(this.id, templateInstance3.id) &&
        Objects.equals(this.type, templateInstance3.type) &&
        Objects.equals(this.name, templateInstance3.name) &&
        Objects.equals(this.dragAndDrop, templateInstance3.dragAndDrop) &&
        Objects.equals(this.responsive, templateInstance3.responsive) &&
        Objects.equals(this.category, templateInstance3.category) &&
        Objects.equals(this.dateCreated, templateInstance3.dateCreated) &&
        Objects.equals(this.dateEdited, templateInstance3.dateEdited) &&
        Objects.equals(this.createdBy, templateInstance3.createdBy) &&
        Objects.equals(this.editedBy, templateInstance3.editedBy) &&
        Objects.equals(this.active, templateInstance3.active) &&
        Objects.equals(this.folderId, templateInstance3.folderId) &&
        Objects.equals(this.thumbnail, templateInstance3.thumbnail) &&
        Objects.equals(this.shareUrl, templateInstance3.shareUrl) &&
        Objects.equals(this._links, templateInstance3._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, name, dragAndDrop, responsive, category, dateCreated, dateEdited, createdBy, editedBy, active, folderId, thumbnail, shareUrl, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateInstance3 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dragAndDrop: ").append(toIndentedString(dragAndDrop)).append("\n");
    sb.append("    responsive: ").append(toIndentedString(responsive)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateEdited: ").append(toIndentedString(dateEdited)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    editedBy: ").append(toIndentedString(editedBy)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    shareUrl: ").append(toIndentedString(shareUrl)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
