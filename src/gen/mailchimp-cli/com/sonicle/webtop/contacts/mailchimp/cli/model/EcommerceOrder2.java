/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.BillingAddress1;
import com.sonicle.webtop.contacts.mailchimp.cli.model.EcommerceCustomer5;
import com.sonicle.webtop.contacts.mailchimp.cli.model.EcommerceOrderLineItem1;
import com.sonicle.webtop.contacts.mailchimp.cli.model.EcommercestoresstoreIdordersPromos;
import com.sonicle.webtop.contacts.mailchimp.cli.model.Outreach;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ShippingAddress1;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * Information about a specific order.
 */
@Schema(description = "Information about a specific order.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class EcommerceOrder2 {
  @JsonProperty("customer")
  private EcommerceCustomer5 customer = null;

  @JsonProperty("campaign_id")
  private String campaignId = null;

  @JsonProperty("landing_site")
  private String landingSite = null;

  @JsonProperty("financial_status")
  private String financialStatus = null;

  @JsonProperty("fulfillment_status")
  private String fulfillmentStatus = null;

  @JsonProperty("currency_code")
  private String currencyCode = null;

  @JsonProperty("order_total")
  private BigDecimal orderTotal = null;

  @JsonProperty("order_url")
  private String orderUrl = null;

  @JsonProperty("discount_total")
  private BigDecimal discountTotal = null;

  @JsonProperty("tax_total")
  private BigDecimal taxTotal = null;

  @JsonProperty("shipping_total")
  private BigDecimal shippingTotal = null;

  /**
   * The Mailchimp tracking code for the order. Uses the &#x27;mc_tc&#x27; parameter in E-Commerce tracking URLs.
   */
  public enum TrackingCodeEnum {
    PREC("prec");

    private String value;

    TrackingCodeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TrackingCodeEnum fromValue(String text) {
      for (TrackingCodeEnum b : TrackingCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("tracking_code")
  private TrackingCodeEnum trackingCode = null;

  @JsonProperty("processed_at_foreign")
  private DateTime processedAtForeign = null;

  @JsonProperty("cancelled_at_foreign")
  private DateTime cancelledAtForeign = null;

  @JsonProperty("updated_at_foreign")
  private DateTime updatedAtForeign = null;

  @JsonProperty("shipping_address")
  private ShippingAddress1 shippingAddress = null;

  @JsonProperty("billing_address")
  private BillingAddress1 billingAddress = null;

  @JsonProperty("promos")
  private List<EcommercestoresstoreIdordersPromos> promos = null;

  @JsonProperty("lines")
  private List<EcommerceOrderLineItem1> lines = null;

  @JsonProperty("outreach")
  private Outreach outreach = null;

  public EcommerceOrder2 customer(EcommerceCustomer5 customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @Schema(description = "")
  public EcommerceCustomer5 getCustomer() {
    return customer;
  }

  public void setCustomer(EcommerceCustomer5 customer) {
    this.customer = customer;
  }

  public EcommerceOrder2 campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

   /**
   * A string that uniquely identifies the campaign associated with an order.
   * @return campaignId
  **/
  @Schema(example = "839488a60b", description = "A string that uniquely identifies the campaign associated with an order.")
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }

  public EcommerceOrder2 landingSite(String landingSite) {
    this.landingSite = landingSite;
    return this;
  }

   /**
   * The URL for the page where the buyer landed when entering the shop.
   * @return landingSite
  **/
  @Schema(example = "http://www.example.com?source=abc", description = "The URL for the page where the buyer landed when entering the shop.")
  public String getLandingSite() {
    return landingSite;
  }

  public void setLandingSite(String landingSite) {
    this.landingSite = landingSite;
  }

  public EcommerceOrder2 financialStatus(String financialStatus) {
    this.financialStatus = financialStatus;
    return this;
  }

   /**
   * The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
   * @return financialStatus
  **/
  @Schema(description = "The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).")
  public String getFinancialStatus() {
    return financialStatus;
  }

  public void setFinancialStatus(String financialStatus) {
    this.financialStatus = financialStatus;
  }

  public EcommerceOrder2 fulfillmentStatus(String fulfillmentStatus) {
    this.fulfillmentStatus = fulfillmentStatus;
    return this;
  }

   /**
   * The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).
   * @return fulfillmentStatus
  **/
  @Schema(description = "The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications).")
  public String getFulfillmentStatus() {
    return fulfillmentStatus;
  }

  public void setFulfillmentStatus(String fulfillmentStatus) {
    this.fulfillmentStatus = fulfillmentStatus;
  }

  public EcommerceOrder2 currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The three-letter ISO 4217 code for the currency that the store accepts.
   * @return currencyCode
  **/
  @Schema(description = "The three-letter ISO 4217 code for the currency that the store accepts.")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public EcommerceOrder2 orderTotal(BigDecimal orderTotal) {
    this.orderTotal = orderTotal;
    return this;
  }

   /**
   * The order total associated with an order.
   * @return orderTotal
  **/
  @Schema(description = "The order total associated with an order.")
  public BigDecimal getOrderTotal() {
    return orderTotal;
  }

  public void setOrderTotal(BigDecimal orderTotal) {
    this.orderTotal = orderTotal;
  }

  public EcommerceOrder2 orderUrl(String orderUrl) {
    this.orderUrl = orderUrl;
    return this;
  }

   /**
   * The URL for the order.
   * @return orderUrl
  **/
  @Schema(description = "The URL for the order.")
  public String getOrderUrl() {
    return orderUrl;
  }

  public void setOrderUrl(String orderUrl) {
    this.orderUrl = orderUrl;
  }

  public EcommerceOrder2 discountTotal(BigDecimal discountTotal) {
    this.discountTotal = discountTotal;
    return this;
  }

   /**
   * The total amount of the discounts to be applied to the price of the order.
   * @return discountTotal
  **/
  @Schema(description = "The total amount of the discounts to be applied to the price of the order.")
  public BigDecimal getDiscountTotal() {
    return discountTotal;
  }

  public void setDiscountTotal(BigDecimal discountTotal) {
    this.discountTotal = discountTotal;
  }

  public EcommerceOrder2 taxTotal(BigDecimal taxTotal) {
    this.taxTotal = taxTotal;
    return this;
  }

   /**
   * The tax total associated with an order.
   * @return taxTotal
  **/
  @Schema(description = "The tax total associated with an order.")
  public BigDecimal getTaxTotal() {
    return taxTotal;
  }

  public void setTaxTotal(BigDecimal taxTotal) {
    this.taxTotal = taxTotal;
  }

  public EcommerceOrder2 shippingTotal(BigDecimal shippingTotal) {
    this.shippingTotal = shippingTotal;
    return this;
  }

   /**
   * The shipping total for the order.
   * @return shippingTotal
  **/
  @Schema(description = "The shipping total for the order.")
  public BigDecimal getShippingTotal() {
    return shippingTotal;
  }

  public void setShippingTotal(BigDecimal shippingTotal) {
    this.shippingTotal = shippingTotal;
  }

  public EcommerceOrder2 trackingCode(TrackingCodeEnum trackingCode) {
    this.trackingCode = trackingCode;
    return this;
  }

   /**
   * The Mailchimp tracking code for the order. Uses the &#x27;mc_tc&#x27; parameter in E-Commerce tracking URLs.
   * @return trackingCode
  **/
  @Schema(description = "The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs.")
  public TrackingCodeEnum getTrackingCode() {
    return trackingCode;
  }

  public void setTrackingCode(TrackingCodeEnum trackingCode) {
    this.trackingCode = trackingCode;
  }

  public EcommerceOrder2 processedAtForeign(DateTime processedAtForeign) {
    this.processedAtForeign = processedAtForeign;
    return this;
  }

   /**
   * The date and time the order was processed in ISO 8601 format.
   * @return processedAtForeign
  **/
  @Schema(example = "2015-07-15T19:28Z", description = "The date and time the order was processed in ISO 8601 format.")
  public DateTime getProcessedAtForeign() {
    return processedAtForeign;
  }

  public void setProcessedAtForeign(DateTime processedAtForeign) {
    this.processedAtForeign = processedAtForeign;
  }

  public EcommerceOrder2 cancelledAtForeign(DateTime cancelledAtForeign) {
    this.cancelledAtForeign = cancelledAtForeign;
    return this;
  }

   /**
   * The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being edited.
   * @return cancelledAtForeign
  **/
  @Schema(example = "2015-07-15T19:28Z", description = "The date and time the order was cancelled in ISO 8601 format. Note: passing a value for this parameter will cancel the order being edited.")
  public DateTime getCancelledAtForeign() {
    return cancelledAtForeign;
  }

  public void setCancelledAtForeign(DateTime cancelledAtForeign) {
    this.cancelledAtForeign = cancelledAtForeign;
  }

  public EcommerceOrder2 updatedAtForeign(DateTime updatedAtForeign) {
    this.updatedAtForeign = updatedAtForeign;
    return this;
  }

   /**
   * The date and time the order was updated in ISO 8601 format.
   * @return updatedAtForeign
  **/
  @Schema(example = "2015-07-15T19:28Z", description = "The date and time the order was updated in ISO 8601 format.")
  public DateTime getUpdatedAtForeign() {
    return updatedAtForeign;
  }

  public void setUpdatedAtForeign(DateTime updatedAtForeign) {
    this.updatedAtForeign = updatedAtForeign;
  }

  public EcommerceOrder2 shippingAddress(ShippingAddress1 shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @Schema(description = "")
  public ShippingAddress1 getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(ShippingAddress1 shippingAddress) {
    this.shippingAddress = shippingAddress;
  }

  public EcommerceOrder2 billingAddress(BillingAddress1 billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @Schema(description = "")
  public BillingAddress1 getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(BillingAddress1 billingAddress) {
    this.billingAddress = billingAddress;
  }

  public EcommerceOrder2 promos(List<EcommercestoresstoreIdordersPromos> promos) {
    this.promos = promos;
    return this;
  }

  public EcommerceOrder2 addPromosItem(EcommercestoresstoreIdordersPromos promosItem) {
    if (this.promos == null) {
      this.promos = new ArrayList<>();
    }
    this.promos.add(promosItem);
    return this;
  }

   /**
   * The promo codes applied on the order. Note: Patch will completely replace the value of promos with the new one provided.
   * @return promos
  **/
  @Schema(description = "The promo codes applied on the order. Note: Patch will completely replace the value of promos with the new one provided.")
  public List<EcommercestoresstoreIdordersPromos> getPromos() {
    return promos;
  }

  public void setPromos(List<EcommercestoresstoreIdordersPromos> promos) {
    this.promos = promos;
  }

  public EcommerceOrder2 lines(List<EcommerceOrderLineItem1> lines) {
    this.lines = lines;
    return this;
  }

  public EcommerceOrder2 addLinesItem(EcommerceOrderLineItem1 linesItem) {
    if (this.lines == null) {
      this.lines = new ArrayList<>();
    }
    this.lines.add(linesItem);
    return this;
  }

   /**
   * An array of the order&#x27;s line items.
   * @return lines
  **/
  @Schema(description = "An array of the order's line items.")
  public List<EcommerceOrderLineItem1> getLines() {
    return lines;
  }

  public void setLines(List<EcommerceOrderLineItem1> lines) {
    this.lines = lines;
  }

  public EcommerceOrder2 outreach(Outreach outreach) {
    this.outreach = outreach;
    return this;
  }

   /**
   * Get outreach
   * @return outreach
  **/
  @Schema(description = "")
  public Outreach getOutreach() {
    return outreach;
  }

  public void setOutreach(Outreach outreach) {
    this.outreach = outreach;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcommerceOrder2 ecommerceOrder2 = (EcommerceOrder2) o;
    return Objects.equals(this.customer, ecommerceOrder2.customer) &&
        Objects.equals(this.campaignId, ecommerceOrder2.campaignId) &&
        Objects.equals(this.landingSite, ecommerceOrder2.landingSite) &&
        Objects.equals(this.financialStatus, ecommerceOrder2.financialStatus) &&
        Objects.equals(this.fulfillmentStatus, ecommerceOrder2.fulfillmentStatus) &&
        Objects.equals(this.currencyCode, ecommerceOrder2.currencyCode) &&
        Objects.equals(this.orderTotal, ecommerceOrder2.orderTotal) &&
        Objects.equals(this.orderUrl, ecommerceOrder2.orderUrl) &&
        Objects.equals(this.discountTotal, ecommerceOrder2.discountTotal) &&
        Objects.equals(this.taxTotal, ecommerceOrder2.taxTotal) &&
        Objects.equals(this.shippingTotal, ecommerceOrder2.shippingTotal) &&
        Objects.equals(this.trackingCode, ecommerceOrder2.trackingCode) &&
        Objects.equals(this.processedAtForeign, ecommerceOrder2.processedAtForeign) &&
        Objects.equals(this.cancelledAtForeign, ecommerceOrder2.cancelledAtForeign) &&
        Objects.equals(this.updatedAtForeign, ecommerceOrder2.updatedAtForeign) &&
        Objects.equals(this.shippingAddress, ecommerceOrder2.shippingAddress) &&
        Objects.equals(this.billingAddress, ecommerceOrder2.billingAddress) &&
        Objects.equals(this.promos, ecommerceOrder2.promos) &&
        Objects.equals(this.lines, ecommerceOrder2.lines) &&
        Objects.equals(this.outreach, ecommerceOrder2.outreach);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customer, campaignId, landingSite, financialStatus, fulfillmentStatus, currencyCode, orderTotal, orderUrl, discountTotal, taxTotal, shippingTotal, trackingCode, processedAtForeign, cancelledAtForeign, updatedAtForeign, shippingAddress, billingAddress, promos, lines, outreach);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcommerceOrder2 {\n");
    
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    landingSite: ").append(toIndentedString(landingSite)).append("\n");
    sb.append("    financialStatus: ").append(toIndentedString(financialStatus)).append("\n");
    sb.append("    fulfillmentStatus: ").append(toIndentedString(fulfillmentStatus)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    orderTotal: ").append(toIndentedString(orderTotal)).append("\n");
    sb.append("    orderUrl: ").append(toIndentedString(orderUrl)).append("\n");
    sb.append("    discountTotal: ").append(toIndentedString(discountTotal)).append("\n");
    sb.append("    taxTotal: ").append(toIndentedString(taxTotal)).append("\n");
    sb.append("    shippingTotal: ").append(toIndentedString(shippingTotal)).append("\n");
    sb.append("    trackingCode: ").append(toIndentedString(trackingCode)).append("\n");
    sb.append("    processedAtForeign: ").append(toIndentedString(processedAtForeign)).append("\n");
    sb.append("    cancelledAtForeign: ").append(toIndentedString(cancelledAtForeign)).append("\n");
    sb.append("    updatedAtForeign: ").append(toIndentedString(updatedAtForeign)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    promos: ").append(toIndentedString(promos)).append("\n");
    sb.append("    lines: ").append(toIndentedString(lines)).append("\n");
    sb.append("    outreach: ").append(toIndentedString(outreach)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
