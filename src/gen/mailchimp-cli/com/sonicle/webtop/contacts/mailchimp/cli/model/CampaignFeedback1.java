/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * A specific feedback message from a specific campaign.
 */
@Schema(description = "A specific feedback message from a specific campaign.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class CampaignFeedback1 {
  @JsonProperty("feedback_id")
  private Integer feedbackId = null;

  @JsonProperty("parent_id")
  private Integer parentId = null;

  @JsonProperty("block_id")
  private Integer blockId = null;

  @JsonProperty("message")
  private String message = null;

  @JsonProperty("is_complete")
  private Boolean isComplete = null;

  @JsonProperty("created_by")
  private String createdBy = null;

  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("updated_at")
  private DateTime updatedAt = null;

  /**
   * The source of the feedback.
   */
  public enum SourceEnum {
    API("api"),
    EMAIL("email"),
    SMS("sms"),
    WEB("web"),
    IOS("ios"),
    ANDROID("android");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SourceEnum fromValue(String text) {
      for (SourceEnum b : SourceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("source")
  private SourceEnum source = null;

  @JsonProperty("campaign_id")
  private String campaignId = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * The individual id for the feedback item.
   * @return feedbackId
  **/
  @Schema(description = "The individual id for the feedback item.")
  public Integer getFeedbackId() {
    return feedbackId;
  }

   /**
   * If a reply, the id of the parent feedback item.
   * @return parentId
  **/
  @Schema(description = "If a reply, the id of the parent feedback item.")
  public Integer getParentId() {
    return parentId;
  }

  public CampaignFeedback1 blockId(Integer blockId) {
    this.blockId = blockId;
    return this;
  }

   /**
   * The block id for the editable block that the feedback addresses.
   * @return blockId
  **/
  @Schema(description = "The block id for the editable block that the feedback addresses.")
  public Integer getBlockId() {
    return blockId;
  }

  public void setBlockId(Integer blockId) {
    this.blockId = blockId;
  }

  public CampaignFeedback1 message(String message) {
    this.message = message;
    return this;
  }

   /**
   * The content of the feedback.
   * @return message
  **/
  @Schema(description = "The content of the feedback.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public CampaignFeedback1 isComplete(Boolean isComplete) {
    this.isComplete = isComplete;
    return this;
  }

   /**
   * The status of feedback.
   * @return isComplete
  **/
  @Schema(description = "The status of feedback.")
  public Boolean isIsComplete() {
    return isComplete;
  }

  public void setIsComplete(Boolean isComplete) {
    this.isComplete = isComplete;
  }

   /**
   * The login name of the user who created the feedback.
   * @return createdBy
  **/
  @Schema(description = "The login name of the user who created the feedback.")
  public String getCreatedBy() {
    return createdBy;
  }

   /**
   * The date and time the feedback item was created in ISO 8601 format.
   * @return createdAt
  **/
  @Schema(description = "The date and time the feedback item was created in ISO 8601 format.")
  public DateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * The date and time the feedback was last updated in ISO 8601 format.
   * @return updatedAt
  **/
  @Schema(description = "The date and time the feedback was last updated in ISO 8601 format.")
  public DateTime getUpdatedAt() {
    return updatedAt;
  }

   /**
   * The source of the feedback.
   * @return source
  **/
  @Schema(description = "The source of the feedback.")
  public SourceEnum getSource() {
    return source;
  }

   /**
   * The unique id for the campaign.
   * @return campaignId
  **/
  @Schema(description = "The unique id for the campaign.")
  public String getCampaignId() {
    return campaignId;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignFeedback1 campaignFeedback1 = (CampaignFeedback1) o;
    return Objects.equals(this.feedbackId, campaignFeedback1.feedbackId) &&
        Objects.equals(this.parentId, campaignFeedback1.parentId) &&
        Objects.equals(this.blockId, campaignFeedback1.blockId) &&
        Objects.equals(this.message, campaignFeedback1.message) &&
        Objects.equals(this.isComplete, campaignFeedback1.isComplete) &&
        Objects.equals(this.createdBy, campaignFeedback1.createdBy) &&
        Objects.equals(this.createdAt, campaignFeedback1.createdAt) &&
        Objects.equals(this.updatedAt, campaignFeedback1.updatedAt) &&
        Objects.equals(this.source, campaignFeedback1.source) &&
        Objects.equals(this.campaignId, campaignFeedback1.campaignId) &&
        Objects.equals(this._links, campaignFeedback1._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feedbackId, parentId, blockId, message, isComplete, createdBy, createdAt, updatedAt, source, campaignId, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignFeedback1 {\n");
    
    sb.append("    feedbackId: ").append(toIndentedString(feedbackId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    blockId: ").append(toIndentedString(blockId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    isComplete: ").append(toIndentedString(isComplete)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
