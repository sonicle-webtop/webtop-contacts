/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import com.sonicle.webtop.contacts.mailchimp.cli.model.Script1;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * Information about a specific connected site.
 */
@Schema(description = "Information about a specific connected site.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class ConnectedSite1 {
  @JsonProperty("foreign_id")
  private String foreignId = null;

  @JsonProperty("store_id")
  private String storeId = null;

  @JsonProperty("platform")
  private String platform = null;

  @JsonProperty("domain")
  private String domain = null;

  @JsonProperty("site_script")
  private Script1 siteScript = null;

  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("updated_at")
  private DateTime updatedAt = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * The unique identifier for the site.
   * @return foreignId
  **/
  @Schema(example = "a180c384d7db88b if created in-app, MC001 if created via API", description = "The unique identifier for the site.")
  public String getForeignId() {
    return foreignId;
  }

   /**
   * The unique identifier for the ecommerce store that&#x27;s associated with the connected site (if any). The store_id for a specific connected site can&#x27;t change.
   * @return storeId
  **/
  @Schema(example = "MC001", description = "The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change.")
  public String getStoreId() {
    return storeId;
  }

   /**
   * The platform of the connected site.
   * @return platform
  **/
  @Schema(example = "shopify, magento, bigcommerce, woocommerce", description = "The platform of the connected site.")
  public String getPlatform() {
    return platform;
  }

   /**
   * The connected site domain.
   * @return domain
  **/
  @Schema(example = "example.myshopify.com", description = "The connected site domain.")
  public String getDomain() {
    return domain;
  }

  public ConnectedSite1 siteScript(Script1 siteScript) {
    this.siteScript = siteScript;
    return this;
  }

   /**
   * Get siteScript
   * @return siteScript
  **/
  @Schema(description = "")
  public Script1 getSiteScript() {
    return siteScript;
  }

  public void setSiteScript(Script1 siteScript) {
    this.siteScript = siteScript;
  }

   /**
   * The date and time the connected site was created in ISO 8601 format.
   * @return createdAt
  **/
  @Schema(example = "2015-07-15T19:28Z", description = "The date and time the connected site was created in ISO 8601 format.")
  public DateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * The date and time the connected site was last updated in ISO 8601 format.
   * @return updatedAt
  **/
  @Schema(example = "2015-07-15T19:35Z", description = "The date and time the connected site was last updated in ISO 8601 format.")
  public DateTime getUpdatedAt() {
    return updatedAt;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectedSite1 connectedSite1 = (ConnectedSite1) o;
    return Objects.equals(this.foreignId, connectedSite1.foreignId) &&
        Objects.equals(this.storeId, connectedSite1.storeId) &&
        Objects.equals(this.platform, connectedSite1.platform) &&
        Objects.equals(this.domain, connectedSite1.domain) &&
        Objects.equals(this.siteScript, connectedSite1.siteScript) &&
        Objects.equals(this.createdAt, connectedSite1.createdAt) &&
        Objects.equals(this.updatedAt, connectedSite1.updatedAt) &&
        Objects.equals(this._links, connectedSite1._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(foreignId, storeId, platform, domain, siteScript, createdAt, updatedAt, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectedSite1 {\n");
    
    sb.append("    foreignId: ").append(toIndentedString(foreignId)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    siteScript: ").append(toIndentedString(siteScript)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
