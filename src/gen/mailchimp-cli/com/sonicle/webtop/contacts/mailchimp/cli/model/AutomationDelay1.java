/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The delay settings for an Automation email.
 */
@Schema(description = "The delay settings for an Automation email.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class AutomationDelay1 {
  @JsonProperty("amount")
  private Integer amount = null;

  /**
   * The type of delay for an Automation email.
   */
  public enum TypeEnum {
    NOW("now"),
    DAY("day"),
    HOUR("hour"),
    WEEK("week");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  /**
   * Whether the delay settings describe before or after the delay action of an Automation email.
   */
  public enum DirectionEnum {
    BEFORE("before"),
    AFTER("after");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("direction")
  private DirectionEnum direction = null;

  /**
   * The action that triggers the delay of an Automation email.
   */
  public enum ActionEnum {
    PREVIOUS_CAMPAIGN_SENT("previous_campaign_sent"),
    PREVIOUS_CAMPAIGN_OPENED("previous_campaign_opened"),
    PREVIOUS_CAMPAIGN_NOT_OPENED("previous_campaign_not_opened"),
    PREVIOUS_CAMPAIGN_CLICKED_ANY("previous_campaign_clicked_any"),
    PREVIOUS_CAMPAIGN_NOT_CLICKED_ANY("previous_campaign_not_clicked_any"),
    PREVIOUS_CAMPAIGN_SPECIFIC_CLICKED("previous_campaign_specific_clicked"),
    ECOMM_BOUGHT_ANY("ecomm_bought_any"),
    ECOMM_BOUGHT_PRODUCT("ecomm_bought_product"),
    ECOMM_BOUGHT_CATEGORY("ecomm_bought_category"),
    ECOMM_NOT_BOUGHT_ANY("ecomm_not_bought_any"),
    ECOMM_ABANDONED_CART("ecomm_abandoned_cart"),
    CAMPAIGN_SENT("campaign_sent"),
    OPENED_EMAIL("opened_email"),
    NOT_OPENED_EMAIL("not_opened_email"),
    CLICKED_EMAIL("clicked_email"),
    NOT_CLICKED_EMAIL("not_clicked_email"),
    CAMPAIGN_SPECIFIC_CLICKED("campaign_specific_clicked"),
    MANUAL("manual"),
    SIGNUP("signup"),
    MERGE_CHANGED("merge_changed"),
    GROUP_ADD("group_add"),
    GROUP_REMOVE("group_remove"),
    MANDRILL_SENT("mandrill_sent"),
    MANDRILL_OPENED("mandrill_opened"),
    MANDRILL_CLICKED("mandrill_clicked"),
    MANDRILL_ANY("mandrill_any"),
    API("api"),
    GOAL("goal"),
    ANNUAL("annual"),
    BIRTHDAY("birthday"),
    DATE("date"),
    DATE_ADDED("date_added"),
    TAG_ADD("tag_add");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("action")
  private ActionEnum action = null;

  @JsonProperty("action_description")
  private String actionDescription = null;

  @JsonProperty("full_description")
  private String fullDescription = null;

   /**
   * The delay amount for an Automation email.
   * @return amount
  **/
  @Schema(description = "The delay amount for an Automation email.")
  public Integer getAmount() {
    return amount;
  }

  public AutomationDelay1 type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of delay for an Automation email.
   * @return type
  **/
  @Schema(description = "The type of delay for an Automation email.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public AutomationDelay1 direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Whether the delay settings describe before or after the delay action of an Automation email.
   * @return direction
  **/
  @Schema(description = "Whether the delay settings describe before or after the delay action of an Automation email.")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public AutomationDelay1 action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * The action that triggers the delay of an Automation email.
   * @return action
  **/
  @Schema(description = "The action that triggers the delay of an Automation email.")
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }

   /**
   * The user-friendly description of the action that triggers an Automation email.
   * @return actionDescription
  **/
  @Schema(example = "subscribers purchase anything from your store", description = "The user-friendly description of the action that triggers an Automation email.")
  public String getActionDescription() {
    return actionDescription;
  }

   /**
   * The user-friendly description of the delay and trigger action settings for an Automation email.
   * @return fullDescription
  **/
  @Schema(example = "1 day after subscribers purchase anything from your store", description = "The user-friendly description of the delay and trigger action settings for an Automation email.")
  public String getFullDescription() {
    return fullDescription;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationDelay1 automationDelay1 = (AutomationDelay1) o;
    return Objects.equals(this.amount, automationDelay1.amount) &&
        Objects.equals(this.type, automationDelay1.type) &&
        Objects.equals(this.direction, automationDelay1.direction) &&
        Objects.equals(this.action, automationDelay1.action) &&
        Objects.equals(this.actionDescription, automationDelay1.actionDescription) &&
        Objects.equals(this.fullDescription, automationDelay1.fullDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, type, direction, action, actionDescription, fullDescription);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationDelay1 {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    actionDescription: ").append(toIndentedString(actionDescription)).append("\n");
    sb.append("    fullDescription: ").append(toIndentedString(fullDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
