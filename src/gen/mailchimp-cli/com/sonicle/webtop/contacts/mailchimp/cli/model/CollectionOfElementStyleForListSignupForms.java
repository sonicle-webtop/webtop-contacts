/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.AnOptionForSignupFormStyles;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Collection of Element style for List Signup Forms.
 */
@Schema(description = "Collection of Element style for List Signup Forms.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class CollectionOfElementStyleForListSignupForms {
  /**
   * A string that identifies the element selector.
   */
  public enum SelectorEnum {
    PAGE_BACKGROUND("page_background"),
    PAGE_HEADER("page_header"),
    PAGE_OUTER_WRAPPER("page_outer_wrapper"),
    BODY_BACKGROUND("body_background"),
    BODY_LINK_STYLE("body_link_style"),
    FORMS_BUTTONS("forms_buttons"),
    FORMS_BUTTONS_HOVERED("forms_buttons_hovered"),
    FORMS_FIELD_LABEL("forms_field_label"),
    FORMS_FIELD_TEXT("forms_field_text"),
    FORMS_REQUIRED("forms_required"),
    FORMS_REQUIRED_LEGEND("forms_required_legend"),
    FORMS_HELP_TEXT("forms_help_text"),
    FORMS_ERRORS("forms_errors"),
    MONKEY_REWARDS_BADGE("monkey_rewards_badge");

    private String value;

    SelectorEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SelectorEnum fromValue(String text) {
      for (SelectorEnum b : SelectorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("selector")
  private SelectorEnum selector = null;

  @JsonProperty("options")
  private List<AnOptionForSignupFormStyles> options = null;

  public CollectionOfElementStyleForListSignupForms selector(SelectorEnum selector) {
    this.selector = selector;
    return this;
  }

   /**
   * A string that identifies the element selector.
   * @return selector
  **/
  @Schema(example = "page_background", description = "A string that identifies the element selector.")
  public SelectorEnum getSelector() {
    return selector;
  }

  public void setSelector(SelectorEnum selector) {
    this.selector = selector;
  }

  public CollectionOfElementStyleForListSignupForms options(List<AnOptionForSignupFormStyles> options) {
    this.options = options;
    return this;
  }

  public CollectionOfElementStyleForListSignupForms addOptionsItem(AnOptionForSignupFormStyles optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * A collection of options for a selector.
   * @return options
  **/
  @Schema(description = "A collection of options for a selector.")
  public List<AnOptionForSignupFormStyles> getOptions() {
    return options;
  }

  public void setOptions(List<AnOptionForSignupFormStyles> options) {
    this.options = options;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionOfElementStyleForListSignupForms collectionOfElementStyleForListSignupForms = (CollectionOfElementStyleForListSignupForms) o;
    return Objects.equals(this.selector, collectionOfElementStyleForListSignupForms.selector) &&
        Objects.equals(this.options, collectionOfElementStyleForListSignupForms.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(selector, options);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionOfElementStyleForListSignupForms {\n");
    
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
