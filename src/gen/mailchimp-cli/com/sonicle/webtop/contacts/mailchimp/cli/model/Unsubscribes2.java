/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.joda.time.DateTime;
/**
 * A member who unsubscribed from a specific campaign.
 */
@Schema(description = "A member who unsubscribed from a specific campaign.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class Unsubscribes2 {
  @JsonProperty("email_id")
  private String emailId = null;

  @JsonProperty("email_address")
  private String emailAddress = null;

  @JsonProperty("merge_fields")
  private Map<String, Object> mergeFields = null;

  @JsonProperty("vip")
  private Boolean vip = null;

  @JsonProperty("timestamp")
  private DateTime timestamp = null;

  @JsonProperty("reason")
  private String reason = null;

  @JsonProperty("campaign_id")
  private String campaignId = null;

  @JsonProperty("list_id")
  private String listId = null;

  @JsonProperty("list_is_active")
  private Boolean listIsActive = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * The MD5 hash of the lowercase version of the list member&#x27;s email address.
   * @return emailId
  **/
  @Schema(description = "The MD5 hash of the lowercase version of the list member's email address.")
  public String getEmailId() {
    return emailId;
  }

   /**
   * Email address for a subscriber.
   * @return emailAddress
  **/
  @Schema(description = "Email address for a subscriber.")
  public String getEmailAddress() {
    return emailAddress;
  }

  public Unsubscribes2 mergeFields(Map<String, Object> mergeFields) {
    this.mergeFields = mergeFields;
    return this;
  }

  public Unsubscribes2 putMergeFieldsItem(String key, Object mergeFieldsItem) {
    if (this.mergeFields == null) {
      this.mergeFields = new HashMap<>();
    }
    this.mergeFields.put(key, mergeFieldsItem);
    return this;
  }

   /**
   * A dictionary of merge fields ([audience fields](https://mailchimp.com/help/getting-started-with-merge-tags/)) where the keys are the merge tags. For example, {\&quot;FNAME\&quot;:\&quot;Freddie\&quot;}
   * @return mergeFields
  **/
  @Schema(description = "A dictionary of merge fields ([audience fields](https://mailchimp.com/help/getting-started-with-merge-tags/)) where the keys are the merge tags. For example, {\"FNAME\":\"Freddie\"}")
  public Map<String, Object> getMergeFields() {
    return mergeFields;
  }

  public void setMergeFields(Map<String, Object> mergeFields) {
    this.mergeFields = mergeFields;
  }

   /**
   * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
   * @return vip
  **/
  @Schema(description = "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.")
  public Boolean isVip() {
    return vip;
  }

   /**
   * The date and time the member opted-out in ISO 8601 format.
   * @return timestamp
  **/
  @Schema(description = "The date and time the member opted-out in ISO 8601 format.")
  public DateTime getTimestamp() {
    return timestamp;
  }

   /**
   * If available, the reason listed by the member for unsubscribing.
   * @return reason
  **/
  @Schema(description = "If available, the reason listed by the member for unsubscribing.")
  public String getReason() {
    return reason;
  }

   /**
   * The campaign id.
   * @return campaignId
  **/
  @Schema(description = "The campaign id.")
  public String getCampaignId() {
    return campaignId;
  }

   /**
   * The list id.
   * @return listId
  **/
  @Schema(description = "The list id.")
  public String getListId() {
    return listId;
  }

   /**
   * The status of the list used, namely if it&#x27;s deleted or disabled.
   * @return listIsActive
  **/
  @Schema(description = "The status of the list used, namely if it's deleted or disabled.")
  public Boolean isListIsActive() {
    return listIsActive;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Unsubscribes2 unsubscribes2 = (Unsubscribes2) o;
    return Objects.equals(this.emailId, unsubscribes2.emailId) &&
        Objects.equals(this.emailAddress, unsubscribes2.emailAddress) &&
        Objects.equals(this.mergeFields, unsubscribes2.mergeFields) &&
        Objects.equals(this.vip, unsubscribes2.vip) &&
        Objects.equals(this.timestamp, unsubscribes2.timestamp) &&
        Objects.equals(this.reason, unsubscribes2.reason) &&
        Objects.equals(this.campaignId, unsubscribes2.campaignId) &&
        Objects.equals(this.listId, unsubscribes2.listId) &&
        Objects.equals(this.listIsActive, unsubscribes2.listIsActive) &&
        Objects.equals(this._links, unsubscribes2._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailId, emailAddress, mergeFields, vip, timestamp, reason, campaignId, listId, listIsActive, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Unsubscribes2 {\n");
    
    sb.append("    emailId: ").append(toIndentedString(emailId)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    mergeFields: ").append(toIndentedString(mergeFields)).append("\n");
    sb.append("    vip: ").append(toIndentedString(vip)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    listIsActive: ").append(toIndentedString(listIsActive)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
