/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
/**
 * A single email domain&#x27;s performance
 */
@Schema(description = "A single email domain's performance")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class EmailDomain {
  @JsonProperty("domain")
  private String domain = null;

  @JsonProperty("emails_sent")
  private Integer emailsSent = null;

  @JsonProperty("bounces")
  private Integer bounces = null;

  @JsonProperty("opens")
  private Integer opens = null;

  @JsonProperty("clicks")
  private Integer clicks = null;

  @JsonProperty("unsubs")
  private Integer unsubs = null;

  @JsonProperty("delivered")
  private Integer delivered = null;

  @JsonProperty("emails_pct")
  private BigDecimal emailsPct = null;

  @JsonProperty("bounces_pct")
  private BigDecimal bouncesPct = null;

  @JsonProperty("opens_pct")
  private BigDecimal opensPct = null;

  @JsonProperty("clicks_pct")
  private BigDecimal clicksPct = null;

  @JsonProperty("unsubs_pct")
  private BigDecimal unsubsPct = null;

   /**
   * The name of the domain (gmail.com, hotmail.com, yahoo.com).
   * @return domain
  **/
  @Schema(description = "The name of the domain (gmail.com, hotmail.com, yahoo.com).")
  public String getDomain() {
    return domain;
  }

   /**
   * The number of emails sent to that specific domain.
   * @return emailsSent
  **/
  @Schema(description = "The number of emails sent to that specific domain.")
  public Integer getEmailsSent() {
    return emailsSent;
  }

   /**
   * The number of bounces at a domain.
   * @return bounces
  **/
  @Schema(description = "The number of bounces at a domain.")
  public Integer getBounces() {
    return bounces;
  }

   /**
   * The number of opens for a domain.
   * @return opens
  **/
  @Schema(description = "The number of opens for a domain.")
  public Integer getOpens() {
    return opens;
  }

   /**
   * The number of clicks for a domain.
   * @return clicks
  **/
  @Schema(description = "The number of clicks for a domain.")
  public Integer getClicks() {
    return clicks;
  }

   /**
   * The total number of unsubscribes for a domain.
   * @return unsubs
  **/
  @Schema(description = "The total number of unsubscribes for a domain.")
  public Integer getUnsubs() {
    return unsubs;
  }

   /**
   * The number of successful deliveries for a domain.
   * @return delivered
  **/
  @Schema(description = "The number of successful deliveries for a domain.")
  public Integer getDelivered() {
    return delivered;
  }

   /**
   * The percentage of total emails that went to this domain.
   * @return emailsPct
  **/
  @Schema(description = "The percentage of total emails that went to this domain.")
  public BigDecimal getEmailsPct() {
    return emailsPct;
  }

   /**
   * The percentage of total bounces from this domain.
   * @return bouncesPct
  **/
  @Schema(description = "The percentage of total bounces from this domain.")
  public BigDecimal getBouncesPct() {
    return bouncesPct;
  }

   /**
   * The percentage of total opens from this domain.
   * @return opensPct
  **/
  @Schema(description = "The percentage of total opens from this domain.")
  public BigDecimal getOpensPct() {
    return opensPct;
  }

   /**
   * The percentage of total clicks from this domain.
   * @return clicksPct
  **/
  @Schema(description = "The percentage of total clicks from this domain.")
  public BigDecimal getClicksPct() {
    return clicksPct;
  }

   /**
   * The percentage of total unsubscribes from this domain.
   * @return unsubsPct
  **/
  @Schema(description = "The percentage of total unsubscribes from this domain.")
  public BigDecimal getUnsubsPct() {
    return unsubsPct;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailDomain emailDomain = (EmailDomain) o;
    return Objects.equals(this.domain, emailDomain.domain) &&
        Objects.equals(this.emailsSent, emailDomain.emailsSent) &&
        Objects.equals(this.bounces, emailDomain.bounces) &&
        Objects.equals(this.opens, emailDomain.opens) &&
        Objects.equals(this.clicks, emailDomain.clicks) &&
        Objects.equals(this.unsubs, emailDomain.unsubs) &&
        Objects.equals(this.delivered, emailDomain.delivered) &&
        Objects.equals(this.emailsPct, emailDomain.emailsPct) &&
        Objects.equals(this.bouncesPct, emailDomain.bouncesPct) &&
        Objects.equals(this.opensPct, emailDomain.opensPct) &&
        Objects.equals(this.clicksPct, emailDomain.clicksPct) &&
        Objects.equals(this.unsubsPct, emailDomain.unsubsPct);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, emailsSent, bounces, opens, clicks, unsubs, delivered, emailsPct, bouncesPct, opensPct, clicksPct, unsubsPct);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailDomain {\n");
    
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    emailsSent: ").append(toIndentedString(emailsSent)).append("\n");
    sb.append("    bounces: ").append(toIndentedString(bounces)).append("\n");
    sb.append("    opens: ").append(toIndentedString(opens)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    unsubs: ").append(toIndentedString(unsubs)).append("\n");
    sb.append("    delivered: ").append(toIndentedString(delivered)).append("\n");
    sb.append("    emailsPct: ").append(toIndentedString(emailsPct)).append("\n");
    sb.append("    bouncesPct: ").append(toIndentedString(bouncesPct)).append("\n");
    sb.append("    opensPct: ").append(toIndentedString(opensPct)).append("\n");
    sb.append("    clicksPct: ").append(toIndentedString(clicksPct)).append("\n");
    sb.append("    unsubsPct: ").append(toIndentedString(unsubsPct)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
