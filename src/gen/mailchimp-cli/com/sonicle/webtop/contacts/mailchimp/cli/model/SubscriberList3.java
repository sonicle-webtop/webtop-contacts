/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignDefaults1;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ListContact2;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import com.sonicle.webtop.contacts.mailchimp.cli.model.Statistics;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * Information about a specific list.
 */
@Schema(description = "Information about a specific list.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class SubscriberList3 {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("web_id")
  private Integer webId = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("contact")
  private ListContact2 contact = null;

  @JsonProperty("permission_reminder")
  private String permissionReminder = null;

  @JsonProperty("use_archive_bar")
  private Boolean useArchiveBar = false;

  @JsonProperty("campaign_defaults")
  private CampaignDefaults1 campaignDefaults = null;

  @JsonProperty("notify_on_subscribe")
  private String notifyOnSubscribe = "false";

  @JsonProperty("notify_on_unsubscribe")
  private String notifyOnUnsubscribe = "false";

  @JsonProperty("date_created")
  private DateTime dateCreated = null;

  @JsonProperty("list_rating")
  private Integer listRating = null;

  @JsonProperty("email_type_option")
  private Boolean emailTypeOption = null;

  @JsonProperty("subscribe_url_short")
  private String subscribeUrlShort = null;

  @JsonProperty("subscribe_url_long")
  private String subscribeUrlLong = null;

  @JsonProperty("beamer_address")
  private String beamerAddress = null;

  /**
   * Legacy - visibility settings are no longer used
   */
  public enum VisibilityEnum {
    PUB("pub"),
    PRV("prv");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static VisibilityEnum fromValue(String text) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("visibility")
  private VisibilityEnum visibility = null;

  @JsonProperty("double_optin")
  private Boolean doubleOptin = false;

  @JsonProperty("has_welcome")
  private Boolean hasWelcome = false;

  @JsonProperty("marketing_permissions")
  private Boolean marketingPermissions = false;

  @JsonProperty("modules")
  private List<String> modules = null;

  @JsonProperty("stats")
  private Statistics stats = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * A string that uniquely identifies this list.
   * @return id
  **/
  @Schema(description = "A string that uniquely identifies this list.")
  public String getId() {
    return id;
  }

   /**
   * The ID used in the Mailchimp web application. View this list in your Mailchimp account at &#x60;https://{dc}.admin.mailchimp.com/lists/members/?id&#x3D;{web_id}&#x60;.
   * @return webId
  **/
  @Schema(description = "The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`.")
  public Integer getWebId() {
    return webId;
  }

  public SubscriberList3 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the list.
   * @return name
  **/
  @Schema(description = "The name of the list.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SubscriberList3 contact(ListContact2 contact) {
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @Schema(description = "")
  public ListContact2 getContact() {
    return contact;
  }

  public void setContact(ListContact2 contact) {
    this.contact = contact;
  }

  public SubscriberList3 permissionReminder(String permissionReminder) {
    this.permissionReminder = permissionReminder;
    return this;
  }

   /**
   * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
   * @return permissionReminder
  **/
  @Schema(description = "The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.")
  public String getPermissionReminder() {
    return permissionReminder;
  }

  public void setPermissionReminder(String permissionReminder) {
    this.permissionReminder = permissionReminder;
  }

  public SubscriberList3 useArchiveBar(Boolean useArchiveBar) {
    this.useArchiveBar = useArchiveBar;
    return this;
  }

   /**
   * Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.
   * @return useArchiveBar
  **/
  @Schema(description = "Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.")
  public Boolean isUseArchiveBar() {
    return useArchiveBar;
  }

  public void setUseArchiveBar(Boolean useArchiveBar) {
    this.useArchiveBar = useArchiveBar;
  }

  public SubscriberList3 campaignDefaults(CampaignDefaults1 campaignDefaults) {
    this.campaignDefaults = campaignDefaults;
    return this;
  }

   /**
   * Get campaignDefaults
   * @return campaignDefaults
  **/
  @Schema(description = "")
  public CampaignDefaults1 getCampaignDefaults() {
    return campaignDefaults;
  }

  public void setCampaignDefaults(CampaignDefaults1 campaignDefaults) {
    this.campaignDefaults = campaignDefaults;
  }

  public SubscriberList3 notifyOnSubscribe(String notifyOnSubscribe) {
    this.notifyOnSubscribe = notifyOnSubscribe;
    return this;
  }

   /**
   * The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
   * @return notifyOnSubscribe
  **/
  @Schema(description = "The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.")
  public String getNotifyOnSubscribe() {
    return notifyOnSubscribe;
  }

  public void setNotifyOnSubscribe(String notifyOnSubscribe) {
    this.notifyOnSubscribe = notifyOnSubscribe;
  }

  public SubscriberList3 notifyOnUnsubscribe(String notifyOnUnsubscribe) {
    this.notifyOnUnsubscribe = notifyOnUnsubscribe;
    return this;
  }

   /**
   * The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
   * @return notifyOnUnsubscribe
  **/
  @Schema(description = "The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.")
  public String getNotifyOnUnsubscribe() {
    return notifyOnUnsubscribe;
  }

  public void setNotifyOnUnsubscribe(String notifyOnUnsubscribe) {
    this.notifyOnUnsubscribe = notifyOnUnsubscribe;
  }

   /**
   * The date and time that this list was created in ISO 8601 format.
   * @return dateCreated
  **/
  @Schema(description = "The date and time that this list was created in ISO 8601 format.")
  public DateTime getDateCreated() {
    return dateCreated;
  }

   /**
   * An auto-generated activity score for the list (0-5).
   * @return listRating
  **/
  @Schema(description = "An auto-generated activity score for the list (0-5).")
  public Integer getListRating() {
    return listRating;
  }

  public SubscriberList3 emailTypeOption(Boolean emailTypeOption) {
    this.emailTypeOption = emailTypeOption;
    return this;
  }

   /**
   * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to &#x60;true&#x60;, subscribers can choose whether they want to receive HTML or plain-text emails. When set to &#x60;false&#x60;, subscribers will receive HTML emails, with a plain-text alternative backup.
   * @return emailTypeOption
  **/
  @Schema(description = "Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.")
  public Boolean isEmailTypeOption() {
    return emailTypeOption;
  }

  public void setEmailTypeOption(Boolean emailTypeOption) {
    this.emailTypeOption = emailTypeOption;
  }

   /**
   * Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list&#x27;s subscribe form.
   * @return subscribeUrlShort
  **/
  @Schema(description = "Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form.")
  public String getSubscribeUrlShort() {
    return subscribeUrlShort;
  }

   /**
   * The full version of this list&#x27;s subscribe form (host will vary).
   * @return subscribeUrlLong
  **/
  @Schema(description = "The full version of this list's subscribe form (host will vary).")
  public String getSubscribeUrlLong() {
    return subscribeUrlLong;
  }

   /**
   * The list&#x27;s [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address.
   * @return beamerAddress
  **/
  @Schema(description = "The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address.")
  public String getBeamerAddress() {
    return beamerAddress;
  }

  public SubscriberList3 visibility(VisibilityEnum visibility) {
    this.visibility = visibility;
    return this;
  }

   /**
   * Legacy - visibility settings are no longer used
   * @return visibility
  **/
  @Schema(description = "Legacy - visibility settings are no longer used")
  public VisibilityEnum getVisibility() {
    return visibility;
  }

  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }

  public SubscriberList3 doubleOptin(Boolean doubleOptin) {
    this.doubleOptin = doubleOptin;
    return this;
  }

   /**
   * Whether or not to require the subscriber to confirm subscription via email.
   * @return doubleOptin
  **/
  @Schema(description = "Whether or not to require the subscriber to confirm subscription via email.")
  public Boolean isDoubleOptin() {
    return doubleOptin;
  }

  public void setDoubleOptin(Boolean doubleOptin) {
    this.doubleOptin = doubleOptin;
  }

  public SubscriberList3 hasWelcome(Boolean hasWelcome) {
    this.hasWelcome = hasWelcome;
    return this;
  }

   /**
   * Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup.
   * @return hasWelcome
  **/
  @Schema(example = "false", description = "Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup.")
  public Boolean isHasWelcome() {
    return hasWelcome;
  }

  public void setHasWelcome(Boolean hasWelcome) {
    this.hasWelcome = hasWelcome;
  }

  public SubscriberList3 marketingPermissions(Boolean marketingPermissions) {
    this.marketingPermissions = marketingPermissions;
    return this;
  }

   /**
   * Whether or not the list has marketing permissions (eg. GDPR) enabled.
   * @return marketingPermissions
  **/
  @Schema(description = "Whether or not the list has marketing permissions (eg. GDPR) enabled.")
  public Boolean isMarketingPermissions() {
    return marketingPermissions;
  }

  public void setMarketingPermissions(Boolean marketingPermissions) {
    this.marketingPermissions = marketingPermissions;
  }

   /**
   * Any list-specific modules installed for this list.
   * @return modules
  **/
  @Schema(description = "Any list-specific modules installed for this list.")
  public List<String> getModules() {
    return modules;
  }

  public SubscriberList3 stats(Statistics stats) {
    this.stats = stats;
    return this;
  }

   /**
   * Get stats
   * @return stats
  **/
  @Schema(description = "")
  public Statistics getStats() {
    return stats;
  }

  public void setStats(Statistics stats) {
    this.stats = stats;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriberList3 subscriberList3 = (SubscriberList3) o;
    return Objects.equals(this.id, subscriberList3.id) &&
        Objects.equals(this.webId, subscriberList3.webId) &&
        Objects.equals(this.name, subscriberList3.name) &&
        Objects.equals(this.contact, subscriberList3.contact) &&
        Objects.equals(this.permissionReminder, subscriberList3.permissionReminder) &&
        Objects.equals(this.useArchiveBar, subscriberList3.useArchiveBar) &&
        Objects.equals(this.campaignDefaults, subscriberList3.campaignDefaults) &&
        Objects.equals(this.notifyOnSubscribe, subscriberList3.notifyOnSubscribe) &&
        Objects.equals(this.notifyOnUnsubscribe, subscriberList3.notifyOnUnsubscribe) &&
        Objects.equals(this.dateCreated, subscriberList3.dateCreated) &&
        Objects.equals(this.listRating, subscriberList3.listRating) &&
        Objects.equals(this.emailTypeOption, subscriberList3.emailTypeOption) &&
        Objects.equals(this.subscribeUrlShort, subscriberList3.subscribeUrlShort) &&
        Objects.equals(this.subscribeUrlLong, subscriberList3.subscribeUrlLong) &&
        Objects.equals(this.beamerAddress, subscriberList3.beamerAddress) &&
        Objects.equals(this.visibility, subscriberList3.visibility) &&
        Objects.equals(this.doubleOptin, subscriberList3.doubleOptin) &&
        Objects.equals(this.hasWelcome, subscriberList3.hasWelcome) &&
        Objects.equals(this.marketingPermissions, subscriberList3.marketingPermissions) &&
        Objects.equals(this.modules, subscriberList3.modules) &&
        Objects.equals(this.stats, subscriberList3.stats) &&
        Objects.equals(this._links, subscriberList3._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, webId, name, contact, permissionReminder, useArchiveBar, campaignDefaults, notifyOnSubscribe, notifyOnUnsubscribe, dateCreated, listRating, emailTypeOption, subscribeUrlShort, subscribeUrlLong, beamerAddress, visibility, doubleOptin, hasWelcome, marketingPermissions, modules, stats, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriberList3 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    permissionReminder: ").append(toIndentedString(permissionReminder)).append("\n");
    sb.append("    useArchiveBar: ").append(toIndentedString(useArchiveBar)).append("\n");
    sb.append("    campaignDefaults: ").append(toIndentedString(campaignDefaults)).append("\n");
    sb.append("    notifyOnSubscribe: ").append(toIndentedString(notifyOnSubscribe)).append("\n");
    sb.append("    notifyOnUnsubscribe: ").append(toIndentedString(notifyOnUnsubscribe)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    listRating: ").append(toIndentedString(listRating)).append("\n");
    sb.append("    emailTypeOption: ").append(toIndentedString(emailTypeOption)).append("\n");
    sb.append("    subscribeUrlShort: ").append(toIndentedString(subscribeUrlShort)).append("\n");
    sb.append("    subscribeUrlLong: ").append(toIndentedString(subscribeUrlLong)).append("\n");
    sb.append("    beamerAddress: ").append(toIndentedString(beamerAddress)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    doubleOptin: ").append(toIndentedString(doubleOptin)).append("\n");
    sb.append("    hasWelcome: ").append(toIndentedString(hasWelcome)).append("\n");
    sb.append("    marketingPermissions: ").append(toIndentedString(marketingPermissions)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
