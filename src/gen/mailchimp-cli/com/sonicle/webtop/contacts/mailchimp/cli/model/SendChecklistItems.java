/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * SendChecklistItems
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class SendChecklistItems {
  /**
   * The item type.
   */
  public enum TypeEnum {
    SUCCESS("success"),
    WARNING("warning"),
    ERROR("error");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("heading")
  private String heading = null;

  @JsonProperty("details")
  private String details = null;

  public SendChecklistItems type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The item type.
   * @return type
  **/
  @Schema(description = "The item type.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public SendChecklistItems id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The ID for the specific item.
   * @return id
  **/
  @Schema(description = "The ID for the specific item.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public SendChecklistItems heading(String heading) {
    this.heading = heading;
    return this;
  }

   /**
   * The heading for the specific item.
   * @return heading
  **/
  @Schema(description = "The heading for the specific item.")
  public String getHeading() {
    return heading;
  }

  public void setHeading(String heading) {
    this.heading = heading;
  }

  public SendChecklistItems details(String details) {
    this.details = details;
    return this;
  }

   /**
   * Details about the specific feedback item.
   * @return details
  **/
  @Schema(description = "Details about the specific feedback item.")
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendChecklistItems sendChecklistItems = (SendChecklistItems) o;
    return Objects.equals(this.type, sendChecklistItems.type) &&
        Objects.equals(this.id, sendChecklistItems.id) &&
        Objects.equals(this.heading, sendChecklistItems.heading) &&
        Objects.equals(this.details, sendChecklistItems.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, id, heading, details);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendChecklistItems {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
