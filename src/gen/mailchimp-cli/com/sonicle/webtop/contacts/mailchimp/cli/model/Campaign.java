/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ABTestOptions;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignSettings1;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignSocialCard;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignTrackingOptions;
import com.sonicle.webtop.contacts.mailchimp.cli.model.List1;
import com.sonicle.webtop.contacts.mailchimp.cli.model.RSSOptions;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * A summary of an individual campaign&#x27;s settings and content.
 */
@Schema(description = "A summary of an individual campaign's settings and content.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class Campaign {
  /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   */
  public enum TypeEnum {
    REGULAR("regular"),
    PLAINTEXT("plaintext"),
    ABSPLIT("absplit"),
    RSS("rss"),
    VARIATE("variate");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("recipients")
  private List1 recipients = null;

  @JsonProperty("settings")
  private CampaignSettings1 settings = null;

  @JsonProperty("variate_settings")
  private ABTestOptions variateSettings = null;

  @JsonProperty("tracking")
  private CampaignTrackingOptions tracking = null;

  @JsonProperty("rss_opts")
  private RSSOptions rssOpts = null;

  @JsonProperty("social_card")
  private CampaignSocialCard socialCard = null;

  /**
   * How the campaign&#x27;s content is put together. The old drag and drop editor uses &#x27;template&#x27; while the new editor uses &#x27;multichannel&#x27;. Defaults to template.
   */
  public enum ContentTypeEnum {
    TEMPLATE("template"),
    MULTICHANNEL("multichannel");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ContentTypeEnum fromValue(String text) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("content_type")
  private ContentTypeEnum contentType = null;

  public Campaign type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   * @return type
  **/
  @Schema(required = true, description = "There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Campaign recipients(List1 recipients) {
    this.recipients = recipients;
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @Schema(description = "")
  public List1 getRecipients() {
    return recipients;
  }

  public void setRecipients(List1 recipients) {
    this.recipients = recipients;
  }

  public Campaign settings(CampaignSettings1 settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @Schema(description = "")
  public CampaignSettings1 getSettings() {
    return settings;
  }

  public void setSettings(CampaignSettings1 settings) {
    this.settings = settings;
  }

  public Campaign variateSettings(ABTestOptions variateSettings) {
    this.variateSettings = variateSettings;
    return this;
  }

   /**
   * Get variateSettings
   * @return variateSettings
  **/
  @Schema(description = "")
  public ABTestOptions getVariateSettings() {
    return variateSettings;
  }

  public void setVariateSettings(ABTestOptions variateSettings) {
    this.variateSettings = variateSettings;
  }

  public Campaign tracking(CampaignTrackingOptions tracking) {
    this.tracking = tracking;
    return this;
  }

   /**
   * Get tracking
   * @return tracking
  **/
  @Schema(description = "")
  public CampaignTrackingOptions getTracking() {
    return tracking;
  }

  public void setTracking(CampaignTrackingOptions tracking) {
    this.tracking = tracking;
  }

  public Campaign rssOpts(RSSOptions rssOpts) {
    this.rssOpts = rssOpts;
    return this;
  }

   /**
   * Get rssOpts
   * @return rssOpts
  **/
  @Schema(description = "")
  public RSSOptions getRssOpts() {
    return rssOpts;
  }

  public void setRssOpts(RSSOptions rssOpts) {
    this.rssOpts = rssOpts;
  }

  public Campaign socialCard(CampaignSocialCard socialCard) {
    this.socialCard = socialCard;
    return this;
  }

   /**
   * Get socialCard
   * @return socialCard
  **/
  @Schema(description = "")
  public CampaignSocialCard getSocialCard() {
    return socialCard;
  }

  public void setSocialCard(CampaignSocialCard socialCard) {
    this.socialCard = socialCard;
  }

  public Campaign contentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * How the campaign&#x27;s content is put together. The old drag and drop editor uses &#x27;template&#x27; while the new editor uses &#x27;multichannel&#x27;. Defaults to template.
   * @return contentType
  **/
  @Schema(example = "template", description = "How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template.")
  public ContentTypeEnum getContentType() {
    return contentType;
  }

  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Campaign campaign = (Campaign) o;
    return Objects.equals(this.type, campaign.type) &&
        Objects.equals(this.recipients, campaign.recipients) &&
        Objects.equals(this.settings, campaign.settings) &&
        Objects.equals(this.variateSettings, campaign.variateSettings) &&
        Objects.equals(this.tracking, campaign.tracking) &&
        Objects.equals(this.rssOpts, campaign.rssOpts) &&
        Objects.equals(this.socialCard, campaign.socialCard) &&
        Objects.equals(this.contentType, campaign.contentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, recipients, settings, variateSettings, tracking, rssOpts, socialCard, contentType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Campaign {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    variateSettings: ").append(toIndentedString(variateSettings)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    rssOpts: ").append(toIndentedString(rssOpts)).append("\n");
    sb.append("    socialCard: ").append(toIndentedString(socialCard)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
