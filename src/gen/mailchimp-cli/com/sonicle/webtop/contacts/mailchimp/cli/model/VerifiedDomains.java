/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * The verified domains currently on the account.
 */
@Schema(description = "The verified domains currently on the account.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class VerifiedDomains {
  @JsonProperty("domain")
  private String domain = null;

  @JsonProperty("verified")
  private Boolean verified = null;

  @JsonProperty("authenticated")
  private Boolean authenticated = null;

  @JsonProperty("verification_email")
  private String verificationEmail = null;

  @JsonProperty("verification_sent")
  private DateTime verificationSent = null;

   /**
   * The name of this domain.
   * @return domain
  **/
  @Schema(description = "The name of this domain.")
  public String getDomain() {
    return domain;
  }

   /**
   * Whether the domain has been verified for sending.
   * @return verified
  **/
  @Schema(description = "Whether the domain has been verified for sending.")
  public Boolean isVerified() {
    return verified;
  }

   /**
   * Whether domain authentication is enabled for this domain.
   * @return authenticated
  **/
  @Schema(description = "Whether domain authentication is enabled for this domain.")
  public Boolean isAuthenticated() {
    return authenticated;
  }

   /**
   * The e-mail address receiving the two-factor challenge for this domain.
   * @return verificationEmail
  **/
  @Schema(description = "The e-mail address receiving the two-factor challenge for this domain.")
  public String getVerificationEmail() {
    return verificationEmail;
  }

   /**
   * The date/time that the two-factor challenge was sent to the verification email.
   * @return verificationSent
  **/
  @Schema(description = "The date/time that the two-factor challenge was sent to the verification email.")
  public DateTime getVerificationSent() {
    return verificationSent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifiedDomains verifiedDomains = (VerifiedDomains) o;
    return Objects.equals(this.domain, verifiedDomains.domain) &&
        Objects.equals(this.verified, verifiedDomains.verified) &&
        Objects.equals(this.authenticated, verifiedDomains.authenticated) &&
        Objects.equals(this.verificationEmail, verifiedDomains.verificationEmail) &&
        Objects.equals(this.verificationSent, verifiedDomains.verificationSent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, verified, authenticated, verificationEmail, verificationSent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifiedDomains {\n");
    
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("    authenticated: ").append(toIndentedString(authenticated)).append("\n");
    sb.append("    verificationEmail: ").append(toIndentedString(verificationEmail)).append("\n");
    sb.append("    verificationSent: ").append(toIndentedString(verificationSent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
