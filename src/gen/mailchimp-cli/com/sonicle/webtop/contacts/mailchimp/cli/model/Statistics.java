/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import org.joda.time.DateTime;
/**
 * Stats for the list. Many of these are cached for at least five minutes.
 */
@Schema(description = "Stats for the list. Many of these are cached for at least five minutes.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class Statistics {
  @JsonProperty("member_count")
  private Integer memberCount = null;

  @JsonProperty("total_contacts")
  private Integer totalContacts = null;

  @JsonProperty("unsubscribe_count")
  private Integer unsubscribeCount = null;

  @JsonProperty("cleaned_count")
  private Integer cleanedCount = null;

  @JsonProperty("member_count_since_send")
  private Integer memberCountSinceSend = null;

  @JsonProperty("unsubscribe_count_since_send")
  private Integer unsubscribeCountSinceSend = null;

  @JsonProperty("cleaned_count_since_send")
  private Integer cleanedCountSinceSend = null;

  @JsonProperty("campaign_count")
  private Integer campaignCount = null;

  @JsonProperty("campaign_last_sent")
  private DateTime campaignLastSent = null;

  @JsonProperty("merge_field_count")
  private Integer mergeFieldCount = null;

  @JsonProperty("avg_sub_rate")
  private BigDecimal avgSubRate = null;

  @JsonProperty("avg_unsub_rate")
  private BigDecimal avgUnsubRate = null;

  @JsonProperty("target_sub_rate")
  private BigDecimal targetSubRate = null;

  @JsonProperty("open_rate")
  private BigDecimal openRate = null;

  @JsonProperty("click_rate")
  private BigDecimal clickRate = null;

  @JsonProperty("last_sub_date")
  private DateTime lastSubDate = null;

  @JsonProperty("last_unsub_date")
  private DateTime lastUnsubDate = null;

   /**
   * The number of active members in the list.
   * @return memberCount
  **/
  @Schema(description = "The number of active members in the list.")
  public Integer getMemberCount() {
    return memberCount;
  }

   /**
   * The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included.
   * @return totalContacts
  **/
  @Schema(description = "The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included.")
  public Integer getTotalContacts() {
    return totalContacts;
  }

   /**
   * The number of members who have unsubscribed from the list.
   * @return unsubscribeCount
  **/
  @Schema(description = "The number of members who have unsubscribed from the list.")
  public Integer getUnsubscribeCount() {
    return unsubscribeCount;
  }

   /**
   * The number of members cleaned from the list.
   * @return cleanedCount
  **/
  @Schema(description = "The number of members cleaned from the list.")
  public Integer getCleanedCount() {
    return cleanedCount;
  }

   /**
   * The number of active members in the list since the last campaign was sent.
   * @return memberCountSinceSend
  **/
  @Schema(description = "The number of active members in the list since the last campaign was sent.")
  public Integer getMemberCountSinceSend() {
    return memberCountSinceSend;
  }

   /**
   * The number of members who have unsubscribed since the last campaign was sent.
   * @return unsubscribeCountSinceSend
  **/
  @Schema(description = "The number of members who have unsubscribed since the last campaign was sent.")
  public Integer getUnsubscribeCountSinceSend() {
    return unsubscribeCountSinceSend;
  }

   /**
   * The number of members cleaned from the list since the last campaign was sent.
   * @return cleanedCountSinceSend
  **/
  @Schema(description = "The number of members cleaned from the list since the last campaign was sent.")
  public Integer getCleanedCountSinceSend() {
    return cleanedCountSinceSend;
  }

   /**
   * The number of campaigns in any status that use this list.
   * @return campaignCount
  **/
  @Schema(description = "The number of campaigns in any status that use this list.")
  public Integer getCampaignCount() {
    return campaignCount;
  }

   /**
   * The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients.
   * @return campaignLastSent
  **/
  @Schema(description = "The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients.")
  public DateTime getCampaignLastSent() {
    return campaignLastSent;
  }

   /**
   * The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn&#x27;t include EMAIL).
   * @return mergeFieldCount
  **/
  @Schema(description = "The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL).")
  public Integer getMergeFieldCount() {
    return mergeFieldCount;
  }

   /**
   * The average number of subscriptions per month for the list (not returned if we haven&#x27;t calculated it yet).
   * @return avgSubRate
  **/
  @Schema(description = "The average number of subscriptions per month for the list (not returned if we haven't calculated it yet).")
  public BigDecimal getAvgSubRate() {
    return avgSubRate;
  }

   /**
   * The average number of unsubscriptions per month for the list (not returned if we haven&#x27;t calculated it yet).
   * @return avgUnsubRate
  **/
  @Schema(description = "The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet).")
  public BigDecimal getAvgUnsubRate() {
    return avgUnsubRate;
  }

   /**
   * The target number of subscriptions per month for the list to keep it growing (not returned if we haven&#x27;t calculated it yet).
   * @return targetSubRate
  **/
  @Schema(description = "The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet).")
  public BigDecimal getTargetSubRate() {
    return targetSubRate;
  }

   /**
   * The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven&#x27;t calculated it yet).
   * @return openRate
  **/
  @Schema(description = "The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).")
  public BigDecimal getOpenRate() {
    return openRate;
  }

   /**
   * The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven&#x27;t calculated it yet).
   * @return clickRate
  **/
  @Schema(description = "The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet).")
  public BigDecimal getClickRate() {
    return clickRate;
  }

   /**
   * The date and time of the last time someone subscribed to this list in ISO 8601 format.
   * @return lastSubDate
  **/
  @Schema(description = "The date and time of the last time someone subscribed to this list in ISO 8601 format.")
  public DateTime getLastSubDate() {
    return lastSubDate;
  }

   /**
   * The date and time of the last time someone unsubscribed from this list in ISO 8601 format.
   * @return lastUnsubDate
  **/
  @Schema(description = "The date and time of the last time someone unsubscribed from this list in ISO 8601 format.")
  public DateTime getLastUnsubDate() {
    return lastUnsubDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Statistics statistics = (Statistics) o;
    return Objects.equals(this.memberCount, statistics.memberCount) &&
        Objects.equals(this.totalContacts, statistics.totalContacts) &&
        Objects.equals(this.unsubscribeCount, statistics.unsubscribeCount) &&
        Objects.equals(this.cleanedCount, statistics.cleanedCount) &&
        Objects.equals(this.memberCountSinceSend, statistics.memberCountSinceSend) &&
        Objects.equals(this.unsubscribeCountSinceSend, statistics.unsubscribeCountSinceSend) &&
        Objects.equals(this.cleanedCountSinceSend, statistics.cleanedCountSinceSend) &&
        Objects.equals(this.campaignCount, statistics.campaignCount) &&
        Objects.equals(this.campaignLastSent, statistics.campaignLastSent) &&
        Objects.equals(this.mergeFieldCount, statistics.mergeFieldCount) &&
        Objects.equals(this.avgSubRate, statistics.avgSubRate) &&
        Objects.equals(this.avgUnsubRate, statistics.avgUnsubRate) &&
        Objects.equals(this.targetSubRate, statistics.targetSubRate) &&
        Objects.equals(this.openRate, statistics.openRate) &&
        Objects.equals(this.clickRate, statistics.clickRate) &&
        Objects.equals(this.lastSubDate, statistics.lastSubDate) &&
        Objects.equals(this.lastUnsubDate, statistics.lastUnsubDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memberCount, totalContacts, unsubscribeCount, cleanedCount, memberCountSinceSend, unsubscribeCountSinceSend, cleanedCountSinceSend, campaignCount, campaignLastSent, mergeFieldCount, avgSubRate, avgUnsubRate, targetSubRate, openRate, clickRate, lastSubDate, lastUnsubDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Statistics {\n");
    
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    totalContacts: ").append(toIndentedString(totalContacts)).append("\n");
    sb.append("    unsubscribeCount: ").append(toIndentedString(unsubscribeCount)).append("\n");
    sb.append("    cleanedCount: ").append(toIndentedString(cleanedCount)).append("\n");
    sb.append("    memberCountSinceSend: ").append(toIndentedString(memberCountSinceSend)).append("\n");
    sb.append("    unsubscribeCountSinceSend: ").append(toIndentedString(unsubscribeCountSinceSend)).append("\n");
    sb.append("    cleanedCountSinceSend: ").append(toIndentedString(cleanedCountSinceSend)).append("\n");
    sb.append("    campaignCount: ").append(toIndentedString(campaignCount)).append("\n");
    sb.append("    campaignLastSent: ").append(toIndentedString(campaignLastSent)).append("\n");
    sb.append("    mergeFieldCount: ").append(toIndentedString(mergeFieldCount)).append("\n");
    sb.append("    avgSubRate: ").append(toIndentedString(avgSubRate)).append("\n");
    sb.append("    avgUnsubRate: ").append(toIndentedString(avgUnsubRate)).append("\n");
    sb.append("    targetSubRate: ").append(toIndentedString(targetSubRate)).append("\n");
    sb.append("    openRate: ").append(toIndentedString(openRate)).append("\n");
    sb.append("    clickRate: ").append(toIndentedString(clickRate)).append("\n");
    sb.append("    lastSubDate: ").append(toIndentedString(lastSubDate)).append("\n");
    sb.append("    lastUnsubDate: ").append(toIndentedString(lastUnsubDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
