/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.LastMessage;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Details about an individual conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account.
 */
@Schema(description = "Details about an individual conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class Conversation1 {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("message_count")
  private Integer messageCount = null;

  @JsonProperty("campaign_id")
  private String campaignId = null;

  @JsonProperty("list_id")
  private String listId = null;

  @JsonProperty("unread_messages")
  private Integer unreadMessages = null;

  @JsonProperty("from_label")
  private String fromLabel = null;

  @JsonProperty("from_email")
  private String fromEmail = null;

  @JsonProperty("subject")
  private String subject = null;

  @JsonProperty("last_message")
  private LastMessage lastMessage = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * A string that uniquely identifies this conversation.
   * @return id
  **/
  @Schema(description = "A string that uniquely identifies this conversation.")
  public String getId() {
    return id;
  }

   /**
   * The total number of messages in this conversation.
   * @return messageCount
  **/
  @Schema(description = "The total number of messages in this conversation.")
  public Integer getMessageCount() {
    return messageCount;
  }

   /**
   * The unique identifier of the campaign for this conversation.
   * @return campaignId
  **/
  @Schema(description = "The unique identifier of the campaign for this conversation.")
  public String getCampaignId() {
    return campaignId;
  }

   /**
   * The unique identifier of the list for this conversation.
   * @return listId
  **/
  @Schema(description = "The unique identifier of the list for this conversation.")
  public String getListId() {
    return listId;
  }

   /**
   * The number of unread messages in this conversation.
   * @return unreadMessages
  **/
  @Schema(description = "The number of unread messages in this conversation.")
  public Integer getUnreadMessages() {
    return unreadMessages;
  }

   /**
   * A label representing the sender of this message.
   * @return fromLabel
  **/
  @Schema(description = "A label representing the sender of this message.")
  public String getFromLabel() {
    return fromLabel;
  }

   /**
   * A label representing the email of the sender of this message.
   * @return fromEmail
  **/
  @Schema(description = "A label representing the email of the sender of this message.")
  public String getFromEmail() {
    return fromEmail;
  }

   /**
   * The subject of the message.
   * @return subject
  **/
  @Schema(description = "The subject of the message.")
  public String getSubject() {
    return subject;
  }

  public Conversation1 lastMessage(LastMessage lastMessage) {
    this.lastMessage = lastMessage;
    return this;
  }

   /**
   * Get lastMessage
   * @return lastMessage
  **/
  @Schema(description = "")
  public LastMessage getLastMessage() {
    return lastMessage;
  }

  public void setLastMessage(LastMessage lastMessage) {
    this.lastMessage = lastMessage;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Conversation1 conversation1 = (Conversation1) o;
    return Objects.equals(this.id, conversation1.id) &&
        Objects.equals(this.messageCount, conversation1.messageCount) &&
        Objects.equals(this.campaignId, conversation1.campaignId) &&
        Objects.equals(this.listId, conversation1.listId) &&
        Objects.equals(this.unreadMessages, conversation1.unreadMessages) &&
        Objects.equals(this.fromLabel, conversation1.fromLabel) &&
        Objects.equals(this.fromEmail, conversation1.fromEmail) &&
        Objects.equals(this.subject, conversation1.subject) &&
        Objects.equals(this.lastMessage, conversation1.lastMessage) &&
        Objects.equals(this._links, conversation1._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, messageCount, campaignId, listId, unreadMessages, fromLabel, fromEmail, subject, lastMessage, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Conversation1 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    messageCount: ").append(toIndentedString(messageCount)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    unreadMessages: ").append(toIndentedString(unreadMessages)).append("\n");
    sb.append("    fromLabel: ").append(toIndentedString(fromLabel)).append("\n");
    sb.append("    fromEmail: ").append(toIndentedString(fromEmail)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    lastMessage: ").append(toIndentedString(lastMessage)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
