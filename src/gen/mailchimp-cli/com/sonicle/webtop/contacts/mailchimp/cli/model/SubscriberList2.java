/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignDefaults;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ListContact1;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Information about a specific list.
 */
@Schema(description = "Information about a specific list.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class SubscriberList2 {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("contact")
  private ListContact1 contact = null;

  @JsonProperty("permission_reminder")
  private String permissionReminder = null;

  @JsonProperty("use_archive_bar")
  private Boolean useArchiveBar = false;

  @JsonProperty("campaign_defaults")
  private CampaignDefaults campaignDefaults = null;

  @JsonProperty("notify_on_subscribe")
  private String notifyOnSubscribe = "false";

  @JsonProperty("notify_on_unsubscribe")
  private String notifyOnUnsubscribe = "false";

  @JsonProperty("email_type_option")
  private Boolean emailTypeOption = null;

  @JsonProperty("double_optin")
  private Boolean doubleOptin = false;

  @JsonProperty("marketing_permissions")
  private Boolean marketingPermissions = false;

  public SubscriberList2 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the list.
   * @return name
  **/
  @Schema(required = true, description = "The name of the list.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SubscriberList2 contact(ListContact1 contact) {
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @Schema(required = true, description = "")
  public ListContact1 getContact() {
    return contact;
  }

  public void setContact(ListContact1 contact) {
    this.contact = contact;
  }

  public SubscriberList2 permissionReminder(String permissionReminder) {
    this.permissionReminder = permissionReminder;
    return this;
  }

   /**
   * The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.
   * @return permissionReminder
  **/
  @Schema(required = true, description = "The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list.")
  public String getPermissionReminder() {
    return permissionReminder;
  }

  public void setPermissionReminder(String permissionReminder) {
    this.permissionReminder = permissionReminder;
  }

  public SubscriberList2 useArchiveBar(Boolean useArchiveBar) {
    this.useArchiveBar = useArchiveBar;
    return this;
  }

   /**
   * Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.
   * @return useArchiveBar
  **/
  @Schema(description = "Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default.")
  public Boolean isUseArchiveBar() {
    return useArchiveBar;
  }

  public void setUseArchiveBar(Boolean useArchiveBar) {
    this.useArchiveBar = useArchiveBar;
  }

  public SubscriberList2 campaignDefaults(CampaignDefaults campaignDefaults) {
    this.campaignDefaults = campaignDefaults;
    return this;
  }

   /**
   * Get campaignDefaults
   * @return campaignDefaults
  **/
  @Schema(required = true, description = "")
  public CampaignDefaults getCampaignDefaults() {
    return campaignDefaults;
  }

  public void setCampaignDefaults(CampaignDefaults campaignDefaults) {
    this.campaignDefaults = campaignDefaults;
  }

  public SubscriberList2 notifyOnSubscribe(String notifyOnSubscribe) {
    this.notifyOnSubscribe = notifyOnSubscribe;
    return this;
  }

   /**
   * The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
   * @return notifyOnSubscribe
  **/
  @Schema(description = "The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.")
  public String getNotifyOnSubscribe() {
    return notifyOnSubscribe;
  }

  public void setNotifyOnSubscribe(String notifyOnSubscribe) {
    this.notifyOnSubscribe = notifyOnSubscribe;
  }

  public SubscriberList2 notifyOnUnsubscribe(String notifyOnUnsubscribe) {
    this.notifyOnUnsubscribe = notifyOnUnsubscribe;
    return this;
  }

   /**
   * The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.
   * @return notifyOnUnsubscribe
  **/
  @Schema(description = "The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to.")
  public String getNotifyOnUnsubscribe() {
    return notifyOnUnsubscribe;
  }

  public void setNotifyOnUnsubscribe(String notifyOnUnsubscribe) {
    this.notifyOnUnsubscribe = notifyOnUnsubscribe;
  }

  public SubscriberList2 emailTypeOption(Boolean emailTypeOption) {
    this.emailTypeOption = emailTypeOption;
    return this;
  }

   /**
   * Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to &#x60;true&#x60;, subscribers can choose whether they want to receive HTML or plain-text emails. When set to &#x60;false&#x60;, subscribers will receive HTML emails, with a plain-text alternative backup.
   * @return emailTypeOption
  **/
  @Schema(required = true, description = "Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup.")
  public Boolean isEmailTypeOption() {
    return emailTypeOption;
  }

  public void setEmailTypeOption(Boolean emailTypeOption) {
    this.emailTypeOption = emailTypeOption;
  }

  public SubscriberList2 doubleOptin(Boolean doubleOptin) {
    this.doubleOptin = doubleOptin;
    return this;
  }

   /**
   * Whether or not to require the subscriber to confirm subscription via email.
   * @return doubleOptin
  **/
  @Schema(description = "Whether or not to require the subscriber to confirm subscription via email.")
  public Boolean isDoubleOptin() {
    return doubleOptin;
  }

  public void setDoubleOptin(Boolean doubleOptin) {
    this.doubleOptin = doubleOptin;
  }

  public SubscriberList2 marketingPermissions(Boolean marketingPermissions) {
    this.marketingPermissions = marketingPermissions;
    return this;
  }

   /**
   * Whether or not the list has marketing permissions (eg. GDPR) enabled.
   * @return marketingPermissions
  **/
  @Schema(description = "Whether or not the list has marketing permissions (eg. GDPR) enabled.")
  public Boolean isMarketingPermissions() {
    return marketingPermissions;
  }

  public void setMarketingPermissions(Boolean marketingPermissions) {
    this.marketingPermissions = marketingPermissions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriberList2 subscriberList2 = (SubscriberList2) o;
    return Objects.equals(this.name, subscriberList2.name) &&
        Objects.equals(this.contact, subscriberList2.contact) &&
        Objects.equals(this.permissionReminder, subscriberList2.permissionReminder) &&
        Objects.equals(this.useArchiveBar, subscriberList2.useArchiveBar) &&
        Objects.equals(this.campaignDefaults, subscriberList2.campaignDefaults) &&
        Objects.equals(this.notifyOnSubscribe, subscriberList2.notifyOnSubscribe) &&
        Objects.equals(this.notifyOnUnsubscribe, subscriberList2.notifyOnUnsubscribe) &&
        Objects.equals(this.emailTypeOption, subscriberList2.emailTypeOption) &&
        Objects.equals(this.doubleOptin, subscriberList2.doubleOptin) &&
        Objects.equals(this.marketingPermissions, subscriberList2.marketingPermissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, contact, permissionReminder, useArchiveBar, campaignDefaults, notifyOnSubscribe, notifyOnUnsubscribe, emailTypeOption, doubleOptin, marketingPermissions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriberList2 {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    permissionReminder: ").append(toIndentedString(permissionReminder)).append("\n");
    sb.append("    useArchiveBar: ").append(toIndentedString(useArchiveBar)).append("\n");
    sb.append("    campaignDefaults: ").append(toIndentedString(campaignDefaults)).append("\n");
    sb.append("    notifyOnSubscribe: ").append(toIndentedString(notifyOnSubscribe)).append("\n");
    sb.append("    notifyOnUnsubscribe: ").append(toIndentedString(notifyOnUnsubscribe)).append("\n");
    sb.append("    emailTypeOption: ").append(toIndentedString(emailTypeOption)).append("\n");
    sb.append("    doubleOptin: ").append(toIndentedString(doubleOptin)).append("\n");
    sb.append("    marketingPermissions: ").append(toIndentedString(marketingPermissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
