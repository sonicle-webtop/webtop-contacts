/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Members to add/remove to/from a static segment
 */
@Schema(description = "Members to add/remove to/from a static segment")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class MembersToAddremoveTofromAStaticSegment {
  @JsonProperty("members_to_add")
  private List<String> membersToAdd = null;

  @JsonProperty("members_to_remove")
  private List<String> membersToRemove = null;

  public MembersToAddremoveTofromAStaticSegment membersToAdd(List<String> membersToAdd) {
    this.membersToAdd = membersToAdd;
    return this;
  }

  public MembersToAddremoveTofromAStaticSegment addMembersToAddItem(String membersToAddItem) {
    if (this.membersToAdd == null) {
      this.membersToAdd = new ArrayList<>();
    }
    this.membersToAdd.add(membersToAddItem);
    return this;
  }

   /**
   * An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent.
   * @return membersToAdd
  **/
  @Schema(description = "An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent.")
  public List<String> getMembersToAdd() {
    return membersToAdd;
  }

  public void setMembersToAdd(List<String> membersToAdd) {
    this.membersToAdd = membersToAdd;
  }

  public MembersToAddremoveTofromAStaticSegment membersToRemove(List<String> membersToRemove) {
    this.membersToRemove = membersToRemove;
    return this;
  }

  public MembersToAddremoveTofromAStaticSegment addMembersToRemoveItem(String membersToRemoveItem) {
    if (this.membersToRemove == null) {
      this.membersToRemove = new ArrayList<>();
    }
    this.membersToRemove.add(membersToRemoveItem);
    return this;
  }

   /**
   * An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent.
   * @return membersToRemove
  **/
  @Schema(description = "An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. A maximum of 500 members can be sent.")
  public List<String> getMembersToRemove() {
    return membersToRemove;
  }

  public void setMembersToRemove(List<String> membersToRemove) {
    this.membersToRemove = membersToRemove;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MembersToAddremoveTofromAStaticSegment membersToAddremoveTofromAStaticSegment = (MembersToAddremoveTofromAStaticSegment) o;
    return Objects.equals(this.membersToAdd, membersToAddremoveTofromAStaticSegment.membersToAdd) &&
        Objects.equals(this.membersToRemove, membersToAddremoveTofromAStaticSegment.membersToRemove);
  }

  @Override
  public int hashCode() {
    return Objects.hash(membersToAdd, membersToRemove);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MembersToAddremoveTofromAStaticSegment {\n");
    
    sb.append("    membersToAdd: ").append(toIndentedString(membersToAdd)).append("\n");
    sb.append("    membersToRemove: ").append(toIndentedString(membersToRemove)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
