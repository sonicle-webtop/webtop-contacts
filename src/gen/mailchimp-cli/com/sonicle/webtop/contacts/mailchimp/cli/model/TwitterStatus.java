/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * An individual tweet.
 */
@Schema(description = "An individual tweet.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class TwitterStatus {
  @JsonProperty("status")
  private String status = null;

  @JsonProperty("screen_name")
  private String screenName = null;

  @JsonProperty("status_id")
  private String statusId = null;

  @JsonProperty("datetime")
  private DateTime datetime = null;

  @JsonProperty("is_retweet")
  private Boolean isRetweet = null;

   /**
   * The body of the tweet.
   * @return status
  **/
  @Schema(description = "The body of the tweet.")
  public String getStatus() {
    return status;
  }

   /**
   * The Twitter handle for the author of the tweet.
   * @return screenName
  **/
  @Schema(description = "The Twitter handle for the author of the tweet.")
  public String getScreenName() {
    return screenName;
  }

   /**
   * The individual id for the tweet.
   * @return statusId
  **/
  @Schema(description = "The individual id for the tweet.")
  public String getStatusId() {
    return statusId;
  }

   /**
   * A timestamp for the tweet.
   * @return datetime
  **/
  @Schema(description = "A timestamp for the tweet.")
  public DateTime getDatetime() {
    return datetime;
  }

   /**
   * A &#x27;true&#x27; or &#x27;false&#x27; status of whether the tweet is a retweet.
   * @return isRetweet
  **/
  @Schema(description = "A 'true' or 'false' status of whether the tweet is a retweet.")
  public Boolean isIsRetweet() {
    return isRetweet;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TwitterStatus twitterStatus = (TwitterStatus) o;
    return Objects.equals(this.status, twitterStatus.status) &&
        Objects.equals(this.screenName, twitterStatus.screenName) &&
        Objects.equals(this.statusId, twitterStatus.statusId) &&
        Objects.equals(this.datetime, twitterStatus.datetime) &&
        Objects.equals(this.isRetweet, twitterStatus.isRetweet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, screenName, statusId, datetime, isRetweet);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TwitterStatus {\n");
    
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    screenName: ").append(toIndentedString(screenName)).append("\n");
    sb.append("    statusId: ").append(toIndentedString(statusId)).append("\n");
    sb.append("    datetime: ").append(toIndentedString(datetime)).append("\n");
    sb.append("    isRetweet: ").append(toIndentedString(isRetweet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
