/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.
 */
@Schema(description = "[A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class ABTestingOptions {
  /**
   * The type of AB split to run.
   */
  public enum SplitTestEnum {
    SUBJECT("subject"),
    FROM_NAME("from_name"),
    SCHEDULE("schedule");

    private String value;

    SplitTestEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SplitTestEnum fromValue(String text) {
      for (SplitTestEnum b : SplitTestEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("split_test")
  private SplitTestEnum splitTest = null;

  /**
   * How we should evaluate a winner. Based on &#x27;opens&#x27;, &#x27;clicks&#x27;, or &#x27;manual&#x27;.
   */
  public enum PickWinnerEnum {
    OPENS("opens"),
    CLICKS("clicks"),
    MANUAL("manual");

    private String value;

    PickWinnerEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PickWinnerEnum fromValue(String text) {
      for (PickWinnerEnum b : PickWinnerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("pick_winner")
  private PickWinnerEnum pickWinner = null;

  /**
   * How unit of time for measuring the winner (&#x27;hours&#x27; or &#x27;days&#x27;). This cannot be changed after a campaign is sent.
   */
  public enum WaitUnitsEnum {
    HOURS("hours"),
    DAYS("days");

    private String value;

    WaitUnitsEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static WaitUnitsEnum fromValue(String text) {
      for (WaitUnitsEnum b : WaitUnitsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("wait_units")
  private WaitUnitsEnum waitUnits = null;

  @JsonProperty("wait_time")
  private Integer waitTime = null;

  @JsonProperty("split_size")
  private Integer splitSize = null;

  @JsonProperty("from_name_a")
  private String fromNameA = null;

  @JsonProperty("from_name_b")
  private String fromNameB = null;

  @JsonProperty("reply_email_a")
  private String replyEmailA = null;

  @JsonProperty("reply_email_b")
  private String replyEmailB = null;

  @JsonProperty("subject_a")
  private String subjectA = null;

  @JsonProperty("subject_b")
  private String subjectB = null;

  @JsonProperty("send_time_a")
  private DateTime sendTimeA = null;

  @JsonProperty("send_time_b")
  private DateTime sendTimeB = null;

  @JsonProperty("send_time_winner")
  private String sendTimeWinner = null;

  public ABTestingOptions splitTest(SplitTestEnum splitTest) {
    this.splitTest = splitTest;
    return this;
  }

   /**
   * The type of AB split to run.
   * @return splitTest
  **/
  @Schema(description = "The type of AB split to run.")
  public SplitTestEnum getSplitTest() {
    return splitTest;
  }

  public void setSplitTest(SplitTestEnum splitTest) {
    this.splitTest = splitTest;
  }

  public ABTestingOptions pickWinner(PickWinnerEnum pickWinner) {
    this.pickWinner = pickWinner;
    return this;
  }

   /**
   * How we should evaluate a winner. Based on &#x27;opens&#x27;, &#x27;clicks&#x27;, or &#x27;manual&#x27;.
   * @return pickWinner
  **/
  @Schema(description = "How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'.")
  public PickWinnerEnum getPickWinner() {
    return pickWinner;
  }

  public void setPickWinner(PickWinnerEnum pickWinner) {
    this.pickWinner = pickWinner;
  }

  public ABTestingOptions waitUnits(WaitUnitsEnum waitUnits) {
    this.waitUnits = waitUnits;
    return this;
  }

   /**
   * How unit of time for measuring the winner (&#x27;hours&#x27; or &#x27;days&#x27;). This cannot be changed after a campaign is sent.
   * @return waitUnits
  **/
  @Schema(description = "How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent.")
  public WaitUnitsEnum getWaitUnits() {
    return waitUnits;
  }

  public void setWaitUnits(WaitUnitsEnum waitUnits) {
    this.waitUnits = waitUnits;
  }

  public ABTestingOptions waitTime(Integer waitTime) {
    this.waitTime = waitTime;
    return this;
  }

   /**
   * The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.
   * @return waitTime
  **/
  @Schema(description = "The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent.")
  public Integer getWaitTime() {
    return waitTime;
  }

  public void setWaitTime(Integer waitTime) {
    this.waitTime = waitTime;
  }

  public ABTestingOptions splitSize(Integer splitSize) {
    this.splitSize = splitSize;
    return this;
  }

   /**
   * The size of the split groups. Campaigns split based on &#x27;schedule&#x27; are forced to have a 50/50 split. Valid split integers are between 1-50.
   * minimum: 1
   * maximum: 50
   * @return splitSize
  **/
  @Schema(description = "The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50.")
  public Integer getSplitSize() {
    return splitSize;
  }

  public void setSplitSize(Integer splitSize) {
    this.splitSize = splitSize;
  }

  public ABTestingOptions fromNameA(String fromNameA) {
    this.fromNameA = fromNameA;
    return this;
  }

   /**
   * For campaigns split on &#x27;From Name&#x27;, the name for Group A.
   * @return fromNameA
  **/
  @Schema(description = "For campaigns split on 'From Name', the name for Group A.")
  public String getFromNameA() {
    return fromNameA;
  }

  public void setFromNameA(String fromNameA) {
    this.fromNameA = fromNameA;
  }

  public ABTestingOptions fromNameB(String fromNameB) {
    this.fromNameB = fromNameB;
    return this;
  }

   /**
   * For campaigns split on &#x27;From Name&#x27;, the name for Group B.
   * @return fromNameB
  **/
  @Schema(description = "For campaigns split on 'From Name', the name for Group B.")
  public String getFromNameB() {
    return fromNameB;
  }

  public void setFromNameB(String fromNameB) {
    this.fromNameB = fromNameB;
  }

  public ABTestingOptions replyEmailA(String replyEmailA) {
    this.replyEmailA = replyEmailA;
    return this;
  }

   /**
   * For campaigns split on &#x27;From Name&#x27;, the reply-to address for Group A.
   * @return replyEmailA
  **/
  @Schema(description = "For campaigns split on 'From Name', the reply-to address for Group A.")
  public String getReplyEmailA() {
    return replyEmailA;
  }

  public void setReplyEmailA(String replyEmailA) {
    this.replyEmailA = replyEmailA;
  }

  public ABTestingOptions replyEmailB(String replyEmailB) {
    this.replyEmailB = replyEmailB;
    return this;
  }

   /**
   * For campaigns split on &#x27;From Name&#x27;, the reply-to address for Group B.
   * @return replyEmailB
  **/
  @Schema(description = "For campaigns split on 'From Name', the reply-to address for Group B.")
  public String getReplyEmailB() {
    return replyEmailB;
  }

  public void setReplyEmailB(String replyEmailB) {
    this.replyEmailB = replyEmailB;
  }

  public ABTestingOptions subjectA(String subjectA) {
    this.subjectA = subjectA;
    return this;
  }

   /**
   * For campaigns split on &#x27;Subject Line&#x27;, the subject line for Group A.
   * @return subjectA
  **/
  @Schema(description = "For campaigns split on 'Subject Line', the subject line for Group A.")
  public String getSubjectA() {
    return subjectA;
  }

  public void setSubjectA(String subjectA) {
    this.subjectA = subjectA;
  }

  public ABTestingOptions subjectB(String subjectB) {
    this.subjectB = subjectB;
    return this;
  }

   /**
   * For campaigns split on &#x27;Subject Line&#x27;, the subject line for Group B.
   * @return subjectB
  **/
  @Schema(description = "For campaigns split on 'Subject Line', the subject line for Group B.")
  public String getSubjectB() {
    return subjectB;
  }

  public void setSubjectB(String subjectB) {
    this.subjectB = subjectB;
  }

  public ABTestingOptions sendTimeA(DateTime sendTimeA) {
    this.sendTimeA = sendTimeA;
    return this;
  }

   /**
   * The send time for Group A.
   * @return sendTimeA
  **/
  @Schema(description = "The send time for Group A.")
  public DateTime getSendTimeA() {
    return sendTimeA;
  }

  public void setSendTimeA(DateTime sendTimeA) {
    this.sendTimeA = sendTimeA;
  }

  public ABTestingOptions sendTimeB(DateTime sendTimeB) {
    this.sendTimeB = sendTimeB;
    return this;
  }

   /**
   * The send time for Group B.
   * @return sendTimeB
  **/
  @Schema(description = "The send time for Group B.")
  public DateTime getSendTimeB() {
    return sendTimeB;
  }

  public void setSendTimeB(DateTime sendTimeB) {
    this.sendTimeB = sendTimeB;
  }

  public ABTestingOptions sendTimeWinner(String sendTimeWinner) {
    this.sendTimeWinner = sendTimeWinner;
    return this;
  }

   /**
   * The send time for the winning version.
   * @return sendTimeWinner
  **/
  @Schema(description = "The send time for the winning version.")
  public String getSendTimeWinner() {
    return sendTimeWinner;
  }

  public void setSendTimeWinner(String sendTimeWinner) {
    this.sendTimeWinner = sendTimeWinner;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ABTestingOptions abTestingOptions = (ABTestingOptions) o;
    return Objects.equals(this.splitTest, abTestingOptions.splitTest) &&
        Objects.equals(this.pickWinner, abTestingOptions.pickWinner) &&
        Objects.equals(this.waitUnits, abTestingOptions.waitUnits) &&
        Objects.equals(this.waitTime, abTestingOptions.waitTime) &&
        Objects.equals(this.splitSize, abTestingOptions.splitSize) &&
        Objects.equals(this.fromNameA, abTestingOptions.fromNameA) &&
        Objects.equals(this.fromNameB, abTestingOptions.fromNameB) &&
        Objects.equals(this.replyEmailA, abTestingOptions.replyEmailA) &&
        Objects.equals(this.replyEmailB, abTestingOptions.replyEmailB) &&
        Objects.equals(this.subjectA, abTestingOptions.subjectA) &&
        Objects.equals(this.subjectB, abTestingOptions.subjectB) &&
        Objects.equals(this.sendTimeA, abTestingOptions.sendTimeA) &&
        Objects.equals(this.sendTimeB, abTestingOptions.sendTimeB) &&
        Objects.equals(this.sendTimeWinner, abTestingOptions.sendTimeWinner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(splitTest, pickWinner, waitUnits, waitTime, splitSize, fromNameA, fromNameB, replyEmailA, replyEmailB, subjectA, subjectB, sendTimeA, sendTimeB, sendTimeWinner);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ABTestingOptions {\n");
    
    sb.append("    splitTest: ").append(toIndentedString(splitTest)).append("\n");
    sb.append("    pickWinner: ").append(toIndentedString(pickWinner)).append("\n");
    sb.append("    waitUnits: ").append(toIndentedString(waitUnits)).append("\n");
    sb.append("    waitTime: ").append(toIndentedString(waitTime)).append("\n");
    sb.append("    splitSize: ").append(toIndentedString(splitSize)).append("\n");
    sb.append("    fromNameA: ").append(toIndentedString(fromNameA)).append("\n");
    sb.append("    fromNameB: ").append(toIndentedString(fromNameB)).append("\n");
    sb.append("    replyEmailA: ").append(toIndentedString(replyEmailA)).append("\n");
    sb.append("    replyEmailB: ").append(toIndentedString(replyEmailB)).append("\n");
    sb.append("    subjectA: ").append(toIndentedString(subjectA)).append("\n");
    sb.append("    subjectB: ").append(toIndentedString(subjectB)).append("\n");
    sb.append("    sendTimeA: ").append(toIndentedString(sendTimeA)).append("\n");
    sb.append("    sendTimeB: ").append(toIndentedString(sendTimeB)).append("\n");
    sb.append("    sendTimeWinner: ").append(toIndentedString(sendTimeWinner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
