/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.AddListMembers;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Members to subscribe to or unsubscribe from a list.
 */
@Schema(description = "Members to subscribe to or unsubscribe from a list.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class MembersToSubscribeUnsubscribeTofromAListInBatch {
  @JsonProperty("members")
  private List<AddListMembers> members = new ArrayList<>();

  @JsonProperty("update_existing")
  private Boolean updateExisting = null;

  public MembersToSubscribeUnsubscribeTofromAListInBatch members(List<AddListMembers> members) {
    this.members = members;
    return this;
  }

  public MembersToSubscribeUnsubscribeTofromAListInBatch addMembersItem(AddListMembers membersItem) {
    this.members.add(membersItem);
    return this;
  }

   /**
   * An array of objects, each representing an email address and the subscription status for a specific list. Up to 500 members may be added or updated with each API call.
   * @return members
  **/
  @Schema(required = true, description = "An array of objects, each representing an email address and the subscription status for a specific list. Up to 500 members may be added or updated with each API call.")
  public List<AddListMembers> getMembers() {
    return members;
  }

  public void setMembers(List<AddListMembers> members) {
    this.members = members;
  }

  public MembersToSubscribeUnsubscribeTofromAListInBatch updateExisting(Boolean updateExisting) {
    this.updateExisting = updateExisting;
    return this;
  }

   /**
   * Whether this batch operation will change existing members&#x27; subscription status.
   * @return updateExisting
  **/
  @Schema(description = "Whether this batch operation will change existing members' subscription status.")
  public Boolean isUpdateExisting() {
    return updateExisting;
  }

  public void setUpdateExisting(Boolean updateExisting) {
    this.updateExisting = updateExisting;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MembersToSubscribeUnsubscribeTofromAListInBatch membersToSubscribeUnsubscribeTofromAListInBatch = (MembersToSubscribeUnsubscribeTofromAListInBatch) o;
    return Objects.equals(this.members, membersToSubscribeUnsubscribeTofromAListInBatch.members) &&
        Objects.equals(this.updateExisting, membersToSubscribeUnsubscribeTofromAListInBatch.updateExisting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(members, updateExisting);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MembersToSubscribeUnsubscribeTofromAListInBatch {\n");
    
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    updateExisting: ").append(toIndentedString(updateExisting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
