/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.EcommerceProductImage5;
import com.sonicle.webtop.contacts.mailchimp.cli.model.EcommerceProductVariant6;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * Information about a specific product.
 */
@Schema(description = "Information about a specific product.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class EcommerceProduct1 {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("currency_code")
  private String currencyCode = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("handle")
  private String handle = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("vendor")
  private String vendor = null;

  @JsonProperty("image_url")
  private String imageUrl = null;

  @JsonProperty("variants")
  private List<EcommerceProductVariant6> variants = null;

  @JsonProperty("images")
  private List<EcommerceProductImage5> images = null;

  @JsonProperty("published_at_foreign")
  private DateTime publishedAtForeign = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * A unique identifier for the product.
   * @return id
  **/
  @Schema(description = "A unique identifier for the product.")
  public String getId() {
    return id;
  }

   /**
   * The currency code
   * @return currencyCode
  **/
  @Schema(description = "The currency code")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public EcommerceProduct1 title(String title) {
    this.title = title;
    return this;
  }

   /**
   * The title of a product.
   * @return title
  **/
  @Schema(example = "Cat Hat", description = "The title of a product.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public EcommerceProduct1 handle(String handle) {
    this.handle = handle;
    return this;
  }

   /**
   * The handle of a product.
   * @return handle
  **/
  @Schema(example = "cat-hat", description = "The handle of a product.")
  public String getHandle() {
    return handle;
  }

  public void setHandle(String handle) {
    this.handle = handle;
  }

  public EcommerceProduct1 url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The URL for a product.
   * @return url
  **/
  @Schema(description = "The URL for a product.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public EcommerceProduct1 description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of a product.
   * @return description
  **/
  @Schema(example = "This is a cat hat.", description = "The description of a product.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EcommerceProduct1 type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of product.
   * @return type
  **/
  @Schema(example = "Accessories", description = "The type of product.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public EcommerceProduct1 vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

   /**
   * The vendor for a product.
   * @return vendor
  **/
  @Schema(description = "The vendor for a product.")
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }

  public EcommerceProduct1 imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * The image URL for a product.
   * @return imageUrl
  **/
  @Schema(description = "The image URL for a product.")
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public EcommerceProduct1 variants(List<EcommerceProductVariant6> variants) {
    this.variants = variants;
    return this;
  }

  public EcommerceProduct1 addVariantsItem(EcommerceProductVariant6 variantsItem) {
    if (this.variants == null) {
      this.variants = new ArrayList<>();
    }
    this.variants.add(variantsItem);
    return this;
  }

   /**
   * Returns up to 50 of the product&#x27;s variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/).
   * @return variants
  **/
  @Schema(description = "Returns up to 50 of the product's variants. To retrieve all variants use [Product Variants](https://mailchimp.com/developer/marketing/api/ecommerce-product-variants/).")
  public List<EcommerceProductVariant6> getVariants() {
    return variants;
  }

  public void setVariants(List<EcommerceProductVariant6> variants) {
    this.variants = variants;
  }

  public EcommerceProduct1 images(List<EcommerceProductImage5> images) {
    this.images = images;
    return this;
  }

  public EcommerceProduct1 addImagesItem(EcommerceProductImage5 imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * An array of the product&#x27;s images.
   * @return images
  **/
  @Schema(description = "An array of the product's images.")
  public List<EcommerceProductImage5> getImages() {
    return images;
  }

  public void setImages(List<EcommerceProductImage5> images) {
    this.images = images;
  }

  public EcommerceProduct1 publishedAtForeign(DateTime publishedAtForeign) {
    this.publishedAtForeign = publishedAtForeign;
    return this;
  }

   /**
   * The date and time the product was published in ISO 8601 format.
   * @return publishedAtForeign
  **/
  @Schema(example = "2015-07-15T19:28Z", description = "The date and time the product was published in ISO 8601 format.")
  public DateTime getPublishedAtForeign() {
    return publishedAtForeign;
  }

  public void setPublishedAtForeign(DateTime publishedAtForeign) {
    this.publishedAtForeign = publishedAtForeign;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcommerceProduct1 ecommerceProduct1 = (EcommerceProduct1) o;
    return Objects.equals(this.id, ecommerceProduct1.id) &&
        Objects.equals(this.currencyCode, ecommerceProduct1.currencyCode) &&
        Objects.equals(this.title, ecommerceProduct1.title) &&
        Objects.equals(this.handle, ecommerceProduct1.handle) &&
        Objects.equals(this.url, ecommerceProduct1.url) &&
        Objects.equals(this.description, ecommerceProduct1.description) &&
        Objects.equals(this.type, ecommerceProduct1.type) &&
        Objects.equals(this.vendor, ecommerceProduct1.vendor) &&
        Objects.equals(this.imageUrl, ecommerceProduct1.imageUrl) &&
        Objects.equals(this.variants, ecommerceProduct1.variants) &&
        Objects.equals(this.images, ecommerceProduct1.images) &&
        Objects.equals(this.publishedAtForeign, ecommerceProduct1.publishedAtForeign) &&
        Objects.equals(this._links, ecommerceProduct1._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, currencyCode, title, handle, url, description, type, vendor, imageUrl, variants, images, publishedAtForeign, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcommerceProduct1 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    handle: ").append(toIndentedString(handle)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    publishedAtForeign: ").append(toIndentedString(publishedAtForeign)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
