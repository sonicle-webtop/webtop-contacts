/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.Conditions;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Information about a specific list segment.
 */
@Schema(description = "Information about a specific list segment.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class List3 {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("static_segment")
  private List<String> staticSegment = null;

  @JsonProperty("options")
  private Conditions options = null;

  public List3 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the segment.
   * @return name
  **/
  @Schema(required = true, description = "The name of the segment.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public List3 staticSegment(List<String> staticSegment) {
    this.staticSegment = staticSegment;
    return this;
  }

  public List3 addStaticSegmentItem(String staticSegmentItem) {
    if (this.staticSegment == null) {
      this.staticSegment = new ArrayList<>();
    }
    this.staticSegment.add(staticSegmentItem);
    return this;
  }

   /**
   * An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array will create a static segment without any subscribers. This field cannot be provided with the options field.
   * @return staticSegment
  **/
  @Schema(description = "An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array will create a static segment without any subscribers. This field cannot be provided with the options field.")
  public List<String> getStaticSegment() {
    return staticSegment;
  }

  public void setStaticSegment(List<String> staticSegment) {
    this.staticSegment = staticSegment;
  }

  public List3 options(Conditions options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public Conditions getOptions() {
    return options;
  }

  public void setOptions(Conditions options) {
    this.options = options;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    List3 list3 = (List3) o;
    return Objects.equals(this.name, list3.name) &&
        Objects.equals(this.staticSegment, list3.staticSegment) &&
        Objects.equals(this.options, list3.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, staticSegment, options);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class List3 {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    staticSegment: ").append(toIndentedString(staticSegment)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
