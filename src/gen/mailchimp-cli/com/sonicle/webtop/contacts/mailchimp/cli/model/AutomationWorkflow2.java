/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.AutomationCampaignSettings1;
import com.sonicle.webtop.contacts.mailchimp.cli.model.AutomationTrackingOptions;
import com.sonicle.webtop.contacts.mailchimp.cli.model.AutomationTrigger1;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignReportSummary2;
import com.sonicle.webtop.contacts.mailchimp.cli.model.List9;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * A summary of an individual Automation workflow&#x27;s settings and content.
 */
@Schema(description = "A summary of an individual Automation workflow's settings and content.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class AutomationWorkflow2 {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("create_time")
  private DateTime createTime = null;

  @JsonProperty("start_time")
  private DateTime startTime = null;

  /**
   * The current status of the Automation.
   */
  public enum StatusEnum {
    SAVE("save"),
    PAUSED("paused"),
    SENDING("sending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("emails_sent")
  private Integer emailsSent = null;

  @JsonProperty("recipients")
  private List9 recipients = null;

  @JsonProperty("settings")
  private AutomationCampaignSettings1 settings = null;

  @JsonProperty("tracking")
  private AutomationTrackingOptions tracking = null;

  @JsonProperty("trigger_settings")
  private AutomationTrigger1 triggerSettings = null;

  @JsonProperty("report_summary")
  private CampaignReportSummary2 reportSummary = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * A string that identifies the Automation.
   * @return id
  **/
  @Schema(description = "A string that identifies the Automation.")
  public String getId() {
    return id;
  }

   /**
   * The date and time the Automation was created in ISO 8601 format.
   * @return createTime
  **/
  @Schema(description = "The date and time the Automation was created in ISO 8601 format.")
  public DateTime getCreateTime() {
    return createTime;
  }

   /**
   * The date and time the Automation was started in ISO 8601 format.
   * @return startTime
  **/
  @Schema(description = "The date and time the Automation was started in ISO 8601 format.")
  public DateTime getStartTime() {
    return startTime;
  }

   /**
   * The current status of the Automation.
   * @return status
  **/
  @Schema(description = "The current status of the Automation.")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * The total number of emails sent for the Automation.
   * @return emailsSent
  **/
  @Schema(description = "The total number of emails sent for the Automation.")
  public Integer getEmailsSent() {
    return emailsSent;
  }

  public AutomationWorkflow2 recipients(List9 recipients) {
    this.recipients = recipients;
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @Schema(description = "")
  public List9 getRecipients() {
    return recipients;
  }

  public void setRecipients(List9 recipients) {
    this.recipients = recipients;
  }

  public AutomationWorkflow2 settings(AutomationCampaignSettings1 settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @Schema(description = "")
  public AutomationCampaignSettings1 getSettings() {
    return settings;
  }

  public void setSettings(AutomationCampaignSettings1 settings) {
    this.settings = settings;
  }

  public AutomationWorkflow2 tracking(AutomationTrackingOptions tracking) {
    this.tracking = tracking;
    return this;
  }

   /**
   * Get tracking
   * @return tracking
  **/
  @Schema(description = "")
  public AutomationTrackingOptions getTracking() {
    return tracking;
  }

  public void setTracking(AutomationTrackingOptions tracking) {
    this.tracking = tracking;
  }

  public AutomationWorkflow2 triggerSettings(AutomationTrigger1 triggerSettings) {
    this.triggerSettings = triggerSettings;
    return this;
  }

   /**
   * Get triggerSettings
   * @return triggerSettings
  **/
  @Schema(description = "")
  public AutomationTrigger1 getTriggerSettings() {
    return triggerSettings;
  }

  public void setTriggerSettings(AutomationTrigger1 triggerSettings) {
    this.triggerSettings = triggerSettings;
  }

  public AutomationWorkflow2 reportSummary(CampaignReportSummary2 reportSummary) {
    this.reportSummary = reportSummary;
    return this;
  }

   /**
   * Get reportSummary
   * @return reportSummary
  **/
  @Schema(description = "")
  public CampaignReportSummary2 getReportSummary() {
    return reportSummary;
  }

  public void setReportSummary(CampaignReportSummary2 reportSummary) {
    this.reportSummary = reportSummary;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationWorkflow2 automationWorkflow2 = (AutomationWorkflow2) o;
    return Objects.equals(this.id, automationWorkflow2.id) &&
        Objects.equals(this.createTime, automationWorkflow2.createTime) &&
        Objects.equals(this.startTime, automationWorkflow2.startTime) &&
        Objects.equals(this.status, automationWorkflow2.status) &&
        Objects.equals(this.emailsSent, automationWorkflow2.emailsSent) &&
        Objects.equals(this.recipients, automationWorkflow2.recipients) &&
        Objects.equals(this.settings, automationWorkflow2.settings) &&
        Objects.equals(this.tracking, automationWorkflow2.tracking) &&
        Objects.equals(this.triggerSettings, automationWorkflow2.triggerSettings) &&
        Objects.equals(this.reportSummary, automationWorkflow2.reportSummary) &&
        Objects.equals(this._links, automationWorkflow2._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createTime, startTime, status, emailsSent, recipients, settings, tracking, triggerSettings, reportSummary, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationWorkflow2 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    emailsSent: ").append(toIndentedString(emailsSent)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    triggerSettings: ").append(toIndentedString(triggerSettings)).append("\n");
    sb.append("    reportSummary: ").append(toIndentedString(reportSummary)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
