/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The delay settings for an automation email.
 */
@Schema(description = "The delay settings for an automation email.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class AutomationDelay {
  @JsonProperty("amount")
  private Integer amount = null;

  /**
   * The type of delay for an automation email.
   */
  public enum TypeEnum {
    NOW("now"),
    DAY("day"),
    HOUR("hour"),
    WEEK("week");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  /**
   * Whether the delay settings describe before or after the delay action of an automation email.
   */
  public enum DirectionEnum {
    AFTER("after");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("direction")
  private DirectionEnum direction = null;

  /**
   * The action that triggers the delay of an automation emails.
   */
  public enum ActionEnum {
    SIGNUP("signup"),
    ECOMM_ABANDONED_BROWSE("ecomm_abandoned_browse"),
    ECOMM_ABANDONED_CART("ecomm_abandoned_cart");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("action")
  private ActionEnum action = null;

  public AutomationDelay amount(Integer amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The delay amount for an automation email.
   * @return amount
  **/
  @Schema(example = "1", description = "The delay amount for an automation email.")
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }

  public AutomationDelay type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of delay for an automation email.
   * @return type
  **/
  @Schema(example = "day", description = "The type of delay for an automation email.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public AutomationDelay direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Whether the delay settings describe before or after the delay action of an automation email.
   * @return direction
  **/
  @Schema(example = "after", description = "Whether the delay settings describe before or after the delay action of an automation email.")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public AutomationDelay action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * The action that triggers the delay of an automation emails.
   * @return action
  **/
  @Schema(example = "signup", required = true, description = "The action that triggers the delay of an automation emails.")
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationDelay automationDelay = (AutomationDelay) o;
    return Objects.equals(this.amount, automationDelay.amount) &&
        Objects.equals(this.type, automationDelay.type) &&
        Objects.equals(this.direction, automationDelay.direction) &&
        Objects.equals(this.action, automationDelay.action);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, type, direction, action);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationDelay {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
