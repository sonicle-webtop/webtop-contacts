/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ABTestOptions2;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ABTestingOptions;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignDeliveryStatus;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignReportSummary1;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignSettings4;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignSocialCard;
import com.sonicle.webtop.contacts.mailchimp.cli.model.CampaignTrackingOptions;
import com.sonicle.webtop.contacts.mailchimp.cli.model.List8;
import com.sonicle.webtop.contacts.mailchimp.cli.model.RSSOptions3;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * A summary of an individual campaign&#x27;s settings and content.
 */
@Schema(description = "A summary of an individual campaign's settings and content.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class Campaign4 {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("web_id")
  private Integer webId = null;

  @JsonProperty("parent_campaign_id")
  private String parentCampaignId = null;

  /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   */
  public enum TypeEnum {
    REGULAR("regular"),
    PLAINTEXT("plaintext"),
    ABSPLIT("absplit"),
    RSS("rss"),
    VARIATE("variate");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("create_time")
  private DateTime createTime = null;

  @JsonProperty("archive_url")
  private String archiveUrl = null;

  @JsonProperty("long_archive_url")
  private String longArchiveUrl = null;

  /**
   * The current status of the campaign.
   */
  public enum StatusEnum {
    SAVE("save"),
    PAUSED("paused"),
    SCHEDULE("schedule"),
    SENDING("sending"),
    SENT("sent"),
    CANCELED("canceled"),
    CANCELING("canceling"),
    ARCHIVED("archived");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("emails_sent")
  private Integer emailsSent = null;

  @JsonProperty("send_time")
  private DateTime sendTime = null;

  /**
   * How the campaign&#x27;s content is put together.
   */
  public enum ContentTypeEnum {
    TEMPLATE("template"),
    HTML("html"),
    URL("url"),
    MULTICHANNEL("multichannel");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ContentTypeEnum fromValue(String text) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("content_type")
  private ContentTypeEnum contentType = null;

  @JsonProperty("needs_block_refresh")
  private Boolean needsBlockRefresh = null;

  @JsonProperty("resendable")
  private Boolean resendable = null;

  @JsonProperty("recipients")
  private List8 recipients = null;

  @JsonProperty("settings")
  private CampaignSettings4 settings = null;

  @JsonProperty("variate_settings")
  private ABTestOptions2 variateSettings = null;

  @JsonProperty("tracking")
  private CampaignTrackingOptions tracking = null;

  @JsonProperty("rss_opts")
  private RSSOptions3 rssOpts = null;

  @JsonProperty("ab_split_opts")
  private ABTestingOptions abSplitOpts = null;

  @JsonProperty("social_card")
  private CampaignSocialCard socialCard = null;

  @JsonProperty("report_summary")
  private CampaignReportSummary1 reportSummary = null;

  @JsonProperty("delivery_status")
  private CampaignDeliveryStatus deliveryStatus = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * A string that uniquely identifies this campaign.
   * @return id
  **/
  @Schema(description = "A string that uniquely identifies this campaign.")
  public String getId() {
    return id;
  }

   /**
   * The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at &#x60;https://{dc}.admin.mailchimp.com/campaigns/show/?id&#x3D;{web_id}&#x60;.
   * @return webId
  **/
  @Schema(description = "The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`.")
  public Integer getWebId() {
    return webId;
  }

   /**
   * If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.
   * @return parentCampaignId
  **/
  @Schema(description = "If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children.")
  public String getParentCampaignId() {
    return parentCampaignId;
  }

  public Campaign4 type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.
   * @return type
  **/
  @Schema(description = "There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

   /**
   * The date and time the campaign was created in ISO 8601 format.
   * @return createTime
  **/
  @Schema(description = "The date and time the campaign was created in ISO 8601 format.")
  public DateTime getCreateTime() {
    return createTime;
  }

   /**
   * The link to the campaign&#x27;s archive version in ISO 8601 format.
   * @return archiveUrl
  **/
  @Schema(description = "The link to the campaign's archive version in ISO 8601 format.")
  public String getArchiveUrl() {
    return archiveUrl;
  }

   /**
   * The original link to the campaign&#x27;s archive version.
   * @return longArchiveUrl
  **/
  @Schema(description = "The original link to the campaign's archive version.")
  public String getLongArchiveUrl() {
    return longArchiveUrl;
  }

   /**
   * The current status of the campaign.
   * @return status
  **/
  @Schema(description = "The current status of the campaign.")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * The total number of emails sent for this campaign.
   * @return emailsSent
  **/
  @Schema(description = "The total number of emails sent for this campaign.")
  public Integer getEmailsSent() {
    return emailsSent;
  }

   /**
   * The date and time a campaign was sent.
   * @return sendTime
  **/
  @Schema(description = "The date and time a campaign was sent.")
  public DateTime getSendTime() {
    return sendTime;
  }

  public Campaign4 contentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * How the campaign&#x27;s content is put together.
   * @return contentType
  **/
  @Schema(description = "How the campaign's content is put together.")
  public ContentTypeEnum getContentType() {
    return contentType;
  }

  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }

   /**
   * Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.
   * @return needsBlockRefresh
  **/
  @Schema(description = "Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false.")
  public Boolean isNeedsBlockRefresh() {
    return needsBlockRefresh;
  }

   /**
   * Determines if the campaign qualifies to be resent to non-openers.
   * @return resendable
  **/
  @Schema(description = "Determines if the campaign qualifies to be resent to non-openers.")
  public Boolean isResendable() {
    return resendable;
  }

  public Campaign4 recipients(List8 recipients) {
    this.recipients = recipients;
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @Schema(description = "")
  public List8 getRecipients() {
    return recipients;
  }

  public void setRecipients(List8 recipients) {
    this.recipients = recipients;
  }

  public Campaign4 settings(CampaignSettings4 settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @Schema(description = "")
  public CampaignSettings4 getSettings() {
    return settings;
  }

  public void setSettings(CampaignSettings4 settings) {
    this.settings = settings;
  }

  public Campaign4 variateSettings(ABTestOptions2 variateSettings) {
    this.variateSettings = variateSettings;
    return this;
  }

   /**
   * Get variateSettings
   * @return variateSettings
  **/
  @Schema(description = "")
  public ABTestOptions2 getVariateSettings() {
    return variateSettings;
  }

  public void setVariateSettings(ABTestOptions2 variateSettings) {
    this.variateSettings = variateSettings;
  }

  public Campaign4 tracking(CampaignTrackingOptions tracking) {
    this.tracking = tracking;
    return this;
  }

   /**
   * Get tracking
   * @return tracking
  **/
  @Schema(description = "")
  public CampaignTrackingOptions getTracking() {
    return tracking;
  }

  public void setTracking(CampaignTrackingOptions tracking) {
    this.tracking = tracking;
  }

  public Campaign4 rssOpts(RSSOptions3 rssOpts) {
    this.rssOpts = rssOpts;
    return this;
  }

   /**
   * Get rssOpts
   * @return rssOpts
  **/
  @Schema(description = "")
  public RSSOptions3 getRssOpts() {
    return rssOpts;
  }

  public void setRssOpts(RSSOptions3 rssOpts) {
    this.rssOpts = rssOpts;
  }

  public Campaign4 abSplitOpts(ABTestingOptions abSplitOpts) {
    this.abSplitOpts = abSplitOpts;
    return this;
  }

   /**
   * Get abSplitOpts
   * @return abSplitOpts
  **/
  @Schema(description = "")
  public ABTestingOptions getAbSplitOpts() {
    return abSplitOpts;
  }

  public void setAbSplitOpts(ABTestingOptions abSplitOpts) {
    this.abSplitOpts = abSplitOpts;
  }

  public Campaign4 socialCard(CampaignSocialCard socialCard) {
    this.socialCard = socialCard;
    return this;
  }

   /**
   * Get socialCard
   * @return socialCard
  **/
  @Schema(description = "")
  public CampaignSocialCard getSocialCard() {
    return socialCard;
  }

  public void setSocialCard(CampaignSocialCard socialCard) {
    this.socialCard = socialCard;
  }

  public Campaign4 reportSummary(CampaignReportSummary1 reportSummary) {
    this.reportSummary = reportSummary;
    return this;
  }

   /**
   * Get reportSummary
   * @return reportSummary
  **/
  @Schema(description = "")
  public CampaignReportSummary1 getReportSummary() {
    return reportSummary;
  }

  public void setReportSummary(CampaignReportSummary1 reportSummary) {
    this.reportSummary = reportSummary;
  }

  public Campaign4 deliveryStatus(CampaignDeliveryStatus deliveryStatus) {
    this.deliveryStatus = deliveryStatus;
    return this;
  }

   /**
   * Get deliveryStatus
   * @return deliveryStatus
  **/
  @Schema(description = "")
  public CampaignDeliveryStatus getDeliveryStatus() {
    return deliveryStatus;
  }

  public void setDeliveryStatus(CampaignDeliveryStatus deliveryStatus) {
    this.deliveryStatus = deliveryStatus;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Campaign4 campaign4 = (Campaign4) o;
    return Objects.equals(this.id, campaign4.id) &&
        Objects.equals(this.webId, campaign4.webId) &&
        Objects.equals(this.parentCampaignId, campaign4.parentCampaignId) &&
        Objects.equals(this.type, campaign4.type) &&
        Objects.equals(this.createTime, campaign4.createTime) &&
        Objects.equals(this.archiveUrl, campaign4.archiveUrl) &&
        Objects.equals(this.longArchiveUrl, campaign4.longArchiveUrl) &&
        Objects.equals(this.status, campaign4.status) &&
        Objects.equals(this.emailsSent, campaign4.emailsSent) &&
        Objects.equals(this.sendTime, campaign4.sendTime) &&
        Objects.equals(this.contentType, campaign4.contentType) &&
        Objects.equals(this.needsBlockRefresh, campaign4.needsBlockRefresh) &&
        Objects.equals(this.resendable, campaign4.resendable) &&
        Objects.equals(this.recipients, campaign4.recipients) &&
        Objects.equals(this.settings, campaign4.settings) &&
        Objects.equals(this.variateSettings, campaign4.variateSettings) &&
        Objects.equals(this.tracking, campaign4.tracking) &&
        Objects.equals(this.rssOpts, campaign4.rssOpts) &&
        Objects.equals(this.abSplitOpts, campaign4.abSplitOpts) &&
        Objects.equals(this.socialCard, campaign4.socialCard) &&
        Objects.equals(this.reportSummary, campaign4.reportSummary) &&
        Objects.equals(this.deliveryStatus, campaign4.deliveryStatus) &&
        Objects.equals(this._links, campaign4._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, webId, parentCampaignId, type, createTime, archiveUrl, longArchiveUrl, status, emailsSent, sendTime, contentType, needsBlockRefresh, resendable, recipients, settings, variateSettings, tracking, rssOpts, abSplitOpts, socialCard, reportSummary, deliveryStatus, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Campaign4 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("    parentCampaignId: ").append(toIndentedString(parentCampaignId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    archiveUrl: ").append(toIndentedString(archiveUrl)).append("\n");
    sb.append("    longArchiveUrl: ").append(toIndentedString(longArchiveUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    emailsSent: ").append(toIndentedString(emailsSent)).append("\n");
    sb.append("    sendTime: ").append(toIndentedString(sendTime)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    needsBlockRefresh: ").append(toIndentedString(needsBlockRefresh)).append("\n");
    sb.append("    resendable: ").append(toIndentedString(resendable)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    variateSettings: ").append(toIndentedString(variateSettings)).append("\n");
    sb.append("    tracking: ").append(toIndentedString(tracking)).append("\n");
    sb.append("    rssOpts: ").append(toIndentedString(rssOpts)).append("\n");
    sb.append("    abSplitOpts: ").append(toIndentedString(abSplitOpts)).append("\n");
    sb.append("    socialCard: ").append(toIndentedString(socialCard)).append("\n");
    sb.append("    reportSummary: ").append(toIndentedString(reportSummary)).append("\n");
    sb.append("    deliveryStatus: ").append(toIndentedString(deliveryStatus)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
