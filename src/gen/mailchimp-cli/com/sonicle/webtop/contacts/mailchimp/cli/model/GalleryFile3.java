/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * An individual file listed in the File Manager.
 */
@Schema(description = "An individual file listed in the File Manager.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class GalleryFile3 {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("folder_id")
  private Integer folderId = null;

  /**
   * The type of file in the File Manager.
   */
  public enum TypeEnum {
    IMAGE("image"),
    FILE("file");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("full_size_url")
  private String fullSizeUrl = null;

  @JsonProperty("thumbnail_url")
  private String thumbnailUrl = null;

  @JsonProperty("size")
  private Integer size = null;

  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("created_by")
  private String createdBy = null;

  @JsonProperty("width")
  private Integer width = null;

  @JsonProperty("height")
  private Integer height = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * The unique id of the file.
   * @return id
  **/
  @Schema(description = "The unique id of the file.")
  public Integer getId() {
    return id;
  }

  public GalleryFile3 folderId(Integer folderId) {
    this.folderId = folderId;
    return this;
  }

   /**
   * The id of the folder.
   * @return folderId
  **/
  @Schema(description = "The id of the folder.")
  public Integer getFolderId() {
    return folderId;
  }

  public void setFolderId(Integer folderId) {
    this.folderId = folderId;
  }

   /**
   * The type of file in the File Manager.
   * @return type
  **/
  @Schema(description = "The type of file in the File Manager.")
  public TypeEnum getType() {
    return type;
  }

  public GalleryFile3 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the file.
   * @return name
  **/
  @Schema(description = "The name of the file.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * The url of the full-size file.
   * @return fullSizeUrl
  **/
  @Schema(description = "The url of the full-size file.")
  public String getFullSizeUrl() {
    return fullSizeUrl;
  }

   /**
   * The url of the thumbnail preview.
   * @return thumbnailUrl
  **/
  @Schema(description = "The url of the thumbnail preview.")
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }

   /**
   * The size of the file in bytes.
   * @return size
  **/
  @Schema(description = "The size of the file in bytes.")
  public Integer getSize() {
    return size;
  }

   /**
   * The date and time a file was added to the File Manager in ISO 8601 format.
   * @return createdAt
  **/
  @Schema(description = "The date and time a file was added to the File Manager in ISO 8601 format.")
  public DateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * The username of the profile that uploaded the file.
   * @return createdBy
  **/
  @Schema(description = "The username of the profile that uploaded the file.")
  public String getCreatedBy() {
    return createdBy;
  }

   /**
   * The width of the image.
   * @return width
  **/
  @Schema(description = "The width of the image.")
  public Integer getWidth() {
    return width;
  }

   /**
   * The height of an image.
   * @return height
  **/
  @Schema(description = "The height of an image.")
  public Integer getHeight() {
    return height;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GalleryFile3 galleryFile3 = (GalleryFile3) o;
    return Objects.equals(this.id, galleryFile3.id) &&
        Objects.equals(this.folderId, galleryFile3.folderId) &&
        Objects.equals(this.type, galleryFile3.type) &&
        Objects.equals(this.name, galleryFile3.name) &&
        Objects.equals(this.fullSizeUrl, galleryFile3.fullSizeUrl) &&
        Objects.equals(this.thumbnailUrl, galleryFile3.thumbnailUrl) &&
        Objects.equals(this.size, galleryFile3.size) &&
        Objects.equals(this.createdAt, galleryFile3.createdAt) &&
        Objects.equals(this.createdBy, galleryFile3.createdBy) &&
        Objects.equals(this.width, galleryFile3.width) &&
        Objects.equals(this.height, galleryFile3.height) &&
        Objects.equals(this._links, galleryFile3._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, folderId, type, name, fullSizeUrl, thumbnailUrl, size, createdAt, createdBy, width, height, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GalleryFile3 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fullSizeUrl: ").append(toIndentedString(fullSizeUrl)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
