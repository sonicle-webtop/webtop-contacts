/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ListMembers1Tags;
import com.sonicle.webtop.contacts.mailchimp.cli.model.Location1;
import com.sonicle.webtop.contacts.mailchimp.cli.model.Notes;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import com.sonicle.webtop.contacts.mailchimp.cli.model.SubscriberStats;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.joda.time.DateTime;
/**
 * Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed.
 */
@Schema(description = "Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class ListMembers5 {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("email_address")
  private String emailAddress = null;

  @JsonProperty("unique_email_id")
  private String uniqueEmailId = null;

  @JsonProperty("email_type")
  private String emailType = null;

  /**
   * Subscriber&#x27;s current status.
   */
  public enum StatusEnum {
    SUBSCRIBED("subscribed"),
    UNSUBSCRIBED("unsubscribed"),
    CLEANED("cleaned"),
    PENDING("pending"),
    TRANSACTIONAL("transactional");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("merge_fields")
  private Map<String, Object> mergeFields = null;

  @JsonProperty("interests")
  private Map<String, Boolean> interests = null;

  @JsonProperty("stats")
  private SubscriberStats stats = null;

  @JsonProperty("ip_signup")
  private String ipSignup = null;

  @JsonProperty("timestamp_signup")
  private DateTime timestampSignup = null;

  @JsonProperty("ip_opt")
  private String ipOpt = null;

  @JsonProperty("timestamp_opt")
  private DateTime timestampOpt = null;

  @JsonProperty("member_rating")
  private Integer memberRating = null;

  @JsonProperty("last_changed")
  private DateTime lastChanged = null;

  @JsonProperty("language")
  private String language = null;

  @JsonProperty("vip")
  private Boolean vip = null;

  @JsonProperty("email_client")
  private String emailClient = null;

  @JsonProperty("location")
  private Location1 location = null;

  @JsonProperty("last_note")
  private Notes lastNote = null;

  @JsonProperty("tags_count")
  private Integer tagsCount = null;

  @JsonProperty("tags")
  private List<ListMembers1Tags> tags = null;

  @JsonProperty("list_id")
  private String listId = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * The MD5 hash of the lowercase version of the list member&#x27;s email address.
   * @return id
  **/
  @Schema(description = "The MD5 hash of the lowercase version of the list member's email address.")
  public String getId() {
    return id;
  }

  public ListMembers5 emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Email address for a subscriber.
   * @return emailAddress
  **/
  @Schema(description = "Email address for a subscriber.")
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }

   /**
   * An identifier for the address across all of Mailchimp.
   * @return uniqueEmailId
  **/
  @Schema(description = "An identifier for the address across all of Mailchimp.")
  public String getUniqueEmailId() {
    return uniqueEmailId;
  }

  public ListMembers5 emailType(String emailType) {
    this.emailType = emailType;
    return this;
  }

   /**
   * Type of email this member asked to get (&#x27;html&#x27; or &#x27;text&#x27;).
   * @return emailType
  **/
  @Schema(description = "Type of email this member asked to get ('html' or 'text').")
  public String getEmailType() {
    return emailType;
  }

  public void setEmailType(String emailType) {
    this.emailType = emailType;
  }

  public ListMembers5 status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Subscriber&#x27;s current status.
   * @return status
  **/
  @Schema(description = "Subscriber's current status.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ListMembers5 mergeFields(Map<String, Object> mergeFields) {
    this.mergeFields = mergeFields;
    return this;
  }

  public ListMembers5 putMergeFieldsItem(String key, Object mergeFieldsItem) {
    if (this.mergeFields == null) {
      this.mergeFields = new HashMap<>();
    }
    this.mergeFields.put(key, mergeFieldsItem);
    return this;
  }

   /**
   * An individual merge var and value for a member.
   * @return mergeFields
  **/
  @Schema(description = "An individual merge var and value for a member.")
  public Map<String, Object> getMergeFields() {
    return mergeFields;
  }

  public void setMergeFields(Map<String, Object> mergeFields) {
    this.mergeFields = mergeFields;
  }

  public ListMembers5 interests(Map<String, Boolean> interests) {
    this.interests = interests;
    return this;
  }

  public ListMembers5 putInterestsItem(String key, Boolean interestsItem) {
    if (this.interests == null) {
      this.interests = new HashMap<>();
    }
    this.interests.put(key, interestsItem);
    return this;
  }

   /**
   * The key of this object&#x27;s properties is the ID of the interest in question.
   * @return interests
  **/
  @Schema(description = "The key of this object's properties is the ID of the interest in question.")
  public Map<String, Boolean> getInterests() {
    return interests;
  }

  public void setInterests(Map<String, Boolean> interests) {
    this.interests = interests;
  }

  public ListMembers5 stats(SubscriberStats stats) {
    this.stats = stats;
    return this;
  }

   /**
   * Get stats
   * @return stats
  **/
  @Schema(description = "")
  public SubscriberStats getStats() {
    return stats;
  }

  public void setStats(SubscriberStats stats) {
    this.stats = stats;
  }

   /**
   * IP address the subscriber signed up from.
   * @return ipSignup
  **/
  @Schema(description = "IP address the subscriber signed up from.")
  public String getIpSignup() {
    return ipSignup;
  }

   /**
   * The date and time the subscriber signed up for the list in ISO 8601 format.
   * @return timestampSignup
  **/
  @Schema(description = "The date and time the subscriber signed up for the list in ISO 8601 format.")
  public DateTime getTimestampSignup() {
    return timestampSignup;
  }

   /**
   * The IP address the subscriber used to confirm their opt-in status.
   * @return ipOpt
  **/
  @Schema(description = "The IP address the subscriber used to confirm their opt-in status.")
  public String getIpOpt() {
    return ipOpt;
  }

   /**
   * The date and time the subscriber confirmed their opt-in status in ISO 8601 format.
   * @return timestampOpt
  **/
  @Schema(description = "The date and time the subscriber confirmed their opt-in status in ISO 8601 format.")
  public DateTime getTimestampOpt() {
    return timestampOpt;
  }

   /**
   * Star rating for this member, between 1 and 5.
   * @return memberRating
  **/
  @Schema(description = "Star rating for this member, between 1 and 5.")
  public Integer getMemberRating() {
    return memberRating;
  }

   /**
   * The date and time the member&#x27;s info was last changed in ISO 8601 format.
   * @return lastChanged
  **/
  @Schema(description = "The date and time the member's info was last changed in ISO 8601 format.")
  public DateTime getLastChanged() {
    return lastChanged;
  }

  public ListMembers5 language(String language) {
    this.language = language;
    return this;
  }

   /**
   * If set/detected, the [subscriber&#x27;s language](https://mailchimp.com/help/view-and-edit-contact-languages/).
   * @return language
  **/
  @Schema(description = "If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/).")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public ListMembers5 vip(Boolean vip) {
    this.vip = vip;
    return this;
  }

   /**
   * [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.
   * @return vip
  **/
  @Schema(description = "[VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber.")
  public Boolean isVip() {
    return vip;
  }

  public void setVip(Boolean vip) {
    this.vip = vip;
  }

   /**
   * The list member&#x27;s email client.
   * @return emailClient
  **/
  @Schema(description = "The list member's email client.")
  public String getEmailClient() {
    return emailClient;
  }

  public ListMembers5 location(Location1 location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @Schema(description = "")
  public Location1 getLocation() {
    return location;
  }

  public void setLocation(Location1 location) {
    this.location = location;
  }

  public ListMembers5 lastNote(Notes lastNote) {
    this.lastNote = lastNote;
    return this;
  }

   /**
   * Get lastNote
   * @return lastNote
  **/
  @Schema(description = "")
  public Notes getLastNote() {
    return lastNote;
  }

  public void setLastNote(Notes lastNote) {
    this.lastNote = lastNote;
  }

   /**
   * The number of tags applied to this member.
   * @return tagsCount
  **/
  @Schema(description = "The number of tags applied to this member.")
  public Integer getTagsCount() {
    return tagsCount;
  }

  public ListMembers5 tags(List<ListMembers1Tags> tags) {
    this.tags = tags;
    return this;
  }

  public ListMembers5 addTagsItem(ListMembers1Tags tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags applied to this member.
   * @return tags
  **/
  @Schema(description = "The tags applied to this member.")
  public List<ListMembers1Tags> getTags() {
    return tags;
  }

  public void setTags(List<ListMembers1Tags> tags) {
    this.tags = tags;
  }

   /**
   * The list id.
   * @return listId
  **/
  @Schema(description = "The list id.")
  public String getListId() {
    return listId;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListMembers5 listMembers5 = (ListMembers5) o;
    return Objects.equals(this.id, listMembers5.id) &&
        Objects.equals(this.emailAddress, listMembers5.emailAddress) &&
        Objects.equals(this.uniqueEmailId, listMembers5.uniqueEmailId) &&
        Objects.equals(this.emailType, listMembers5.emailType) &&
        Objects.equals(this.status, listMembers5.status) &&
        Objects.equals(this.mergeFields, listMembers5.mergeFields) &&
        Objects.equals(this.interests, listMembers5.interests) &&
        Objects.equals(this.stats, listMembers5.stats) &&
        Objects.equals(this.ipSignup, listMembers5.ipSignup) &&
        Objects.equals(this.timestampSignup, listMembers5.timestampSignup) &&
        Objects.equals(this.ipOpt, listMembers5.ipOpt) &&
        Objects.equals(this.timestampOpt, listMembers5.timestampOpt) &&
        Objects.equals(this.memberRating, listMembers5.memberRating) &&
        Objects.equals(this.lastChanged, listMembers5.lastChanged) &&
        Objects.equals(this.language, listMembers5.language) &&
        Objects.equals(this.vip, listMembers5.vip) &&
        Objects.equals(this.emailClient, listMembers5.emailClient) &&
        Objects.equals(this.location, listMembers5.location) &&
        Objects.equals(this.lastNote, listMembers5.lastNote) &&
        Objects.equals(this.tagsCount, listMembers5.tagsCount) &&
        Objects.equals(this.tags, listMembers5.tags) &&
        Objects.equals(this.listId, listMembers5.listId) &&
        Objects.equals(this._links, listMembers5._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, emailAddress, uniqueEmailId, emailType, status, mergeFields, interests, stats, ipSignup, timestampSignup, ipOpt, timestampOpt, memberRating, lastChanged, language, vip, emailClient, location, lastNote, tagsCount, tags, listId, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListMembers5 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    uniqueEmailId: ").append(toIndentedString(uniqueEmailId)).append("\n");
    sb.append("    emailType: ").append(toIndentedString(emailType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    mergeFields: ").append(toIndentedString(mergeFields)).append("\n");
    sb.append("    interests: ").append(toIndentedString(interests)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    ipSignup: ").append(toIndentedString(ipSignup)).append("\n");
    sb.append("    timestampSignup: ").append(toIndentedString(timestampSignup)).append("\n");
    sb.append("    ipOpt: ").append(toIndentedString(ipOpt)).append("\n");
    sb.append("    timestampOpt: ").append(toIndentedString(timestampOpt)).append("\n");
    sb.append("    memberRating: ").append(toIndentedString(memberRating)).append("\n");
    sb.append("    lastChanged: ").append(toIndentedString(lastChanged)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    vip: ").append(toIndentedString(vip)).append("\n");
    sb.append("    emailClient: ").append(toIndentedString(emailClient)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    lastNote: ").append(toIndentedString(lastNote)).append("\n");
    sb.append("    tagsCount: ").append(toIndentedString(tagsCount)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
