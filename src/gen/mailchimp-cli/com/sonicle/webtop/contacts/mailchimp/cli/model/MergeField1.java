/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.MergeFieldOptions2;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * A merge field ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for a list.
 */
@Schema(description = "A merge field ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for a list.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class MergeField1 {
  @JsonProperty("merge_id")
  private Integer mergeId = null;

  @JsonProperty("tag")
  private String tag = null;

  @JsonProperty("name")
  private String name = null;

  /**
   * The [type](https://mailchimp.com/help/manage-audience-signup-form-fields/#Audience_field_types) for the merge field.
   */
  public enum TypeEnum {
    TEXT("text"),
    NUMBER("number"),
    ADDRESS("address"),
    PHONE("phone"),
    DATE("date"),
    URL("url"),
    IMAGEURL("imageurl"),
    RADIO("radio"),
    DROPDOWN("dropdown"),
    BIRTHDAY("birthday"),
    ZIP("zip");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("required")
  private Boolean required = null;

  @JsonProperty("default_value")
  private String defaultValue = null;

  @JsonProperty("public")
  private Boolean _public = null;

  @JsonProperty("display_order")
  private Integer displayOrder = null;

  @JsonProperty("options")
  private MergeFieldOptions2 options = null;

  @JsonProperty("help_text")
  private String helpText = null;

  @JsonProperty("list_id")
  private String listId = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * An unchanging id for the merge field.
   * @return mergeId
  **/
  @Schema(description = "An unchanging id for the merge field.")
  public Integer getMergeId() {
    return mergeId;
  }

  public MergeField1 tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * The merge tag used in Mailchimp campaigns and for the /members endpoint.
   * @return tag
  **/
  @Schema(description = "The merge tag used in Mailchimp campaigns and for the /members endpoint.")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public MergeField1 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the merge field (audience field).
   * @return name
  **/
  @Schema(description = "The name of the merge field (audience field).")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * The [type](https://mailchimp.com/help/manage-audience-signup-form-fields/#Audience_field_types) for the merge field.
   * @return type
  **/
  @Schema(description = "The [type](https://mailchimp.com/help/manage-audience-signup-form-fields/#Audience_field_types) for the merge field.")
  public TypeEnum getType() {
    return type;
  }

  public MergeField1 required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * The boolean value if the merge field is required.
   * @return required
  **/
  @Schema(description = "The boolean value if the merge field is required.")
  public Boolean isRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public MergeField1 defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * The default value for the merge field if &#x60;null&#x60;.
   * @return defaultValue
  **/
  @Schema(description = "The default value for the merge field if `null`.")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public MergeField1 _public(Boolean _public) {
    this._public = _public;
    return this;
  }

   /**
   * Whether the merge field is displayed on the signup form.
   * @return _public
  **/
  @Schema(description = "Whether the merge field is displayed on the signup form.")
  public Boolean isPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }

  public MergeField1 displayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
    return this;
  }

   /**
   * The order that the merge field displays on the list signup form.
   * @return displayOrder
  **/
  @Schema(description = "The order that the merge field displays on the list signup form.")
  public Integer getDisplayOrder() {
    return displayOrder;
  }

  public void setDisplayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
  }

  public MergeField1 options(MergeFieldOptions2 options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public MergeFieldOptions2 getOptions() {
    return options;
  }

  public void setOptions(MergeFieldOptions2 options) {
    this.options = options;
  }

  public MergeField1 helpText(String helpText) {
    this.helpText = helpText;
    return this;
  }

   /**
   * Extra text to help the subscriber fill out the form.
   * @return helpText
  **/
  @Schema(description = "Extra text to help the subscriber fill out the form.")
  public String getHelpText() {
    return helpText;
  }

  public void setHelpText(String helpText) {
    this.helpText = helpText;
  }

   /**
   * A string that identifies this merge field collections&#x27; list.
   * @return listId
  **/
  @Schema(description = "A string that identifies this merge field collections' list.")
  public String getListId() {
    return listId;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeField1 mergeField1 = (MergeField1) o;
    return Objects.equals(this.mergeId, mergeField1.mergeId) &&
        Objects.equals(this.tag, mergeField1.tag) &&
        Objects.equals(this.name, mergeField1.name) &&
        Objects.equals(this.type, mergeField1.type) &&
        Objects.equals(this.required, mergeField1.required) &&
        Objects.equals(this.defaultValue, mergeField1.defaultValue) &&
        Objects.equals(this._public, mergeField1._public) &&
        Objects.equals(this.displayOrder, mergeField1.displayOrder) &&
        Objects.equals(this.options, mergeField1.options) &&
        Objects.equals(this.helpText, mergeField1.helpText) &&
        Objects.equals(this.listId, mergeField1.listId) &&
        Objects.equals(this._links, mergeField1._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mergeId, tag, name, type, required, defaultValue, _public, displayOrder, options, helpText, listId, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeField1 {\n");
    
    sb.append("    mergeId: ").append(toIndentedString(mergeId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
