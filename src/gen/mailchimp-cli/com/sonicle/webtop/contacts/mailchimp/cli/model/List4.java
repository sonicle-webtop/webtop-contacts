/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.Conditions2;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * Information about a specific segment.
 */
@Schema(description = "Information about a specific segment.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class List4 {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("member_count")
  private Integer memberCount = null;

  /**
   * The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source&#x3D;mc-api&amp;utm_medium&#x3D;docs&amp;utm_campaign&#x3D;apidocs).
   */
  public enum TypeEnum {
    SAVED("saved"),
    STATIC("static"),
    FUZZY("fuzzy");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("updated_at")
  private DateTime updatedAt = null;

  @JsonProperty("options")
  private Conditions2 options = null;

  @JsonProperty("list_id")
  private String listId = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * The unique id for the segment.
   * @return id
  **/
  @Schema(description = "The unique id for the segment.")
  public Integer getId() {
    return id;
  }

  public List4 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the segment.
   * @return name
  **/
  @Schema(description = "The name of the segment.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * The number of active subscribers currently included in the segment.
   * @return memberCount
  **/
  @Schema(description = "The number of active subscribers currently included in the segment.")
  public Integer getMemberCount() {
    return memberCount;
  }

   /**
   * The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source&#x3D;mc-api&amp;utm_medium&#x3D;docs&amp;utm_campaign&#x3D;apidocs).
   * @return type
  **/
  @Schema(description = "The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs).")
  public TypeEnum getType() {
    return type;
  }

   /**
   * The date and time the segment was created in ISO 8601 format.
   * @return createdAt
  **/
  @Schema(description = "The date and time the segment was created in ISO 8601 format.")
  public DateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * The date and time the segment was last updated in ISO 8601 format.
   * @return updatedAt
  **/
  @Schema(description = "The date and time the segment was last updated in ISO 8601 format.")
  public DateTime getUpdatedAt() {
    return updatedAt;
  }

  public List4 options(Conditions2 options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public Conditions2 getOptions() {
    return options;
  }

  public void setOptions(Conditions2 options) {
    this.options = options;
  }

   /**
   * The list id.
   * @return listId
  **/
  @Schema(description = "The list id.")
  public String getListId() {
    return listId;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    List4 list4 = (List4) o;
    return Objects.equals(this.id, list4.id) &&
        Objects.equals(this.name, list4.name) &&
        Objects.equals(this.memberCount, list4.memberCount) &&
        Objects.equals(this.type, list4.type) &&
        Objects.equals(this.createdAt, list4.createdAt) &&
        Objects.equals(this.updatedAt, list4.updatedAt) &&
        Objects.equals(this.options, list4.options) &&
        Objects.equals(this.listId, list4.listId) &&
        Objects.equals(this._links, list4._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, memberCount, type, createdAt, updatedAt, options, listId, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class List4 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
