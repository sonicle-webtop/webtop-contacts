/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * The events that can trigger the webhook and whether they are enabled.
 */
@Schema(description = "The events that can trigger the webhook and whether they are enabled.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class Events2 {
  @JsonProperty("subscribe")
  private Boolean subscribe = null;

  @JsonProperty("unsubscribe")
  private Boolean unsubscribe = null;

  @JsonProperty("profile")
  private Boolean profile = null;

  @JsonProperty("cleaned")
  private Boolean cleaned = null;

  @JsonProperty("upemail")
  private Boolean upemail = null;

  @JsonProperty("campaign")
  private Boolean campaign = null;

  public Events2 subscribe(Boolean subscribe) {
    this.subscribe = subscribe;
    return this;
  }

   /**
   * Whether the webhook is triggered when a list subscriber is added.
   * @return subscribe
  **/
  @Schema(example = "true", description = "Whether the webhook is triggered when a list subscriber is added.")
  public Boolean isSubscribe() {
    return subscribe;
  }

  public void setSubscribe(Boolean subscribe) {
    this.subscribe = subscribe;
  }

  public Events2 unsubscribe(Boolean unsubscribe) {
    this.unsubscribe = unsubscribe;
    return this;
  }

   /**
   * Whether the webhook is triggered when a list member unsubscribes.
   * @return unsubscribe
  **/
  @Schema(example = "true", description = "Whether the webhook is triggered when a list member unsubscribes.")
  public Boolean isUnsubscribe() {
    return unsubscribe;
  }

  public void setUnsubscribe(Boolean unsubscribe) {
    this.unsubscribe = unsubscribe;
  }

  public Events2 profile(Boolean profile) {
    this.profile = profile;
    return this;
  }

   /**
   * Whether the webhook is triggered when a subscriber&#x27;s profile is updated.
   * @return profile
  **/
  @Schema(example = "true", description = "Whether the webhook is triggered when a subscriber's profile is updated.")
  public Boolean isProfile() {
    return profile;
  }

  public void setProfile(Boolean profile) {
    this.profile = profile;
  }

  public Events2 cleaned(Boolean cleaned) {
    this.cleaned = cleaned;
    return this;
  }

   /**
   * Whether the webhook is triggered when a subscriber&#x27;s email address is cleaned from the list.
   * @return cleaned
  **/
  @Schema(example = "true", description = "Whether the webhook is triggered when a subscriber's email address is cleaned from the list.")
  public Boolean isCleaned() {
    return cleaned;
  }

  public void setCleaned(Boolean cleaned) {
    this.cleaned = cleaned;
  }

  public Events2 upemail(Boolean upemail) {
    this.upemail = upemail;
    return this;
  }

   /**
   * Whether the webhook is triggered when a subscriber&#x27;s email address is changed.
   * @return upemail
  **/
  @Schema(example = "true", description = "Whether the webhook is triggered when a subscriber's email address is changed.")
  public Boolean isUpemail() {
    return upemail;
  }

  public void setUpemail(Boolean upemail) {
    this.upemail = upemail;
  }

  public Events2 campaign(Boolean campaign) {
    this.campaign = campaign;
    return this;
  }

   /**
   * Whether the webhook is triggered when a campaign is sent or cancelled.
   * @return campaign
  **/
  @Schema(example = "true", description = "Whether the webhook is triggered when a campaign is sent or cancelled.")
  public Boolean isCampaign() {
    return campaign;
  }

  public void setCampaign(Boolean campaign) {
    this.campaign = campaign;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Events2 events2 = (Events2) o;
    return Objects.equals(this.subscribe, events2.subscribe) &&
        Objects.equals(this.unsubscribe, events2.unsubscribe) &&
        Objects.equals(this.profile, events2.profile) &&
        Objects.equals(this.cleaned, events2.cleaned) &&
        Objects.equals(this.upemail, events2.upemail) &&
        Objects.equals(this.campaign, events2.campaign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subscribe, unsubscribe, profile, cleaned, upemail, campaign);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Events2 {\n");
    
    sb.append("    subscribe: ").append(toIndentedString(subscribe)).append("\n");
    sb.append("    unsubscribe: ").append(toIndentedString(unsubscribe)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    cleaned: ").append(toIndentedString(cleaned)).append("\n");
    sb.append("    upemail: ").append(toIndentedString(upemail)).append("\n");
    sb.append("    campaign: ").append(toIndentedString(campaign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
