/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * CampaignContentVariateContents
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class CampaignContentVariateContents {
  @JsonProperty("content_label")
  private String contentLabel = null;

  @JsonProperty("plain_text")
  private String plainText = null;

  @JsonProperty("html")
  private String html = null;

  public CampaignContentVariateContents contentLabel(String contentLabel) {
    this.contentLabel = contentLabel;
    return this;
  }

   /**
   * Label used to identify the content option.
   * @return contentLabel
  **/
  @Schema(example = "Green header", description = "Label used to identify the content option.")
  public String getContentLabel() {
    return contentLabel;
  }

  public void setContentLabel(String contentLabel) {
    this.contentLabel = contentLabel;
  }

  public CampaignContentVariateContents plainText(String plainText) {
    this.plainText = plainText;
    return this;
  }

   /**
   * The plain-text portion of the campaign. If left unspecified, we&#x27;ll generate this automatically.
   * @return plainText
  **/
  @Schema(description = "The plain-text portion of the campaign. If left unspecified, we'll generate this automatically.")
  public String getPlainText() {
    return plainText;
  }

  public void setPlainText(String plainText) {
    this.plainText = plainText;
  }

  public CampaignContentVariateContents html(String html) {
    this.html = html;
    return this;
  }

   /**
   * The raw HTML for the campaign.
   * @return html
  **/
  @Schema(example = "<!DOCTYPE html><html xmlns=http://www.w3.org/1999/xhtml><head><meta http-equiv=Content-Type content=\"text/html; charset=UTF-8\"><title>*|MC:SUBJECT|*</title><style type=text/css>body{background-color:#d0e4fe}</style><body leftmargin=0 marginwidth=0 topmargin=0 marginheight=0 offset=0>", description = "The raw HTML for the campaign.")
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignContentVariateContents campaignContentVariateContents = (CampaignContentVariateContents) o;
    return Objects.equals(this.contentLabel, campaignContentVariateContents.contentLabel) &&
        Objects.equals(this.plainText, campaignContentVariateContents.plainText) &&
        Objects.equals(this.html, campaignContentVariateContents.html);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentLabel, plainText, html);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignContentVariateContents {\n");
    
    sb.append("    contentLabel: ").append(toIndentedString(contentLabel)).append("\n");
    sb.append("    plainText: ").append(toIndentedString(plainText)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
