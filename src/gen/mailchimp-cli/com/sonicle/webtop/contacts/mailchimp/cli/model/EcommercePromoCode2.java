/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * Information about an Ecommerce Store&#x27;s specific Promo Code.
 */
@Schema(description = "Information about an Ecommerce Store's specific Promo Code.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class EcommercePromoCode2 {
  @JsonProperty("code")
  private String code = null;

  @JsonProperty("redemption_url")
  private String redemptionUrl = null;

  @JsonProperty("usage_count")
  private Integer usageCount = null;

  @JsonProperty("enabled")
  private Boolean enabled = null;

  @JsonProperty("created_at_foreign")
  private DateTime createdAtForeign = null;

  @JsonProperty("updated_at_foreign")
  private DateTime updatedAtForeign = null;

  public EcommercePromoCode2 code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The discount code. Restricted to UTF-8 characters with max length 50.
   * @return code
  **/
  @Schema(example = "summersale", description = "The discount code. Restricted to UTF-8 characters with max length 50.")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public EcommercePromoCode2 redemptionUrl(String redemptionUrl) {
    this.redemptionUrl = redemptionUrl;
    return this;
  }

   /**
   * The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.
   * @return redemptionUrl
  **/
  @Schema(example = "A url that applies promo code directly at checkout or a url that points to sale page or store url", description = "The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000.")
  public String getRedemptionUrl() {
    return redemptionUrl;
  }

  public void setRedemptionUrl(String redemptionUrl) {
    this.redemptionUrl = redemptionUrl;
  }

  public EcommercePromoCode2 usageCount(Integer usageCount) {
    this.usageCount = usageCount;
    return this;
  }

   /**
   * Number of times promo code has been used.
   * @return usageCount
  **/
  @Schema(description = "Number of times promo code has been used.")
  public Integer getUsageCount() {
    return usageCount;
  }

  public void setUsageCount(Integer usageCount) {
    this.usageCount = usageCount;
  }

  public EcommercePromoCode2 enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether the promo code is currently enabled.
   * @return enabled
  **/
  @Schema(example = "true", description = "Whether the promo code is currently enabled.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public EcommercePromoCode2 createdAtForeign(DateTime createdAtForeign) {
    this.createdAtForeign = createdAtForeign;
    return this;
  }

   /**
   * The date and time the promotion was created in ISO 8601 format.
   * @return createdAtForeign
  **/
  @Schema(description = "The date and time the promotion was created in ISO 8601 format.")
  public DateTime getCreatedAtForeign() {
    return createdAtForeign;
  }

  public void setCreatedAtForeign(DateTime createdAtForeign) {
    this.createdAtForeign = createdAtForeign;
  }

  public EcommercePromoCode2 updatedAtForeign(DateTime updatedAtForeign) {
    this.updatedAtForeign = updatedAtForeign;
    return this;
  }

   /**
   * The date and time the promotion was updated in ISO 8601 format.
   * @return updatedAtForeign
  **/
  @Schema(description = "The date and time the promotion was updated in ISO 8601 format.")
  public DateTime getUpdatedAtForeign() {
    return updatedAtForeign;
  }

  public void setUpdatedAtForeign(DateTime updatedAtForeign) {
    this.updatedAtForeign = updatedAtForeign;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcommercePromoCode2 ecommercePromoCode2 = (EcommercePromoCode2) o;
    return Objects.equals(this.code, ecommercePromoCode2.code) &&
        Objects.equals(this.redemptionUrl, ecommercePromoCode2.redemptionUrl) &&
        Objects.equals(this.usageCount, ecommercePromoCode2.usageCount) &&
        Objects.equals(this.enabled, ecommercePromoCode2.enabled) &&
        Objects.equals(this.createdAtForeign, ecommercePromoCode2.createdAtForeign) &&
        Objects.equals(this.updatedAtForeign, ecommercePromoCode2.updatedAtForeign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, redemptionUrl, usageCount, enabled, createdAtForeign, updatedAtForeign);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcommercePromoCode2 {\n");
    
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    redemptionUrl: ").append(toIndentedString(redemptionUrl)).append("\n");
    sb.append("    usageCount: ").append(toIndentedString(usageCount)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    createdAtForeign: ").append(toIndentedString(createdAtForeign)).append("\n");
    sb.append("    updatedAtForeign: ").append(toIndentedString(updatedAtForeign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
