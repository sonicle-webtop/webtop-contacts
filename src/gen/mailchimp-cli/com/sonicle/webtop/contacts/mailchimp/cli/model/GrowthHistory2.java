/*
 * Mailchimp Marketing API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.55
 * Contact: apihelp@mailchimp.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sonicle.webtop.contacts.mailchimp.cli.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.sonicle.webtop.contacts.mailchimp.cli.model.ResourceLink;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * A summary of a specific list&#x27;s growth activity for a specific month and year.
 */
@Schema(description = "A summary of a specific list's growth activity for a specific month and year.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-22T12:55:27.492+02:00[Europe/Berlin]")
public class GrowthHistory2 {
  @JsonProperty("list_id")
  private String listId = null;

  @JsonProperty("month")
  private String month = null;

  @JsonProperty("existing")
  private Integer existing = null;

  @JsonProperty("imports")
  private Integer imports = null;

  @JsonProperty("optins")
  private Integer optins = null;

  @JsonProperty("subscribed")
  private Integer subscribed = null;

  @JsonProperty("unsubscribed")
  private Integer unsubscribed = null;

  @JsonProperty("reconfirm")
  private Integer reconfirm = null;

  @JsonProperty("cleaned")
  private Integer cleaned = null;

  @JsonProperty("pending")
  private Integer pending = null;

  @JsonProperty("deleted")
  private Integer deleted = null;

  @JsonProperty("transactional")
  private Integer transactional = null;

  @JsonProperty("_links")
  private List<ResourceLink> _links = null;

   /**
   * The list id for the growth activity report.
   * @return listId
  **/
  @Schema(description = "The list id for the growth activity report.")
  public String getListId() {
    return listId;
  }

   /**
   * The month that the growth history is describing.
   * @return month
  **/
  @Schema(description = "The month that the growth history is describing.")
  public String getMonth() {
    return month;
  }

   /**
   * (deprecated)
   * @return existing
  **/
  @Schema(description = "(deprecated)")
  public Integer getExisting() {
    return existing;
  }

   /**
   * (deprecated)
   * @return imports
  **/
  @Schema(description = "(deprecated)")
  public Integer getImports() {
    return imports;
  }

   /**
   * (deprecated)
   * @return optins
  **/
  @Schema(description = "(deprecated)")
  public Integer getOptins() {
    return optins;
  }

   /**
   * Total subscribed members on the list at the end of the month.
   * @return subscribed
  **/
  @Schema(description = "Total subscribed members on the list at the end of the month.")
  public Integer getSubscribed() {
    return subscribed;
  }

   /**
   * Newly unsubscribed members on the list for a specific month.
   * @return unsubscribed
  **/
  @Schema(description = "Newly unsubscribed members on the list for a specific month.")
  public Integer getUnsubscribed() {
    return unsubscribed;
  }

   /**
   * Newly reconfirmed members on the list for a specific month.
   * @return reconfirm
  **/
  @Schema(description = "Newly reconfirmed members on the list for a specific month.")
  public Integer getReconfirm() {
    return reconfirm;
  }

   /**
   * Newly cleaned (hard-bounced) members on the list for a specific month.
   * @return cleaned
  **/
  @Schema(description = "Newly cleaned (hard-bounced) members on the list for a specific month.")
  public Integer getCleaned() {
    return cleaned;
  }

   /**
   * Pending members on the list for a specific month.
   * @return pending
  **/
  @Schema(description = "Pending members on the list for a specific month.")
  public Integer getPending() {
    return pending;
  }

   /**
   * Newly deleted members on the list for a specific month.
   * @return deleted
  **/
  @Schema(description = "Newly deleted members on the list for a specific month.")
  public Integer getDeleted() {
    return deleted;
  }

   /**
   * Subscribers that have been sent transactional emails via Mandrill.
   * @return transactional
  **/
  @Schema(description = "Subscribers that have been sent transactional emails via Mandrill.")
  public Integer getTransactional() {
    return transactional;
  }

   /**
   * A list of link types and descriptions for the API schema documents.
   * @return _links
  **/
  @Schema(description = "A list of link types and descriptions for the API schema documents.")
  public List<ResourceLink> getLinks() {
    return _links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrowthHistory2 growthHistory2 = (GrowthHistory2) o;
    return Objects.equals(this.listId, growthHistory2.listId) &&
        Objects.equals(this.month, growthHistory2.month) &&
        Objects.equals(this.existing, growthHistory2.existing) &&
        Objects.equals(this.imports, growthHistory2.imports) &&
        Objects.equals(this.optins, growthHistory2.optins) &&
        Objects.equals(this.subscribed, growthHistory2.subscribed) &&
        Objects.equals(this.unsubscribed, growthHistory2.unsubscribed) &&
        Objects.equals(this.reconfirm, growthHistory2.reconfirm) &&
        Objects.equals(this.cleaned, growthHistory2.cleaned) &&
        Objects.equals(this.pending, growthHistory2.pending) &&
        Objects.equals(this.deleted, growthHistory2.deleted) &&
        Objects.equals(this.transactional, growthHistory2.transactional) &&
        Objects.equals(this._links, growthHistory2._links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listId, month, existing, imports, optins, subscribed, unsubscribed, reconfirm, cleaned, pending, deleted, transactional, _links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrowthHistory2 {\n");
    
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    existing: ").append(toIndentedString(existing)).append("\n");
    sb.append("    imports: ").append(toIndentedString(imports)).append("\n");
    sb.append("    optins: ").append(toIndentedString(optins)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("    unsubscribed: ").append(toIndentedString(unsubscribed)).append("\n");
    sb.append("    reconfirm: ").append(toIndentedString(reconfirm)).append("\n");
    sb.append("    cleaned: ").append(toIndentedString(cleaned)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    transactional: ").append(toIndentedString(transactional)).append("\n");
    sb.append("    _links: ").append(toIndentedString(_links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
